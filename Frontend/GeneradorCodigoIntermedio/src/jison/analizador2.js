/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,15],$V2=[9,155],$V3=[11,63],$V4=[4,32,33,34,35],$V5=[1,25],$V6=[4,33,34,35],$V7=[1,33],$V8=[1,52],$V9=[1,53],$Va=[1,54],$Vb=[4,32,33,34,35,53],$Vc=[1,74],$Vd=[1,75],$Ve=[1,79],$Vf=[63,68,82],$Vg=[1,85],$Vh=[1,86],$Vi=[1,87],$Vj=[1,88],$Vk=[1,89],$Vl=[81,127,130,131,132,133],$Vm=[1,93],$Vn=[1,94],$Vo=[1,95],$Vp=[1,110],$Vq=[1,111],$Vr=[1,114],$Vs=[1,115],$Vt=[1,112],$Vu=[1,113],$Vv=[1,116],$Vw=[2,119],$Vx=[2,22,97,99,120,122,125,159],$Vy=[1,136],$Vz=[1,137],$VA=[1,140],$VB=[1,139],$VC=[1,135],$VD=[1,138],$VE=[1,133],$VF=[1,134],$VG=[1,141],$VH=[1,142],$VI=[79,100],$VJ=[1,157],$VK=[1,158],$VL=[1,159],$VM=[1,160],$VN=[1,161],$VO=[1,162],$VP=[1,163],$VQ=[1,164],$VR=[1,165],$VS=[1,166],$VT=[1,167],$VU=[1,168],$VV=[1,169],$VW=[1,170],$VX=[79,100,107,135,136,137,138,139,140,141,142,144,145,146,147,148,149,152],$VY=[1,203],$VZ=[1,222],$V_=[1,228],$V$=[2,116],$V01=[1,218],$V11=[1,219],$V21=[1,220],$V31=[1,230],$V41=[1,231],$V51=[1,229],$V61=[1,223],$V71=[1,225],$V81=[1,226],$V91=[1,227],$Va1=[79,100,107,135,140,152],$Vb1=[79,100,107,135,136,137,139,140,152],$Vc1=[2,22,68,92,93,94,97,99,101,105,108,120,122,125,126,127,130,131,132,133],$Vd1=[1,249],$Ve1=[1,250],$Vf1=[1,253],$Vg1=[1,252],$Vh1=[1,248],$Vi1=[1,251],$Vj1=[1,246],$Vk1=[1,247],$Vl1=[1,254],$Vm1=[1,255],$Vn1=[1,276],$Vo1=[1,277],$Vp1=[1,278],$Vq1=[1,279],$Vr1=[1,280],$Vs1=[1,281],$Vt1=[1,282],$Vu1=[1,283],$Vv1=[1,284],$Vw1=[1,285],$Vx1=[1,286],$Vy1=[1,287],$Vz1=[1,288],$VA1=[1,289],$VB1=[76,79,100,135,136,137,138,139,140,141,142,144,145,146,147,148,149],$VC1=[1,304],$VD1=[1,305],$VE1=[1,306],$VF1=[1,347],$VG1=[1,352],$VH1=[76,79,100,135,140],$VI1=[76,79,100,135,136,137,139,140],$VJ1=[1,379],$VK1=[68,105,108],$VL1=[2,22,97,99,120,121,122,125,159];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"EOF":4,"PAQUETE":5,"URL":6,"PYTHON":7,"codigo_python":8,"JAVA":9,"codigo_java":10,"PROGRAMA":11,"includes":12,"constantes":13,"globales":14,"lista_constantes":15,"constante":16,"lista_constantesp":17,"lista_globales":18,"var_global":19,"lista_globalesp":20,"tipos_datos":21,"IDENTIFICADOR":22,"IGUAL":23,"dato":24,"PUNTOC":25,"dimensiones":26,"COR_A":27,"expresion":28,"COR_C":29,"dimensionesp":30,"INTV":31,"CONSTANTE":32,"INT":33,"CHAR":34,"FLOAT":35,"CHARV":36,"FLOATV":37,"main":38,"VOID":39,"MAIN":40,"PAR_A":41,"PAR_C":42,"LLAVE_A":43,"lista_sentencias_c":44,"LLAVE_C":45,"sentencias_c":46,"sentencia_c":47,"asignacion_c":48,"declaracion_c":49,"lista_includes":50,"include":51,"lista_includesp":52,"INCLUDE":53,"tipos_include":54,"TODOPY":55,"ESPY":56,"TODOJAVA":57,"JAVAARCHIVO":58,"JAVACLASE":59,"JAVACLASES":60,"clases":61,"clase":62,"public":63,"class":64,"herencia":65,"{":66,"body_classp":67,"}":68,"body_class":69,"parte_java":70,"declaracion_global_java":71,"metodo_java":72,"constructorl":73,"modificador_java":74,"tipo_java":75,";":76,"(":77,"lista_parametros_java":78,")":79,"listado_java":80,"void":81,"private":82,"sentencias_java":83,"sentencia_java":84,"if_java":85,"declaracion_java":86,"for_java":87,"while_java":88,"do_while_java":89,"asignacion_java":90,"switch_java":91,"continue":92,"break":93,"return":94,"expresion_java":95,"imprimir_java":96,"print":97,"lista_imprimir_java":98,"println":99,",":100,"switch":101,"casos_java":102,"default_java":103,"caso_java":104,"case":105,"valor":106,":":107,"default":108,"declaracion_cola_java":109,"ASIGNAR":110,"tipo_input_java":111,"MAS_ASIGNAR":112,"MAS":113,"MENOS":114,"intinput":115,"floatinput":116,"charinput":117,"valor_java":118,"STRING":119,"IF":120,"ELSE":121,"for":122,"declaracion_for":123,"accion_posterior_java":124,"while":125,"do":126,"int":127,"parametros_java":128,"parametro_java":129,"String":130,"float":131,"char":132,"boolean":133,"extends":134,"SUMA":135,"POR":136,"ENTRE":137,"POT":138,"MOD":139,"RESTA":140,"AND":141,"OR":142,"NOT":143,"IGUAL_IGUAL":144,"DIFERENTE":145,"MAYOR":146,"MAYOR_IGUAL":147,"MENOR":148,"MENOR_IGUAL":149,"true":150,"false":151,"SALTO":152,"funciones_python":153,"funcion_python":154,"def":155,"lista_parametros_python":156,"INDENT":157,"sentencias_python":158,"DEDENT":159,"parametros_python":160,"parametros_pythonp":161,"sentencia_python":162,"sentencias_pythonp":163,"asignacion_python":164,"if_python":165,"for_python":166,"print_python":167,"while_python":168,"lista_imprimir_python":169,"expresion_python":170,"input":171,"in":172,"range":173,"if_python_cola":174,"elif_python":175,"ELIF":176,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",5:"PAQUETE",6:"URL",7:"PYTHON",9:"JAVA",11:"PROGRAMA",22:"IDENTIFICADOR",23:"IGUAL",25:"PUNTOC",27:"COR_A",29:"COR_C",31:"INTV",32:"CONSTANTE",33:"INT",34:"CHAR",35:"FLOAT",36:"CHARV",37:"FLOATV",39:"VOID",40:"MAIN",41:"PAR_A",42:"PAR_C",43:"LLAVE_A",45:"LLAVE_C",53:"INCLUDE",55:"TODOPY",56:"ESPY",57:"TODOJAVA",58:"JAVAARCHIVO",59:"JAVACLASE",60:"JAVACLASES",63:"public",64:"class",66:"{",68:"}",76:";",77:"(",79:")",81:"void",82:"private",92:"continue",93:"break",94:"return",97:"print",99:"println",100:",",101:"switch",105:"case",107:":",108:"default",110:"ASIGNAR",112:"MAS_ASIGNAR",113:"MAS",114:"MENOS",115:"intinput",116:"floatinput",117:"charinput",119:"STRING",120:"IF",121:"ELSE",122:"for",125:"while",126:"do",127:"int",130:"String",131:"float",132:"char",133:"boolean",134:"extends",135:"SUMA",136:"POR",137:"ENTRE",138:"POT",139:"MOD",140:"RESTA",141:"AND",142:"OR",143:"NOT",144:"IGUAL_IGUAL",145:"DIFERENTE",146:"MAYOR",147:"MAYOR_IGUAL",148:"MENOR",149:"MENOR_IGUAL",150:"true",151:"false",152:"SALTO",155:"def",157:"INDENT",159:"DEDENT",171:"input",172:"in",173:"range",176:"ELIF"},
productions_: [0,[3,1],[3,11],[13,0],[13,1],[15,2],[17,0],[17,1],[14,0],[14,1],[18,2],[20,0],[20,1],[19,5],[19,4],[26,4],[30,0],[30,1],[28,0],[28,1],[16,6],[21,1],[21,1],[21,1],[24,1],[24,1],[24,1],[38,7],[44,0],[44,1],[46,2],[46,1],[47,1],[47,1],[49,5],[49,4],[48,4],[48,5],[12,0],[12,1],[50,2],[52,0],[52,1],[51,2],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[10,0],[10,1],[61,2],[61,1],[62,7],[67,0],[67,1],[69,2],[69,1],[70,1],[70,1],[70,1],[71,4],[72,9],[72,9],[74,1],[74,1],[83,2],[83,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,2],[84,2],[84,3],[84,1],[84,2],[96,5],[96,5],[98,3],[98,1],[91,8],[102,2],[102,1],[104,4],[103,0],[103,3],[86,4],[86,7],[90,4],[90,4],[90,3],[90,3],[90,6],[111,1],[111,1],[111,1],[109,0],[109,2],[118,1],[118,1],[118,1],[85,7],[85,11],[85,9],[87,11],[88,7],[89,9],[123,4],[123,3],[124,2],[124,2],[80,0],[80,1],[73,8],[78,0],[78,1],[128,3],[128,1],[129,2],[75,1],[75,1],[75,1],[75,1],[75,1],[65,0],[65,2],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,2],[95,3],[95,3],[95,2],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,1],[95,1],[95,1],[95,1],[95,1],[95,3],[95,1],[95,1],[8,0],[8,1],[8,2],[153,2],[153,1],[154,10],[156,0],[156,1],[160,2],[161,0],[161,2],[158,2],[163,0],[163,1],[162,1],[162,1],[162,1],[162,1],[162,1],[162,2],[167,5],[167,5],[169,3],[169,1],[164,4],[164,6],[106,1],[106,1],[106,1],[106,1],[166,11],[168,7],[165,7],[165,8],[174,6],[174,7],[174,1],[175,7],[175,8],[170,3],[170,3],[170,3],[170,3],[170,3],[170,3],[170,2],[170,3],[170,3],[170,2],[170,3],[170,3],[170,3],[170,3],[170,3],[170,3],[170,3],[170,1],[170,1],[170,1],[170,1],[170,1],[170,1],[170,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Vacio");
break;
case 2:
console.log("Encontrados bloques de python y de java "); console.log(errores);
break;
case 55:
console.log("clase sin cuerpo");
break;
case 78:
console.log("Retorna "+$$[$0-1]);
break;
case 79:
console.log("Imprime");
break;
case 93:
console.log("Asignacion normal"); var asig = new yy.asignacion_java($$[$0-3],$$[$0-1],"normal",0,0); asig.ejecutar(); 
break;
case 94:
console.log("Asignacion incremencial");
break;
case 95:
console.log("Asignacion ++");
break;
case 96:
console.log("Asignacion --");
break;
case 106:
console.log("encuentra if");
break;
case 107:
console.log("encuentra if-else");
break;
case 108:
console.log("encuentra if-elseif");
break;
case 131:
 this.$ = new yy.expresion_java("+",$$[$0-2],$$[$0],null,0,0);
break;
case 132:
 this.$ = new yy.expresion_java("*",$$[$0-2],$$[$0],null,0,0);
break;
case 133:
 this.$ = new yy.expresion_java("/",$$[$0-2],$$[$0],null,0,0);
break;
case 134:
 this.$ = new yy.expresion_java("^",$$[$0-2],$$[$0],null,0,0);
break;
case 135:
 this.$ = new yy.expresion_java("%",$$[$0-2],$$[$0],null,0,0);
break;
case 136:
 this.$ = new yy.expresion_java("-",$$[$0-2],$$[$0],null,0,0);
break;
case 147: case 211:
 this.$ = $$[$0-1]; 
break;
case 148:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"identificador",0,0),0,0);
break;
case 149:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"int",0,0),0,0);
break;
case 150:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"string",0,0),0,0);
break;
case 151:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"float",0,0),0,0);
break;
case 152:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"char",0,0),0,0);
break;
case 154:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"boolean",0,0),0,0);
break;
case 155:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"false",0,0),0,0);
break;
case 159:
console.log("otra funcion");
break;
case 160:
console.log("una funcion"); 
break;
case 180:
console.log("una asignacion");
break;
case 181:
console.log("input");
break;
case 185:
console.log("Encuentra char");
break;
case 186:
console.log("Encontrado for");
break;
case 187:
console.log("Encuentra while");
break;
case 188:
 console.log("if"); 
break;
case 189:
 console.log("if-cola"); 
break;
case 190:
 console.log("if-else"); 
break;
case 191:
 console.log("if-elif-else"); 
break;
case 192:
 console.log("if-elif"); 
break;
case 193:
 console.log("elif"); 
break;
case 194:
 console.log("elif-elif"); 
break;
case 213: case 214: case 215: case 216:
 this.$ = $$[$0]; 
break;
case 217:
 this.$ = true; 
break;
case 218:
 this.$ = false; 
break;
}
},
table: [{3:1,4:[1,2],5:[1,3]},{1:[3]},{1:[2,1]},{6:[1,4]},{7:[1,5]},{8:6,9:[2,156],152:[1,7]},{9:[1,8]},{9:[2,157],153:9,154:10,155:$V0},{10:12,11:[2,50],61:13,62:14,63:$V1},{9:[2,158],154:16,155:$V0},o($V2,[2,160]),{22:[1,17]},{11:[1,18]},{11:[2,51],62:19,63:$V1},o($V3,[2,53]),{64:[1,20]},o($V2,[2,159]),{77:[1,21]},o($V4,[2,38],{12:22,50:23,51:24,53:$V5}),o($V3,[2,52]),{22:[1,26]},{22:[1,29],79:[2,162],156:27,160:28},o($V6,[2,3],{13:30,15:31,16:32,32:$V7}),o($V4,[2,39]),o($V4,[2,41],{51:24,52:34,50:35,53:$V5}),{54:36,55:[1,37],56:[1,38],57:[1,39],58:[1,40],59:[1,41],60:[1,42]},{65:43,66:[2,129],134:[1,44]},{79:[1,45]},{79:[2,163]},{79:[2,165],100:[1,47],161:46},{4:[2,8],14:48,18:49,19:50,21:51,33:$V8,34:$V9,35:$Va},o($V6,[2,4]),o($V6,[2,6],{16:32,17:55,15:56,32:$V7}),{21:57,33:$V8,34:$V9,35:$Va},o($V4,[2,40]),o($V4,[2,42]),o($Vb,[2,43]),o($Vb,[2,44]),o($Vb,[2,45]),o($Vb,[2,46]),o($Vb,[2,47]),o($Vb,[2,48]),o($Vb,[2,49]),{66:[1,58]},{22:[1,59]},{107:[1,60]},{79:[2,164]},{22:[1,61]},{4:[1,62]},{4:[2,9]},{4:[2,11],18:64,19:50,20:63,21:51,33:$V8,34:$V9,35:$Va},{22:[1,65]},{22:[2,21]},{22:[2,22]},{22:[2,23]},o($V6,[2,5]),o($V6,[2,7]),{22:[1,66]},{63:$Vc,67:67,68:[2,55],69:68,70:69,71:70,72:71,73:72,74:73,82:$Vd},{66:[2,130]},{152:[1,76]},{79:[2,166]},{1:[2,2]},{4:[2,10]},{4:[2,12]},{23:[1,77],26:78,27:$Ve},{23:[1,80]},{68:[1,81]},{63:$Vc,68:[2,56],70:82,71:70,72:71,73:72,74:73,82:$Vd},o($Vf,[2,58]),o($Vf,[2,59]),o($Vf,[2,60]),o($Vf,[2,61]),{75:83,81:[1,84],127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},o($Vl,[2,65],{22:[1,90]}),o($Vl,[2,66]),{157:[1,91]},{24:92,31:$Vm,36:$Vn,37:$Vo},{25:[1,96]},{28:97,29:[2,18],31:[1,98]},{24:99,31:$Vm,36:$Vn,37:$Vo},o($V3,[2,54]),o($Vf,[2,57]),{22:[1,100]},{22:[1,101]},{22:[2,124]},{22:[2,125]},{22:[2,126]},{22:[2,127]},{22:[2,128]},{77:[1,102]},{2:$Vp,22:$Vq,97:$Vr,99:$Vs,120:$Vt,122:$Vu,125:$Vv,158:103,162:104,164:105,165:106,166:107,167:108,168:109},{25:[1,117]},{25:[2,24]},{25:[2,25]},{25:[2,26]},o($V6,[2,14]),{29:[1,118]},{29:[2,19]},{25:[1,119]},{76:[1,120],77:[1,121]},{77:[1,122]},{75:126,78:123,79:$Vw,127:$Vg,128:124,129:125,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{159:[1,127]},{2:$Vp,22:$Vq,97:$Vr,99:$Vs,120:$Vt,122:$Vu,125:$Vv,158:129,159:[2,168],162:104,163:128,164:105,165:106,166:107,167:108,168:109},o($Vx,[2,170]),o($Vx,[2,171]),o($Vx,[2,172]),o($Vx,[2,173]),o($Vx,[2,174]),{152:[1,130]},{110:[1,131]},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:132},{22:[1,143]},{77:[1,144]},{77:[1,145]},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:146},o($V6,[2,13]),{25:[2,16],26:148,27:$Ve,30:147},o($V4,[2,20]),o($Vf,[2,62]),{75:126,78:149,79:$Vw,127:$Vg,128:124,129:125,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{75:126,78:150,79:$Vw,127:$Vg,128:124,129:125,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{79:[1,151]},{79:[2,120],100:[1,152]},o($VI,[2,122]),{22:[1,153]},o($V2,[2,161]),{159:[2,167]},{159:[2,169]},o($Vx,[2,175]),{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:154,171:[1,155]},{107:[1,156],135:$VJ,136:$VK,137:$VL,138:$VM,139:$VN,140:$VO,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:171},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:172},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:173},o($VX,[2,212]),o($VX,[2,213]),o($VX,[2,214]),o($VX,[2,215]),o($VX,[2,216]),o($VX,[2,217]),o($VX,[2,218]),{172:[1,174]},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,169:175,170:176},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,169:177,170:176},{107:[1,178],135:$VJ,136:$VK,137:$VL,138:$VM,139:$VN,140:$VO,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW},{25:[2,15]},{25:[2,17]},{79:[1,179]},{79:[1,180]},{66:[1,181]},{75:126,127:$Vg,129:182,130:$Vh,131:$Vi,132:$Vj,133:$Vk},o($VI,[2,123]),{135:$VJ,136:$VK,137:$VL,138:$VM,139:$VN,140:$VO,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW,152:[1,183]},{77:[1,184]},{152:[1,185]},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:186},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:187},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:188},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:189},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:190},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:191},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:192},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:193},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:194},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:195},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:196},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:197},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:198},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:199},o($VX,[2,201]),o($VX,[2,204]),{79:[1,200],135:$VJ,136:$VK,137:$VL,138:$VM,139:$VN,140:$VO,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW},{173:[1,201]},{79:[1,202],100:$VY},o($VI,[2,179],{135:$VJ,136:$VK,137:$VL,138:$VM,139:$VN,140:$VO,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),{79:[1,204],100:$VY},{152:[1,205]},{66:[1,206]},{66:[1,207]},{2:$VZ,22:$V_,68:$V$,75:224,80:208,83:209,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},o($VI,[2,121]),o($Vx,[2,180]),{79:[1,232]},{157:[1,233]},o($Va1,[2,195],{136:$VK,137:$VL,138:$VM,139:$VN,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),o($Vb1,[2,196],{138:$VM,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),o($Vb1,[2,197],{138:$VM,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),o([79,100,107,135,136,137,138,139,140,152],[2,198],{141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),o($Vb1,[2,199],{138:$VM,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),o($Va1,[2,200],{136:$VK,137:$VL,138:$VM,139:$VN,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),o([79,100,107,135,136,137,138,139,140,141,142,152],[2,202],{144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),o([79,100,107,135,136,137,138,139,140,142,152],[2,203],{141:$VP,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),o($VX,[2,205]),o($VX,[2,206]),o($VX,[2,207]),o($VX,[2,208]),o($VX,[2,209]),o($VX,[2,210]),o($VX,[2,211]),{77:[1,234]},{152:[1,235]},{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:236},{152:[1,237]},{157:[1,238]},{2:$VZ,22:$V_,68:$V$,75:224,80:239,83:209,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{2:$VZ,22:$V_,68:$V$,75:224,80:240,83:209,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{68:[1,241]},{2:$VZ,22:$V_,68:[2,117],75:224,84:242,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},o($Vc1,[2,68]),o($Vc1,[2,69]),o($Vc1,[2,70]),o($Vc1,[2,71]),o($Vc1,[2,72]),o($Vc1,[2,73]),o($Vc1,[2,74]),o($Vc1,[2,75]),{76:[1,243]},{76:[1,244]},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:245,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},o($Vc1,[2,79]),{76:[1,256]},{77:[1,257]},{22:[1,258]},{77:[1,259]},{77:[1,260]},{66:[1,261]},{110:[1,262],112:[1,263],113:[1,264],114:[1,265]},{77:[1,266]},{77:[1,267]},{77:[1,268]},{152:[1,269]},{2:$Vp,22:$Vq,97:$Vr,99:$Vs,120:$Vt,122:$Vu,125:$Vv,158:270,162:104,164:105,165:106,166:107,167:108,168:109},{79:[1,271]},o($Vx,[2,176]),o($VI,[2,178],{135:$VJ,136:$VK,137:$VL,138:$VM,139:$VN,140:$VO,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW}),o($Vx,[2,177]),{2:$Vp,22:$Vq,97:$Vr,99:$Vs,120:$Vt,122:$Vu,125:$Vv,158:272,162:104,164:105,165:106,166:107,167:108,168:109},{68:[1,273]},{68:[1,274]},o($Vf,[2,118]),o($Vc1,[2,67]),o($Vc1,[2,76]),o($Vc1,[2,77]),{76:[1,275],135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:290,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:291,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:292,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},o($VB1,[2,148],{77:[1,293]}),o($VB1,[2,149]),o($VB1,[2,150]),o($VB1,[2,151]),o($VB1,[2,152]),o($VB1,[2,154]),o($VB1,[2,155]),o($Vc1,[2,80]),{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:294,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{76:[2,101],109:295,110:[1,296]},{22:[1,299],123:297,127:[1,298]},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:300,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{2:$VZ,22:$V_,68:$V$,75:224,80:301,83:209,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:302,111:303,115:$VC1,116:$VD1,117:$VE1,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:307,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{76:[1,308]},{76:[1,309]},{22:[1,310]},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:312,98:311,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:312,98:313,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},o($Vx,[2,181]),{159:[1,314]},{107:[1,315]},{159:[1,316]},o($Vf,[2,63]),o($Vf,[2,64]),o($Vc1,[2,78]),{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:317,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:318,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:319,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:320,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:321,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:322,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:323,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:324,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:325,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:326,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:327,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:328,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:329,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:330,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},o($VB1,[2,137]),o($VB1,[2,140]),{79:[1,331],135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1},{79:[1,332]},{79:[1,333],135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1},{76:[1,334]},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:336,111:335,115:$VC1,116:$VD1,117:$VE1,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{76:[1,337]},{22:[1,338]},{110:[1,339]},{79:[1,340],135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1},{68:[1,341]},{76:[1,342],135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1},{77:[1,343]},{77:[2,98]},{77:[2,99]},{77:[2,100]},{76:[1,344],135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1},o($Vc1,[2,95]),o($Vc1,[2,96]),{79:[1,345]},{79:[1,346],100:$VF1},o($VI,[2,84],{135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),{79:[1,348],100:$VF1},o($Vx,[2,188],{174:349,175:351,121:[1,350],176:$VG1}),{152:[1,353]},o($Vx,[2,187]),o($VH1,[2,131],{136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),o($VI1,[2,132],{138:$Vq1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),o($VI1,[2,133],{138:$Vq1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),o([76,79,100,135,136,137,138,139,140],[2,134],{141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),o($VI1,[2,135],{138:$Vq1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),o($VH1,[2,136],{136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),o([76,79,100,135,136,137,138,139,140,141,142],[2,138],{144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),o([76,79,100,135,136,137,138,139,140,142],[2,139],{141:$Vt1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),o($VB1,[2,141]),o($VB1,[2,142]),o($VB1,[2,143]),o($VB1,[2,144]),o($VB1,[2,145]),o($VB1,[2,146]),o($VB1,[2,147]),o($VB1,[2,153]),{66:[1,354]},o($Vc1,[2,91]),{77:[1,355]},{76:[2,102],135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:356,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{110:[1,357]},{33:[1,358]},{66:[1,359]},{125:[1,360]},o($Vc1,[2,93]),{79:[1,361]},o($Vc1,[2,94]),{66:[1,362]},{76:[1,363]},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:364,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},{76:[1,365]},o($Vx,[2,189]),{107:[1,366]},o($Vx,[2,192],{121:[1,367]}),{22:$Vy,33:$Vz,34:$VA,35:$VB,77:$VC,119:$VD,140:$VE,143:$VF,150:$VG,151:$VH,170:368},{157:[1,369]},{2:$VZ,22:$V_,68:$V$,75:224,80:370,83:209,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{79:[1,371]},{76:[1,372],135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1},{33:[1,373]},{76:[2,113]},{2:$VZ,22:$V_,68:$V$,75:224,80:374,83:209,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{77:[1,375]},{76:[1,376]},{102:377,104:378,105:$VJ1},o($Vc1,[2,81]),o($VI,[2,83],{135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1}),o($Vc1,[2,82]),{152:[1,380]},{107:[1,381]},{107:[1,382],135:$VJ,136:$VK,137:$VL,138:$VM,139:$VN,140:$VO,141:$VP,142:$VQ,144:$VR,145:$VS,146:$VT,147:$VU,148:$VV,149:$VW},{2:$Vp,22:$Vq,97:$Vr,99:$Vs,120:$Vt,122:$Vu,125:$Vv,158:383,162:104,164:105,165:106,166:107,167:108,168:109},{68:[1,384]},{76:[1,385]},{22:[1,387],124:386},{76:[2,112]},{68:[1,388]},{22:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,77:$Vh1,95:389,119:$Vi1,140:$Vj1,143:$Vk1,150:$Vl1,151:$Vm1},o($Vc1,[2,97]),{68:[2,89],103:390,104:391,105:$VJ1,108:[1,392]},o($VK1,[2,87]),{33:[1,396],34:[1,397],35:[1,395],106:393,119:[1,394]},{157:[1,398]},{152:[1,399]},{152:[1,400]},{159:[1,401]},o($Vc1,[2,106],{121:[1,402]}),o($Vc1,[2,92]),{79:[1,403]},{113:[1,404],114:[1,405]},o($Vc1,[2,110]),{79:[1,406],135:$Vn1,136:$Vo1,137:$Vp1,138:$Vq1,139:$Vr1,140:$Vs1,141:$Vt1,142:$Vu1,144:$Vv1,145:$Vw1,146:$Vx1,147:$Vy1,148:$Vz1,149:$VA1},{68:[1,407]},o($VK1,[2,86]),{107:[1,408]},{107:[1,409]},{107:[2,182]},{107:[2,183]},{107:[2,184]},{107:[2,185]},{2:$Vp,22:$Vq,97:$Vr,99:$Vs,120:$Vt,122:$Vu,125:$Vv,158:410,162:104,164:105,165:106,166:107,167:108,168:109},{157:[1,411]},{157:[1,412]},o($Vx,[2,186]),{66:[1,413],85:414,120:$V61},{66:[1,415]},{79:[2,114]},{79:[2,115]},{76:[1,416]},o($Vc1,[2,85]),{2:$VZ,22:$V_,75:224,83:417,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{2:$VZ,22:$V_,75:224,83:418,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},{159:[1,419]},{2:$Vp,22:$Vq,97:$Vr,99:$Vs,120:$Vt,122:$Vu,125:$Vv,158:420,162:104,164:105,165:106,166:107,167:108,168:109},{2:$Vp,22:$Vq,97:$Vr,99:$Vs,120:$Vt,122:$Vu,125:$Vv,158:421,162:104,164:105,165:106,166:107,167:108,168:109},{2:$VZ,22:$V_,68:$V$,75:224,80:422,83:209,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},o($Vc1,[2,108]),{2:$VZ,22:$V_,68:$V$,75:224,80:423,83:209,84:210,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},o($Vc1,[2,111]),{2:$VZ,22:$V_,68:[2,90],75:224,84:242,85:211,86:212,87:213,88:214,89:215,90:216,91:217,92:$V01,93:$V11,94:$V21,96:221,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk},o($VK1,[2,88],{85:211,86:212,87:213,88:214,89:215,90:216,91:217,96:221,75:224,84:242,2:$VZ,22:$V_,92:$V01,93:$V11,94:$V21,97:$V31,99:$V41,101:$V51,120:$V61,122:$V71,125:$V81,126:$V91,127:$Vg,130:$Vh,131:$Vi,132:$Vj,133:$Vk}),o($Vx,[2,190]),{159:[1,424]},{159:[1,425]},{68:[1,426]},{68:[1,427]},o($Vx,[2,191]),o($VL1,[2,193],{175:428,176:$VG1}),o($Vc1,[2,107]),o($Vc1,[2,109]),o($VL1,[2,194])],
defaultActions: {2:[2,1],28:[2,163],46:[2,164],49:[2,9],52:[2,21],53:[2,22],54:[2,23],59:[2,130],61:[2,166],62:[2,2],63:[2,10],64:[2,12],85:[2,124],86:[2,125],87:[2,126],88:[2,127],89:[2,128],93:[2,24],94:[2,25],95:[2,26],98:[2,19],128:[2,167],129:[2,169],147:[2,15],148:[2,17],304:[2,98],305:[2,99],306:[2,100],358:[2,113],373:[2,112],394:[2,182],395:[2,183],396:[2,184],397:[2,185],404:[2,114],405:[2,115]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 var indents = [0], indent = 0, indent_actual = 0, dedents = 0, val_actual = "" 
	var errores = [];

    function agregarErrores(valor,tipo,razon,linea,columna){
        errores.push({valor:valor,tipo:tipo,razon:razon,linea:linea,columna:columna});
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: console.log("eninicio"); 
break;
case 1: console.log("tabulacion"); 
break;
case 2: return 5; 
break;
case 3: return 6; 
break;
case 4: this.begin("PYTHON"); return 7; 
break;
case 5: /*espacios en blanco*/ 
break;
case 6: /*tabulacion*/ 
break;
case 7: indent_actual = 0; this.begin("INDENT"); return 152; 
break;
case 8: this.begin("JAVA"); return 9 
break;
case 9: return 120; 
break;
case 10: return 121; 
break;
case 11: return 176; 
break;
case 12: return 112; 
break;
case 13: return 113; 
break;
case 14: return 114; 
break;
case 15: return 135; 
break;
case 16: return 140; 
break;
case 17: return 136; 
break;
case 18: return 137; 
break;
case 19: return 138; 
break;
case 20: return 139; 
break;
case 21: return 141; 
break;
case 22: return 142; 
break;
case 23: return 143; 
break;
case 24: return 110; 
break;
case 25: return 144; 
break;
case 26: return 145; 
break;
case 27: return 146; 
break;
case 28: return 147; 
break;
case 29: return 148; 
break;
case 30: return 149; 
break;
case 31: return yy_.yytext; 
break;
case 32: return 33; 
break;
case 33: return 35; 
break;
case 34: return 119; 
break;
case 35: return 34; 
break;
case 36: return 22; 
break;
case 37: indent_actual += 1; 
break;
case 38: /* espacios en blanco */ 
break;
case 39: indent_actual = 0; 
break;
case 40: 
                                            var posible = indent - indent_actual;
                                            this.unput(yy_.yytext);
                                            if (posible==-1){
                                                indent = indent_actual;
                                                this.begin('PYTHON');
                                                return 157;
                                            } else if (posible > 0){
                                                indent = indent_actual;
                                                dedents = posible;
                                                this.begin('DEDENT');
                                            } else if (posible==0){
                                                dedents = 0;
                                                this.begin('PYTHON');
                                            } else {
                                                var cuantos = (posible*-1)-1;
                                                console.log("Sobran "+cuantos+" indents");
                                                console.log("."+yy_.yytext+".");
                                                this.begin('PYTHON');
                                                indent++;
                                                return 157;
                                            } 
                                        
break;
case 41:
                                            this.unput(yy_.yytext);
                                            if (dedents!=0){
                                                dedents--;
                                                return 159;
                                            } else {
                                                this.begin("PYTHON");
                                            }
                                        
break;
case 42: /*nada*/ 
break;
case 43: this.begin("PROGRAMA"); return 11; 
break;
case 44: return 120; 
break;
case 45: return 121; 
break;
case 46: return 112; 
break;
case 47: return 113; 
break;
case 48: return 114; 
break;
case 49: return 135; 
break;
case 50: return 140; 
break;
case 51: return 136; 
break;
case 52: return 137; 
break;
case 53: return 138; 
break;
case 54: return 139; 
break;
case 55: return 141; 
break;
case 56: return 142; 
break;
case 57: return 143; 
break;
case 58: return 110; 
break;
case 59: return 144; 
break;
case 60: return 145; 
break;
case 61: return 146; 
break;
case 62: return 147; 
break;
case 63: return 148; 
break;
case 64: return 149; 
break;
case 65: return yy_.yytext; 
break;
case 66: return 35; 
break;
case 67: return 33; 
break;
case 68: return 119; 
break;
case 69: return 34; 
break;
case 70: return 22; 
break;
case 71: /*nada*/ 
break;
case 72: return 53; 
break;
case 73: return 55; 
break;
case 74: return 56; 
break;
case 75: return 57; 
break;
case 76: return 58; 
break;
case 77: return 60; 
break;
case 78: return 59; 
break;
case 79: return 40; 
break;
case 80: return 39; 
break;
case 81: return 41; 
break;
case 82: return 23; 
break;
case 83: return 42; 
break;
case 84: return 43; 
break;
case 85: return 45; 
break;
case 86: return 27; 
break;
case 87: return 29; 
break;
case 88: return 135; 
break;
case 89: return 140; 
break;
case 90: return 136; 
break;
case 91: this.begin('BLOQUE_COMENTARIO'); 
break;
case 92: this.begin("COMENTARIO"); 
break;
case 93: this.begin('PROGRAMA'); 
break;
case 94: agregarErrores(yy_.yytext,'COMENTARIO BLOQUE','COMENTARIO',yylineo,0) 
break;
case 95: this.begin('PROGRAMA'); 
break;
case 96: agregarErrores(yy_.yytext,'COMENTARIO','COMENTARIO',yylineo,0) 
break;
case 97: return 137; 
break;
case 98: return 139; 
break;
case 99: return 32; 
break;
case 100: return 33; 
break;
case 101: return 35; 
break;
case 102: return 34; 
break;
case 103: return 120; 
break;
case 104: return 121; 
break;
case 105: return 'WHILE'; 
break;
case 106: return 'DO'; 
break;
case 107: return 'FOR'; 
break;
case 108: return 'CONTINUE'; 
break;
case 109: return 'BREAK'; 
break;
case 110: return 'SCANF'; 
break;
case 111: return 'SCANF'; 
break;
case 112: return 'CLEAR'; 
break;
case 113: return 'GETCH'; 
break;
case 114: return 37; 
break;
case 115: return 31; 
break;
case 116: return 36; 
break;
case 117: return 'IDENTIFICADORREF'; 
break;
case 118: return 22; 
break;
case 119: return 25; 
break;
case 120: return 4; 
break;
}
},
rules: [/^(?:[\ \n\r]+)/,/^(?:[\t])/,/^(?:paquete\b)/,/^(?:(((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)(\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))?))/,/^(?:(%%PYTHON\b))/,/^(?:[\ ]+)/,/^(?:\t)/,/^(?:(\r?\n)+)/,/^(?:(%%JAVA\b))/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:((continue|finally|return|global|assert|except|import|lambda|raise|class|print|break|while|yield|from|elif|else|with|pass|exec|and|del|not|def|for|try|as|or|if|input|in|is|range|true|false\b)|(>>=|<<=|\*\*=|\/\/=|\+=|-=|\*=|\/=|%=|&=|\|=|\^=|\*\*|\/\/|<<|>>|<=|>=|==|!=|<>|\+|-|\*|\/|%|&|\||\^|~|<|>|\(|\)|\[|\]|\{|\}|@|,|:|\.|`|=|;|'|\|\|")))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:("(([^\\\n\"])|(\\.))*"))/,/^(?:('(([^\\\n\'])|(\\.))*'))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:\t)/,/^(?: )/,/^(?:(\r?\n)+)/,/^(?:.)/,/^(?:.)/,/^(?:[\ \n\t\s\r]+)/,/^(?:%%PROGRAMA\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:(public|private|class|extends|intinput|floatinput|charinput|int|String|char|float|boolean|true|false|else|while|for|do|break|continue|return|\(|\)|\{|\}|,|:|;|,|void|case|switch|default|println|print\b))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:("(([^\\\n\"])|(\\.))*"))/,/^(?:('(([^\\\n\'])|(\\.))*'))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:[\ \n\t\s\r]+)/,/^(?:#include\b)/,/^(?:"PY")/,/^(?:"PY\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)")/,/^(?:"JAVA\.\*")/,/^(?:"JAVA\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)")/,/^(?:"JAVA\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)\.\*")/,/^(?:"JAVA\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)")/,/^(?:main\b)/,/^(?:void\b)/,/^(?:\()/,/^(?:=)/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/\*)/,/^(?:\/\/)/,/^(?:[\n])/,/^(?:[^\n]+)/,/^(?:\*\/)/,/^(?:[^'*/']+)/,/^(?:\/)/,/^(?:%)/,/^(?:const\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:scanf\b)/,/^(?:scanf\b)/,/^(?:clrscr\b)/,/^(?:getch\b)/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:'.')/,/^(?:&((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:;)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,120],"inclusive":true},"PYTHON":{"rules":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,120],"inclusive":true},"DEDENT":{"rules":[41,120],"inclusive":true},"INDENT":{"rules":[37,38,39,40,120],"inclusive":true},"JAVA":{"rules":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,120],"inclusive":true},"PROGRAMA":{"rules":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],"inclusive":true},"COMENTARIO":{"rules":[93,94,120],"inclusive":true},"BLOQUE_COMENTARIO":{"rules":[95,96,120],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador2;
exports.Parser = analizador2.Parser;
exports.parse = function () { return analizador2.parse.apply(analizador2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}