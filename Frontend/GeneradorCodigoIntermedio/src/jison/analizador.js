/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,7],$V1=[1,7],$V2=[4,7,96],$V3=[1,15],$V4=[4,11],$V5=[1,35],$V6=[1,36],$V7=[11,17,30],$V8=[1,42],$V9=[1,43],$Va=[1,44],$Vb=[1,45],$Vc=[1,46],$Vd=[29,72,75,76,77,78],$Ve=[2,65],$Vf=[27,48],$Vg=[1,88],$Vh=[2,62],$Vi=[1,79],$Vj=[1,80],$Vk=[1,81],$Vl=[1,90],$Vm=[1,91],$Vn=[1,89],$Vo=[1,83],$Vp=[1,85],$Vq=[1,86],$Vr=[1,87],$Vs=[13,17,40,41,42,45,47,49,53,56,65,67,70,71,72,75,76,77,78],$Vt=[1,102],$Vu=[1,101],$Vv=[1,103],$Vw=[1,104],$Vx=[1,105],$Vy=[1,99],$Vz=[1,100],$VA=[1,121],$VB=[1,122],$VC=[1,123],$VD=[1,124],$VE=[1,125],$VF=[1,126],$VG=[1,127],$VH=[1,128],$VI=[1,129],$VJ=[1,130],$VK=[1,131],$VL=[1,132],$VM=[1,133],$VN=[24,27,48,80,81,82,83,84,85,86,88,89,90,91,92,93],$VO=[1,180],$VP=[24,27,48,80,84],$VQ=[24,27,48,80,81,82,84],$VR=[1,199],$VS=[17,53,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"EOF":4,"PYTHON":5,"codigo_python":6,"JAVA":7,"codigo_java":8,"clases":9,"clase":10,"public":11,"class":12,"IDENTIFICADOR":13,"herencia":14,"{":15,"body_class":16,"}":17,"parte_java":18,"declaracion_global_java":19,"metodo_java":20,"constructorl":21,"modificador_java":22,"tipo_java":23,";":24,"(":25,"lista_parametros_java":26,")":27,"listado_java":28,"void":29,"private":30,"sentencias_java":31,"sentencia_java":32,"if_java":33,"declaracion_java":34,"for_java":35,"while_java":36,"do_while_java":37,"asignacion_java":38,"switch_java":39,"continue":40,"break":41,"return":42,"expr":43,"imprimir_java":44,"print":45,"lista_imprimir_java":46,"println":47,",":48,"switch":49,"casos_java":50,"default_java":51,"caso_java":52,"case":53,"valor_java":54,":":55,"default":56,"declaracion_cola_java":57,"ASIGNAR":58,"MAS_ASIGNAR":59,"MAS":60,"MENOS":61,"INT":62,"STRING":63,"FLOAT":64,"IF":65,"ELSE":66,"for":67,"declaracion_for":68,"accion_posterior_java":69,"while":70,"do":71,"int":72,"parametros_java":73,"parametro_java":74,"String":75,"float":76,"char":77,"boolean":78,"extends":79,"SUMA":80,"POR":81,"ENTRE":82,"POT":83,"RESTA":84,"AND":85,"OR":86,"NOT":87,"IGUAL_IGUAL":88,"DIFERENTE":89,"MAYOR":90,"MAYOR_IGUAL":91,"MENOR":92,"MENOR_IGUAL":93,"funciones":94,"funcion":95,"def":96,"SALTO":97,"INDENT":98,"bloque":99,"asignar":100,"if_python":101,"=":102,"valor":103,"DEDENT":104,"if_python_cola":105,"else":106,"elif_python":107,"elif":108,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",5:"PYTHON",7:"JAVA",11:"public",12:"class",13:"IDENTIFICADOR",15:"{",17:"}",24:";",25:"(",27:")",29:"void",30:"private",40:"continue",41:"break",42:"return",45:"print",47:"println",48:",",49:"switch",53:"case",55:":",56:"default",58:"ASIGNAR",59:"MAS_ASIGNAR",60:"MAS",61:"MENOS",62:"INT",63:"STRING",64:"FLOAT",65:"IF",66:"ELSE",67:"for",70:"while",71:"do",72:"int",75:"String",76:"float",77:"char",78:"boolean",79:"extends",80:"SUMA",81:"POR",82:"ENTRE",83:"POT",84:"RESTA",85:"AND",86:"OR",87:"NOT",88:"IGUAL_IGUAL",89:"DIFERENTE",90:"MAYOR",91:"MAYOR_IGUAL",92:"MENOR",93:"MENOR_IGUAL",96:"def",97:"SALTO",98:"INDENT",102:"=",104:"DEDENT",106:"else",108:"elif"},
productions_: [0,[3,1],[3,5],[3,3],[8,0],[8,1],[9,2],[9,1],[10,7],[16,2],[16,1],[18,1],[18,1],[18,1],[19,4],[20,9],[20,9],[22,1],[22,1],[31,2],[31,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[32,2],[32,3],[32,1],[44,5],[44,5],[46,3],[46,1],[39,8],[50,2],[50,1],[52,4],[51,0],[51,3],[34,4],[38,4],[38,4],[38,3],[38,3],[57,0],[57,2],[54,1],[54,1],[54,1],[33,7],[33,11],[33,9],[35,11],[36,7],[37,9],[68,4],[68,3],[69,2],[69,2],[28,0],[28,1],[21,8],[26,0],[26,1],[73,3],[73,1],[74,2],[23,1],[23,1],[23,1],[23,1],[23,1],[14,0],[14,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,1],[43,1],[43,1],[43,1],[43,3],[6,0],[6,1],[94,2],[94,1],[95,8],[99,1],[99,1],[100,4],[103,1],[103,1],[103,1],[101,7],[101,8],[105,6],[105,7],[105,1],[107,7],[107,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Vacio");
break;
case 2:
console.log("Un conjunto de funciones")
break;
case 3:
console.log("Un conjunto de funciones2")
break;
case 30:
console.log("Retorna "+$$[$0-1]);
break;
case 31:
console.log("Imprime");
break;
case 43:
console.log("Asignacion normal");
break;
case 44:
console.log("Asignacion incremencial");
break;
case 45:
console.log("Asignacion ++");
break;
case 46:
console.log("Asignacion --");
break;
case 52:
console.log("encuentra if");
break;
case 53:
console.log("encuentra if-else");
break;
case 54:
console.log("encuentra if-elseif");
break;
case 100:
console.log("otra funcion");
break;
case 101:
console.log("una funcion"); 
break;
case 109:
 this.$ = 'if(' + $$[$0-5] + '){' + $$[$0-3] + '}\n' 
break;
case 110:
 this.$ = 'if(' + $$[$0-6] + '){' + $$[$0-4] + '}' + $$[$0-3] 
break;
case 111:
 this.$ = 'else{' + $$[$0-3] + '}' 
break;
case 112:
 this.$ = $$[$0-6] + 'else{' + $$[$0-3] + '}' 
break;
case 114:
 this.$ = 'else if(' + $$[$0-5] + '){' + $$[$0-3] + '}' 
break;
case 115:
 this.$ = 'else if(' + $$[$0-6] + '){' + $$[$0-4] + '}' + $$[$0-3] 
break;
}
},
table: [{3:1,4:[1,2],5:[1,3]},{1:[3]},{1:[2,1]},o($V0,[2,98],{6:4,94:5,95:6,96:$V1}),{4:[1,9],7:[1,8]},o($V0,[2,99],{95:10,96:$V1}),o($V2,[2,101]),{13:[1,11]},{4:[2,4],8:12,9:13,10:14,11:$V3},{1:[2,3]},o($V2,[2,100]),{25:[1,16]},{4:[1,17]},{4:[2,5],10:18,11:$V3},o($V4,[2,7]),{12:[1,19]},{27:[1,20]},{1:[2,2]},o($V4,[2,6]),{13:[1,21]},{55:[1,22]},{14:23,15:[2,75],79:[1,24]},{97:[1,25]},{15:[1,26]},{13:[1,27]},{98:[1,28]},{11:$V5,16:29,18:30,19:31,20:32,21:33,22:34,30:$V6},{15:[2,76]},{67:[1,37]},{11:$V5,17:[1,38],18:39,19:31,20:32,21:33,22:34,30:$V6},o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),o($V7,[2,13]),{23:40,29:[1,41],72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},o($Vd,[2,17],{13:[1,47]}),o($Vd,[2,18]),o($V2,[2,102]),o($V4,[2,8]),o($V7,[2,9]),{13:[1,48]},{13:[1,49]},{13:[2,70]},{13:[2,71]},{13:[2,72]},{13:[2,73]},{13:[2,74]},{25:[1,50]},{24:[1,51],25:[1,52]},{25:[1,53]},{23:57,26:54,27:$Ve,72:$V8,73:55,74:56,75:$V9,76:$Va,77:$Vb,78:$Vc},o($V7,[2,14]),{23:57,26:58,27:$Ve,72:$V8,73:55,74:56,75:$V9,76:$Va,77:$Vb,78:$Vc},{23:57,26:59,27:$Ve,72:$V8,73:55,74:56,75:$V9,76:$Va,77:$Vb,78:$Vc},{27:[1,60]},{27:[2,66],48:[1,61]},o($Vf,[2,68]),{13:[1,62]},{27:[1,63]},{27:[1,64]},{15:[1,65]},{23:57,72:$V8,74:66,75:$V9,76:$Va,77:$Vb,78:$Vc},o($Vf,[2,69]),{15:[1,67]},{15:[1,68]},{13:$Vg,17:$Vh,23:84,28:69,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},o($Vf,[2,67]),{13:$Vg,17:$Vh,23:84,28:92,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{13:$Vg,17:$Vh,23:84,28:93,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{17:[1,94]},{13:$Vg,17:[2,63],23:84,32:95,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},o($Vs,[2,20]),o($Vs,[2,21]),o($Vs,[2,22]),o($Vs,[2,23]),o($Vs,[2,24]),o($Vs,[2,25]),o($Vs,[2,26]),o($Vs,[2,27]),{24:[1,96]},{24:[1,97]},{13:$Vt,25:$Vu,43:98,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},o($Vs,[2,31]),{25:[1,106]},{13:[1,107]},{25:[1,108]},{25:[1,109]},{15:[1,110]},{58:[1,111],59:[1,112],60:[1,113],61:[1,114]},{25:[1,115]},{25:[1,116]},{25:[1,117]},{17:[1,118]},{17:[1,119]},o($V7,[2,64]),o($Vs,[2,19]),o($Vs,[2,28]),o($Vs,[2,29]),{24:[1,120],80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{13:$Vt,25:$Vu,43:134,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:135,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:136,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},o($VN,[2,93],{25:[1,137]}),o($VN,[2,94]),o($VN,[2,95]),o($VN,[2,96]),{13:$Vt,25:$Vu,43:138,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{24:[2,47],57:139,58:[1,140]},{13:[1,143],68:141,72:[1,142]},{13:$Vt,25:$Vu,43:144,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vg,17:$Vh,23:84,28:145,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{13:$Vt,25:$Vu,43:146,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:147,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{24:[1,148]},{24:[1,149]},{13:[1,150]},{13:$Vt,25:$Vu,43:152,46:151,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:152,46:153,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},o($V7,[2,15]),o($V7,[2,16]),o($Vs,[2,30]),{13:$Vt,25:$Vu,43:154,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:155,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:156,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:157,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:158,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:159,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:160,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:161,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:162,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:163,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:164,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{13:$Vt,25:$Vu,43:165,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},o($VN,[2,91]),o($VN,[2,82]),o($VN,[2,85]),{27:[1,166],80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{27:[1,167]},{27:[1,168],80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{24:[1,169]},{13:$Vt,25:$Vu,43:170,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{24:[1,171]},{13:[1,172]},{58:[1,173]},{27:[1,174],80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{17:[1,175]},{24:[1,176],80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{24:[1,177],80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},o($Vs,[2,45]),o($Vs,[2,46]),{27:[1,178]},{27:[1,179],48:$VO},o($Vf,[2,35],{80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),{27:[1,181],48:$VO},o($VP,[2,77],{81:$VB,82:$VC,83:$VD,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VQ,[2,78],{83:$VD,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VQ,[2,79],{83:$VD,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o([24,27,48,80,81,82,83,84],[2,80],{85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VP,[2,81],{81:$VB,82:$VC,83:$VD,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o([24,27,48,80,81,82,83,84,85,86],[2,83],{88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o([24,27,48,80,81,82,83,84,86],[2,84],{85:$VF,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VN,[2,86]),o($VN,[2,87]),o($VN,[2,88]),o($VN,[2,89]),o($VN,[2,90]),o($VN,[2,92]),o($VN,[2,97]),{15:[1,182]},o($Vs,[2,42]),{24:[2,48],80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{13:$Vt,25:$Vu,43:183,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{58:[1,184]},{62:[1,185]},{15:[1,186]},{70:[1,187]},o($Vs,[2,43]),o($Vs,[2,44]),{15:[1,188]},{24:[1,189]},{13:$Vt,25:$Vu,43:190,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{24:[1,191]},{13:$Vg,17:$Vh,23:84,28:192,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{24:[1,193],80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{62:[1,194]},{24:[2,59]},{13:$Vg,17:$Vh,23:84,28:195,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{25:[1,196]},{50:197,52:198,53:$VR},o($Vs,[2,32]),o($Vf,[2,34],{80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($Vs,[2,33]),{17:[1,200]},{13:[1,202],69:201},{24:[2,58]},{17:[1,203]},{13:$Vt,25:$Vu,43:204,62:$Vv,63:$Vw,64:$Vx,84:$Vy,87:$Vz},{17:[2,40],51:205,52:206,53:$VR,56:[1,207]},o($VS,[2,38]),{54:208,62:[1,209],63:[1,210],64:[1,211]},o($Vs,[2,52],{66:[1,212]}),{27:[1,213]},{60:[1,214],61:[1,215]},o($Vs,[2,56]),{27:[1,216],80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{17:[1,217]},o($VS,[2,37]),{55:[1,218]},{55:[1,219]},{55:[2,49]},{55:[2,50]},{55:[2,51]},{15:[1,220],33:221,65:$Vo},{15:[1,222]},{27:[2,60]},{27:[2,61]},{24:[1,223]},o($Vs,[2,36]),{13:$Vg,23:84,31:224,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{13:$Vg,23:84,31:225,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{13:$Vg,17:$Vh,23:84,28:226,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},o($Vs,[2,54]),{13:$Vg,17:$Vh,23:84,28:227,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},o($Vs,[2,57]),{13:$Vg,17:[2,41],23:84,32:95,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:$Vi,41:$Vj,42:$Vk,44:82,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},o($VS,[2,39],{33:72,34:73,35:74,36:75,37:76,38:77,39:78,44:82,23:84,32:95,13:$Vg,40:$Vi,41:$Vj,42:$Vk,45:$Vl,47:$Vm,49:$Vn,65:$Vo,67:$Vp,70:$Vq,71:$Vr,72:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc}),{17:[1,228]},{17:[1,229]},o($Vs,[2,53]),o($Vs,[2,55])],
defaultActions: {2:[2,1],9:[2,3],17:[2,2],27:[2,76],42:[2,70],43:[2,71],44:[2,72],45:[2,73],46:[2,74],185:[2,59],194:[2,58],209:[2,49],210:[2,50],211:[2,51],214:[2,60],215:[2,61]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
 var indents = [0], indent = 0, indent_actual = 0, dedents = 0, val_actual = "" /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: console.log("eninicio"); 
break;
case 1: console.log("tabulacion"); 
break;
case 2: this.begin("PYTHON2"); return 5; 
break;
case 3: indent += 1 
break;
case 4: indent += 1; console.log("encuentra tabulacion 2"); 
break;
case 5: indent = 0 // blank line 
break;
case 6: indent = 0 // blank line 
break;
case 7: 
                                            this.unput( yy_.yytext );
                                            var last = indents[ indents.length - 1 ]
                                            if ( indent > last ) {
                                                this.begin( 'INLINE' )
                                                indents.push( indent );
                                                return 98;
                                            } else if ( indent < last ) {
                                                this.begin( 'DEDENTS' );
                                                dedents = 0 // how many dedents occured
                                                while( last = indents.pop() ) {
                                                    if ( last == indent ) break
                                                    dedents += 1;
                                                }
                                            } else {
                                                this.begin( 'INLINE' );
                                            }
                                        
break;
case 8:
                                            this.unput( yy_.yytext )
                                            if ( dedents-- > 0 ) {
                                                dedents -= 1
                                                return 104
                                                
                                            } else {
                                                this.begin( 'INLINE' )
                                            }
                                        
break;
case 9: 
                                            indent = 0; 
                                            this.begin( 'PYTHON2' )
                                            return 97 
                                        
break;
case 10:/* skip whitespace, separate tokens */
break;
case 11: console.log("Estoy en el estado inline"); return yy_.yytext 
break;
case 12:return 64
break;
case 13:return 62
break;
case 14:return 63
break;
case 15:return 13
break;
case 16:return 4
break;
case 17: /*nada*/ 
break;
case 18: return 65; 
break;
case 19: return 66; 
break;
case 20: return 59; 
break;
case 21: return 60; 
break;
case 22: return 61; 
break;
case 23: return 80; 
break;
case 24: return 84; 
break;
case 25: return 81; 
break;
case 26: return 82; 
break;
case 27: return 83; 
break;
case 28: return 85; 
break;
case 29: return 86; 
break;
case 30: return 87; 
break;
case 31: return 58; 
break;
case 32: return 88; 
break;
case 33: return 89; 
break;
case 34: return 90; 
break;
case 35: return 91; 
break;
case 36: return 92; 
break;
case 37: return 93; 
break;
case 38: return yy_.yytext; 
break;
case 39: return 64; 
break;
case 40: return 62; 
break;
case 41: return 63; 
break;
case 42: return 13; 
break;
case 43: return 4; 
break;
}
},
rules: [/^(?:[\ \n]+)/,/^(?:[\t])/,/^(?:(%%PYTHON\b))/,/^(?: )/,/^(?:\t)/,/^(?:(\r?\n)+)/,/^(?:\n)/,/^(?:.)/,/^(?:.)/,/^(?:(\r?\n)+)/,/^(?:[\ \t\f]+)/,/^(?:((continue|finally|return|global|assert|except|import|lambda|raise|class|print|break|while|yield|from|elif|else|with|pass|exec|and|del|not|def|for|try|as|or|if|in|is\b)|(>>=|<<=|\*\*=|\/\/=|\+=|-=|\*=|\/=|%=|&=|\|=|\^=|\*\*|\/\/|<<|>>|<=|>=|==|!=|<>|\+|-|\*|\/|%|&|\||\^|~|<|>|\(|\)|\[|\]|\{|\}|@|,|:|\.|`|=|;|'|\|\|")))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:(("(([^\\\n\"])|(\\.))*")|('(([^\\\n\'])|(\\.))*')))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:$)/,/^(?:[\ \n\t\s\r]+)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:(public|private|class|extends|int|String|char|float|boolean|true|false|else|while|for|do|break|continue|return|\(|\)|\{|\}|,|:|;|,|void|case|switch|default|println|print\b))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:(("(([^\\\n\"])|(\\.))*")|('(([^\\\n\'])|(\\.))*')))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,43],"inclusive":true},"PYTHON2":{"rules":[3,4,5,6,7,43],"inclusive":true},"INLINE":{"rules":[9,10,11,12,13,14,15,16,43],"inclusive":true},"JAVA":{"rules":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true},"DEDENTS":{"rules":[8,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}