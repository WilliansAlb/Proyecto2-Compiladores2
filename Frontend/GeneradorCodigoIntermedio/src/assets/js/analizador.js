/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,13],$V2=[1,18],$V3=[2,9,186],$V4=[11,109],$V5=[31,32,33,34,39],$V6=[1,29],$V7=[32,33,34,39],$V8=[1,37],$V9=[1,56],$Va=[1,57],$Vb=[1,58],$Vc=[31,32,33,34,39,99],$Vd=[1,79],$Ve=[1,80],$Vf=[1,86],$Vg=[109,114,128],$Vh=[1,92],$Vi=[1,93],$Vj=[1,94],$Vk=[1,95],$Vl=[1,96],$Vm=[127,169,172,173,174,175],$Vn=[1,105],$Vo=[1,106],$Vp=[1,107],$Vq=[1,108],$Vr=[1,102],$Vs=[1,101],$Vt=[1,103],$Vu=[1,122],$Vv=[1,123],$Vw=[1,124],$Vx=[1,126],$Vy=[1,127],$Vz=[1,125],$VA=[1,128],$VB=[1,131],$VC=[1,132],$VD=[1,133],$VE=[1,134],$VF=[1,135],$VG=[1,136],$VH=[1,137],$VI=[1,138],$VJ=[1,139],$VK=[1,140],$VL=[1,141],$VM=[26,29,42,68,69,70,71,72,73,74,75,76,77,78],$VN=[26,29,42,68,69,70,71,72,73,74,75,76,77,78,85],$VO=[2,166],$VP=[2,23,89,143,145,164,167,190],$VQ=[1,163],$VR=[1,164],$VS=[1,167],$VT=[1,166],$VU=[1,160],$VV=[1,161],$VW=[1,162],$VX=[1,165],$VY=[1,168],$VZ=[1,169],$V_=[24,26],$V$=[125,146],$V01=[1,197],$V11=[1,198],$V21=[1,199],$V31=[1,201],$V41=[1,202],$V51=[1,207],$V61=[1,209],$V71=[1,205],$V81=[1,203],$V91=[1,204],$Va1=[1,200],$Vb1=[1,206],$Vc1=[1,208],$Vd1=[1,210],$Ve1=[68,69,70,71,72,73,74,75,77,78,125,146,153,177,178,179,180,183],$Vf1=[1,231],$Vg1=[1,237],$Vh1=[2,27],$Vi1=[1,226],$Vj1=[1,227],$Vk1=[1,228],$Vl1=[1,229],$Vm1=[1,230],$Vn1=[1,243],$Vo1=[1,242],$Vp1=[1,241],$Vq1=[1,239],$Vr1=[1,240],$Vs1=[26,29,42,68,72],$Vt1=[26,29,42,68,69,70,71,72],$Vu1=[1,268],$Vv1=[45,84,86],$Vw1=[2,23,32,33,34,45,57,58,59,60,61,80,84,86,87,88,89,91],$Vx1=[1,304],$Vy1=[1,310],$Vz1=[1,305],$VA1=[2,163],$VB1=[1,300],$VC1=[1,301],$VD1=[1,302],$VE1=[1,312],$VF1=[1,313],$VG1=[1,311],$VH1=[1,307],$VI1=[1,308],$VJ1=[1,309],$VK1=[68,72,125,146,153,183],$VL1=[68,69,70,71,72,125,146,153,183],$VM1=[2,23,89,114,138,139,140,143,145,147,151,154,164,167,168,169,172,173,174,175],$VN1=[1,348],$VO1=[1,349],$VP1=[1,352],$VQ1=[1,351],$VR1=[1,345],$VS1=[1,346],$VT1=[1,347],$VU1=[1,350],$VV1=[1,353],$VW1=[1,354],$VX1=[1,389],$VY1=[1,390],$VZ1=[1,391],$V_1=[1,393],$V$1=[1,394],$V02=[1,399],$V12=[1,401],$V22=[1,397],$V32=[1,395],$V42=[1,396],$V52=[1,392],$V62=[1,398],$V72=[1,400],$V82=[1,402],$V92=[68,69,70,71,72,73,74,75,77,78,122,125,146,177,178,179,180],$Va2=[1,417],$Vb2=[1,418],$Vc2=[1,419],$Vd2=[1,470],$Ve2=[1,475],$Vf2=[1,485],$Vg2=[68,72,122,125,146],$Vh2=[68,69,70,71,72,122,125,146],$Vi2=[1,521],$Vj2=[114,151,154],$Vk2=[2,23,89,90,143,145,164,167,190];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"EOF":4,"PAQUETE":5,"URL":6,"PYTHON":7,"codigo_python":8,"JAVA":9,"codigo_java":10,"PROGRAMA":11,"includes":12,"constantes":13,"globales":14,"main":15,"lista_constantes":16,"constante":17,"lista_constantesp":18,"lista_globales":19,"var_global":20,"lista_globalesp":21,"tipos_datos":22,"IDENTIFICADOR":23,"IGUAL":24,"expresion_c":25,"PUNTOC":26,"dimensiones":27,"COR_A":28,"COR_C":29,"dimensionesp":30,"CONSTANTE":31,"INT":32,"CHAR":33,"FLOAT":34,"dato":35,"INTV":36,"CHARV":37,"FLOATV":38,"VOID":39,"MAIN":40,"PAR_A":41,"PAR_C":42,"LLAVE_A":43,"lista_sentencias_c":44,"LLAVE_C":45,"sentencias_c":46,"sentencia_c":47,"una_linea_c":48,"bloque_c":49,"if_c":50,"for_c":51,"while_c":52,"do_while_c":53,"switch_c":54,"asignacion_c":55,"declaracion_c":56,"BREAK":57,"CONTINUE":58,"CLEAR":59,"GETCH":60,"SCANF":61,"tipos_scan_c":62,"COMA":63,"IDENTIFICADORREF":64,"SCANINT":65,"SCANCHAR":66,"SCANFLOAT":67,"SUMA":68,"POR":69,"ENTRE":70,"MOD":71,"RESTA":72,"MAYOR":73,"MENOR":74,"IGUAL_IGUAL":75,"DIFF":76,"AND":77,"OR":78,"NOT":79,"SWITCH":80,"lista_casos_c":81,"default_c":82,"caso_c":83,"CASE":84,"DOS_P":85,"DEFAULT":86,"DO":87,"WHILE":88,"IF":89,"ELSE":90,"FOR":91,"declaracion_for_c":92,"inc_dec_c":93,"MAS":94,"MENOS":95,"lista_includes":96,"include":97,"lista_includesp":98,"INCLUDE":99,"tipos_include":100,"TODOPY":101,"ESPY":102,"TODOJAVA":103,"JAVAARCHIVO":104,"JAVACLASE":105,"JAVACLASES":106,"clases":107,"clase":108,"public":109,"class":110,"herencia":111,"{":112,"body_classp":113,"}":114,"body_class":115,"parte_java":116,"declaracion_global_java":117,"metodo_java":118,"constructorl":119,"modificador_java":120,"tipo_java":121,";":122,"(":123,"lista_parametros_java":124,")":125,"listado_java":126,"void":127,"private":128,"sentencias_java":129,"sentencia_java":130,"if_java":131,"declaracion_java":132,"for_java":133,"while_java":134,"do_while_java":135,"asignacion_java":136,"switch_java":137,"continue":138,"break":139,"return":140,"expresion_java":141,"imprimir_java":142,"print":143,"lista_imprimir_java":144,"println":145,",":146,"switch":147,"casos_java":148,"default_java":149,"caso_java":150,"case":151,"valor":152,":":153,"default":154,"declaracion_cola_java":155,"ASIGNAR":156,"tipo_input_java":157,"MAS_ASIGNAR":158,"intinput":159,"floatinput":160,"charinput":161,"valor_java":162,"STRING":163,"for":164,"declaracion_for":165,"accion_posterior_java":166,"while":167,"do":168,"int":169,"parametros_java":170,"parametro_java":171,"String":172,"float":173,"char":174,"boolean":175,"extends":176,"POT":177,"DIFERENTE":178,"MAYOR_IGUAL":179,"MENOR_IGUAL":180,"true":181,"false":182,"SALTO":183,"funciones_python":184,"funcion_python":185,"def":186,"lista_parametros_python":187,"INDENT":188,"sentencias_python":189,"DEDENT":190,"parametros_python":191,"parametros_pythonp":192,"sentencia_python":193,"sentencias_pythonp":194,"asignacion_python":195,"if_python":196,"for_python":197,"print_python":198,"while_python":199,"lista_imprimir_python":200,"expresion_python":201,"input":202,"in":203,"range":204,"if_python_cola":205,"elif_python":206,"ELIF":207,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",5:"PAQUETE",6:"URL",7:"PYTHON",9:"JAVA",11:"PROGRAMA",23:"IDENTIFICADOR",24:"IGUAL",26:"PUNTOC",28:"COR_A",29:"COR_C",31:"CONSTANTE",32:"INT",33:"CHAR",34:"FLOAT",36:"INTV",37:"CHARV",38:"FLOATV",39:"VOID",40:"MAIN",41:"PAR_A",42:"PAR_C",43:"LLAVE_A",45:"LLAVE_C",57:"BREAK",58:"CONTINUE",59:"CLEAR",60:"GETCH",61:"SCANF",63:"COMA",64:"IDENTIFICADORREF",65:"SCANINT",66:"SCANCHAR",67:"SCANFLOAT",68:"SUMA",69:"POR",70:"ENTRE",71:"MOD",72:"RESTA",73:"MAYOR",74:"MENOR",75:"IGUAL_IGUAL",76:"DIFF",77:"AND",78:"OR",79:"NOT",80:"SWITCH",84:"CASE",85:"DOS_P",86:"DEFAULT",87:"DO",88:"WHILE",89:"IF",90:"ELSE",91:"FOR",94:"MAS",95:"MENOS",99:"INCLUDE",101:"TODOPY",102:"ESPY",103:"TODOJAVA",104:"JAVAARCHIVO",105:"JAVACLASE",106:"JAVACLASES",109:"public",110:"class",112:"{",114:"}",122:";",123:"(",125:")",127:"void",128:"private",138:"continue",139:"break",140:"return",143:"print",145:"println",146:",",147:"switch",151:"case",153:":",154:"default",156:"ASIGNAR",158:"MAS_ASIGNAR",159:"intinput",160:"floatinput",161:"charinput",163:"STRING",164:"for",167:"while",168:"do",169:"int",172:"String",173:"float",174:"char",175:"boolean",176:"extends",177:"POT",178:"DIFERENTE",179:"MAYOR_IGUAL",180:"MENOR_IGUAL",181:"true",182:"false",183:"SALTO",186:"def",188:"INDENT",190:"DEDENT",202:"input",203:"in",204:"range",207:"ELIF"},
productions_: [0,[3,1],[3,12],[3,2],[13,0],[13,1],[16,2],[18,0],[18,1],[14,0],[14,1],[19,2],[21,0],[21,1],[20,5],[20,4],[27,4],[30,0],[30,1],[17,6],[22,1],[22,1],[22,1],[35,1],[35,1],[35,1],[15,7],[44,0],[44,1],[46,2],[46,1],[47,1],[47,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,2],[48,1],[48,1],[48,2],[48,2],[48,4],[48,4],[48,7],[48,2],[62,1],[62,1],[62,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[25,1],[54,8],[81,2],[81,1],[83,4],[82,0],[82,3],[53,9],[50,7],[50,11],[51,11],[52,7],[93,2],[93,2],[92,4],[92,3],[56,5],[56,4],[55,4],[55,5],[12,0],[12,1],[96,2],[98,0],[98,1],[97,2],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[10,0],[10,1],[107,2],[107,1],[108,7],[113,0],[113,1],[115,2],[115,1],[116,1],[116,1],[116,1],[117,4],[118,9],[118,9],[120,1],[120,1],[129,2],[129,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,2],[130,2],[130,3],[130,1],[130,2],[142,5],[142,5],[144,3],[144,1],[137,8],[148,2],[148,1],[150,4],[149,0],[149,3],[132,4],[132,7],[136,4],[136,4],[136,3],[136,3],[136,6],[157,1],[157,1],[157,1],[155,0],[155,2],[162,1],[162,1],[162,1],[131,7],[131,11],[131,9],[133,11],[134,7],[135,9],[165,4],[165,3],[166,2],[166,2],[126,0],[126,1],[119,8],[124,0],[124,1],[170,3],[170,1],[171,2],[121,1],[121,1],[121,1],[121,1],[121,1],[111,0],[111,2],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,2],[141,3],[141,3],[141,2],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,1],[141,1],[141,1],[141,1],[141,1],[141,3],[141,1],[141,1],[8,0],[8,1],[8,2],[184,2],[184,1],[185,10],[185,2],[187,0],[187,1],[191,2],[192,0],[192,2],[189,2],[194,0],[194,1],[193,1],[193,1],[193,1],[193,1],[193,1],[193,2],[198,5],[198,5],[200,3],[200,1],[195,4],[195,6],[152,1],[152,1],[152,1],[152,1],[197,11],[199,7],[196,7],[196,8],[205,6],[205,7],[205,1],[206,7],[206,8],[201,3],[201,3],[201,3],[201,3],[201,3],[201,3],[201,2],[201,3],[201,3],[201,2],[201,3],[201,3],[201,3],[201,3],[201,3],[201,3],[201,3],[201,1],[201,1],[201,1],[201,1],[201,1],[201,1],[201,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Vacio");
break;
case 2: case 3:

            var obj = new Object();
            obj.errores = errores;
            obj.codigo3D = yy.codigo3D;
            obj.conteo = conteo_errores;
            return obj;
        
break;
case 23:

            var obj = new Object();
            obj.valor = parseInt($$[$0]);
            obj.respuesta = parseInt($$[$0]);
            obj.tipo = "int";
            this.$ = obj;
        
break;
case 24:

            var obj = new Object();
            obj.valor = $$[$0].charCodeAt(1);
            obj.respuesta = $$[$0];
            obj.tipo = "int";
            this.$ = obj;
        
break;
case 25:

            var obj = new Object();
            obj.valor = parseFloat($$[$0]);
            obj.respuesta = parseFloat($$[$0]);
            obj.tipo = "float";
            this.$ = obj;
        
break;
case 45:
 console.log($$[$0-4]); 
break;
case 47:

            console.log("scan int");
        
break;
case 48:

            console.log("scan char");
        
break;
case 49:

            console.log("scan float");
        
break;
case 50:
 
            var numero1 = soloNumeros($$[$0-2]);
            var numero2 = soloNumeros($$[$0]);
            var tipo1 = (numero1.tipo=="float" || numero2.tipo=="float")?"float":"int";
            var obj = new Object();
            obj.valor = numero1.valor+numero2.valor;
            obj.tipo = tipo1;
            yy.etiquetas++;
            var etiqueta = "t"+yy.etiquetas;
            var respuesta = tipo1+" "+etiqueta+" = "+numero1.etiqueta+" + "+numero2.etiqueta+"\n";
            obj.respuesta = respuesta;
            yy.codigo3D += respuesta;
            obj.etiqueta = etiqueta;
            this.$ = obj;
            console.log(obj);
            console.log(yy.codigo3D);
        
break;
case 64:
 this.$ = $$[$0]; this.$.etiqueta = this.$.valor; 
break;
case 65: case 261: case 262: case 263: case 264:
 this.$ = $$[$0]; 
break;
case 102:
console.log("clase sin cuerpo");
break;
case 125:
console.log("Retorna "+$$[$0-1]);
break;
case 126:
console.log("Imprime");
break;
case 140:
console.log("Asignacion normal"); var asig = new yy.asignacion_java($$[$0-3],$$[$0-1],"normal",0,0); asig.ejecutar(); 
break;
case 141:
console.log("Asignacion incremencial");
break;
case 142:
console.log("Asignacion ++");
break;
case 143:
console.log("Asignacion --");
break;
case 153:
console.log("encuentra if");
break;
case 154:
console.log("encuentra if-else");
break;
case 155:
console.log("encuentra if-elseif");
break;
case 178:
 this.$ = new yy.expresion_java("+",$$[$0-2],$$[$0],null,0,0);
break;
case 179:
 this.$ = new yy.expresion_java("*",$$[$0-2],$$[$0],null,0,0);
break;
case 180:
 this.$ = new yy.expresion_java("/",$$[$0-2],$$[$0],null,0,0);
break;
case 181:
 this.$ = new yy.expresion_java("^",$$[$0-2],$$[$0],null,0,0);
break;
case 182:
 this.$ = new yy.expresion_java("%",$$[$0-2],$$[$0],null,0,0);
break;
case 183:
 this.$ = new yy.expresion_java("-",$$[$0-2],$$[$0],null,0,0);
break;
case 194: case 259:
 this.$ = $$[$0-1]; 
break;
case 195:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"identificador",0,0),0,0);
break;
case 196:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"int",0,0),0,0);
break;
case 197:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"string",0,0),0,0);
break;
case 198:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"float",0,0),0,0);
break;
case 199:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"char",0,0),0,0);
break;
case 201:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"boolean",0,0),0,0);
break;
case 202:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"false",0,0),0,0);
break;
case 206:
console.log("otra funcion");
break;
case 207:
console.log("una funcion"); 
break;
case 228:
console.log("una asignacion");
break;
case 229:
console.log("input");
break;
case 233:
console.log("Encuentra char");
break;
case 234:
console.log("Encontrado for");
break;
case 235:
console.log("Encuentra while");
break;
case 236:
 console.log("if"); 
break;
case 237:
 console.log("if-cola"); 
break;
case 238:
 console.log("if-else"); 
break;
case 239:
 console.log("if-elif-else"); 
break;
case 240:
 console.log("if-elif"); 
break;
case 241:
 console.log("elif"); 
break;
case 242:
 console.log("elif-elif"); 
break;
case 265:
 this.$ = true; 
break;
case 266:
 this.$ = false; 
break;
}
},
table: [{2:[1,4],3:1,4:[1,2],5:[1,3]},{1:[3]},{1:[2,1]},{6:[1,5]},{4:[1,6]},{7:[1,7]},{1:[2,3]},{8:8,9:[2,203],183:[1,9]},{9:[1,10]},{2:$V0,9:[2,204],184:11,185:12,186:$V1},{10:15,11:[2,97],107:16,108:17,109:$V2},{2:$V0,9:[2,205],185:19,186:$V1},o($V3,[2,207]),{23:[1,20]},{190:[1,21]},{11:[1,22]},{11:[2,98],108:23,109:$V2},o($V4,[2,100]),{110:[1,24]},o($V3,[2,206]),{123:[1,25]},o($V3,[2,209]),o($V5,[2,85],{12:26,96:27,97:28,99:$V6}),o($V4,[2,99]),{23:[1,30]},{23:[1,33],125:[2,210],187:31,191:32},o($V7,[2,4],{13:34,16:35,17:36,31:$V8}),o($V5,[2,86]),o($V5,[2,88],{97:28,98:38,96:39,99:$V6}),{100:40,101:[1,41],102:[1,42],103:[1,43],104:[1,44],105:[1,45],106:[1,46]},{111:47,112:[2,176],176:[1,48]},{125:[1,49]},{125:[2,211]},{125:[2,213],146:[1,51],192:50},{14:52,19:53,20:54,22:55,32:$V9,33:$Va,34:$Vb,39:[2,9]},o($V7,[2,5]),o($V7,[2,7],{17:36,18:59,16:60,31:$V8}),{22:61,32:$V9,33:$Va,34:$Vb},o($V5,[2,87]),o($V5,[2,89]),o($Vc,[2,90]),o($Vc,[2,91]),o($Vc,[2,92]),o($Vc,[2,93]),o($Vc,[2,94]),o($Vc,[2,95]),o($Vc,[2,96]),{112:[1,62]},{23:[1,63]},{153:[1,64]},{125:[2,212]},{23:[1,65]},{15:66,39:[1,67]},{39:[2,10]},{19:69,20:54,21:68,22:55,32:$V9,33:$Va,34:$Vb,39:[2,12]},{23:[1,70]},{23:[2,20]},{23:[2,21]},{23:[2,22]},o($V7,[2,6]),o($V7,[2,8]),{23:[1,71]},{109:$Vd,113:72,114:[2,102],115:73,116:74,117:75,118:76,119:77,120:78,128:$Ve},{112:[2,177]},{183:[1,81]},{125:[2,214]},{4:[1,82]},{40:[1,83]},{39:[2,11]},{39:[2,13]},{24:[1,84],27:85,28:$Vf},{24:[1,87]},{114:[1,88]},{109:$Vd,114:[2,103],116:89,117:75,118:76,119:77,120:78,128:$Ve},o($Vg,[2,105]),o($Vg,[2,106]),o($Vg,[2,107]),o($Vg,[2,108]),{121:90,127:[1,91],169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},o($Vm,[2,112],{23:[1,97]}),o($Vm,[2,113]),{188:[1,98]},{1:[2,2]},{41:[1,99]},{23:$Vn,25:100,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{26:[1,109]},{23:$Vn,25:110,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:111,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},o($V4,[2,101]),o($Vg,[2,104]),{23:[1,112]},{23:[1,113]},{23:[2,171]},{23:[2,172]},{23:[2,173]},{23:[2,174]},{23:[2,175]},{123:[1,114]},{2:$Vu,23:$Vv,89:$Vw,143:$Vx,145:$Vy,164:$Vz,167:$VA,189:115,193:116,195:117,196:118,197:119,198:120,199:121},{42:[1,129]},{26:[1,130],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{23:$Vn,25:142,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:143,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:144,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},o($VM,[2,64]),o($VM,[2,65]),o($VN,[2,23]),o($VN,[2,24]),o($VN,[2,25]),o($V7,[2,15]),{29:[1,145],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{26:[1,146],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{122:[1,147],123:[1,148]},{123:[1,149]},{121:153,124:150,125:$VO,169:$Vh,170:151,171:152,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{190:[1,154]},{2:$Vu,23:$Vv,89:$Vw,143:$Vx,145:$Vy,164:$Vz,167:$VA,189:156,190:[2,216],193:116,194:155,195:117,196:118,197:119,198:120,199:121},o($VP,[2,218]),o($VP,[2,219]),o($VP,[2,220]),o($VP,[2,221]),o($VP,[2,222]),{183:[1,157]},{156:[1,158]},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:159},{23:[1,170]},{123:[1,171]},{123:[1,172]},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:173},{43:[1,174]},o($V7,[2,14]),{23:$Vn,25:175,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:176,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:177,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:178,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:179,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:180,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:181,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:182,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:183,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:184,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:185,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},o($VM,[2,55]),{42:[1,186],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},o($VM,[2,63]),o($V_,[2,17],{30:187,27:188,28:$Vf}),o($V5,[2,19]),o($Vg,[2,109]),{121:153,124:189,125:$VO,169:$Vh,170:151,171:152,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{121:153,124:190,125:$VO,169:$Vh,170:151,171:152,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{125:[1,191]},{125:[2,167],146:[1,192]},o($V$,[2,169]),{23:[1,193]},o($V3,[2,208]),{190:[2,215]},{190:[2,217]},o($VP,[2,223]),{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:194,202:[1,195]},{68:$V01,69:$V11,70:$V21,71:$V31,72:$V41,73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,153:[1,196],177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:211},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:212},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:213},o($Ve1,[2,260]),o($Ve1,[2,261]),o($Ve1,[2,262]),o($Ve1,[2,263]),o($Ve1,[2,264]),o($Ve1,[2,265]),o($Ve1,[2,266]),{203:[1,214]},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,200:215,201:216},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,200:217,201:216},{68:$V01,69:$V11,70:$V21,71:$V31,72:$V41,73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,153:[1,218],177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1},{2:$Vf1,22:238,23:$Vg1,32:$V9,33:$Va,34:$Vb,44:219,45:$Vh1,46:220,47:221,48:222,49:223,50:232,51:233,52:234,53:235,54:236,55:224,56:225,57:$Vi1,58:$Vj1,59:$Vk1,60:$Vl1,61:$Vm1,80:$Vn1,87:$Vo1,88:$Vp1,89:$Vq1,91:$Vr1},o($Vs1,[2,50],{69:$VC,70:$VD,71:$VE,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($Vt1,[2,51],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($Vt1,[2,52],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($Vt1,[2,53],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($Vs1,[2,54],{69:$VC,70:$VD,71:$VE,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($VM,[2,56]),o($VM,[2,57]),o($VM,[2,58]),o($VM,[2,59]),o([26,29,42,68,69,70,71,72,77,78],[2,60],{73:$VG,74:$VH,75:$VI,76:$VJ}),o([26,29,42,68,69,70,71,72,78],[2,61],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK}),o($VM,[2,62]),o($V_,[2,16]),o($V_,[2,18]),{125:[1,244]},{125:[1,245]},{112:[1,246]},{121:153,169:$Vh,171:247,172:$Vi,173:$Vj,174:$Vk,175:$Vl},o($V$,[2,170]),{68:$V01,69:$V11,70:$V21,71:$V31,72:$V41,73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1,183:[1,248]},{123:[1,249]},{183:[1,250]},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:251},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:252},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:253},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:254},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:255},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:256},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:257},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:258},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:259},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:260},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:261},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:262},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:263},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:264},o($Ve1,[2,249]),o($Ve1,[2,252]),{68:$V01,69:$V11,70:$V21,71:$V31,72:$V41,73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,125:[1,265],177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1},{204:[1,266]},{125:[1,267],146:$Vu1},o($V$,[2,227],{68:$V01,69:$V11,70:$V21,71:$V31,72:$V41,73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1}),{125:[1,269],146:$Vu1},{183:[1,270]},{45:[1,271]},o($Vv1,[2,28],{48:222,49:223,55:224,56:225,50:232,51:233,52:234,53:235,54:236,22:238,47:272,2:$Vf1,23:$Vg1,32:$V9,33:$Va,34:$Vb,57:$Vi1,58:$Vj1,59:$Vk1,60:$Vl1,61:$Vm1,80:$Vn1,87:$Vo1,88:$Vp1,89:$Vq1,91:$Vr1}),o($Vw1,[2,30]),o($Vw1,[2,31]),o($Vw1,[2,32]),o($Vw1,[2,39]),o($Vw1,[2,40]),{26:[1,273]},{26:[1,274]},{41:[1,275]},{41:[1,276]},{41:[1,277]},{26:[1,278],45:[1,279]},o($Vw1,[2,33]),o($Vw1,[2,34]),o($Vw1,[2,35]),o($Vw1,[2,36]),o($Vw1,[2,37]),{24:[1,280],27:281,28:$Vf},{23:[1,282]},{41:[1,283]},{41:[1,284]},{41:[1,285]},{43:[1,286]},{41:[1,287]},{112:[1,288]},{112:[1,289]},{2:$Vx1,23:$Vy1,89:$Vz1,114:$VA1,121:306,126:290,129:291,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},o($V$,[2,168]),o($VP,[2,228]),{125:[1,314]},{188:[1,315]},o($VK1,[2,243],{69:$V11,70:$V21,71:$V31,73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1}),o($VL1,[2,244],{73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1}),o($VL1,[2,245],{73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1}),o([68,69,70,71,72,125,146,153,177,183],[2,246],{73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,178:$Vb1,179:$Vc1,180:$Vd1}),o($VL1,[2,247],{73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1}),o($VK1,[2,248],{69:$V11,70:$V21,71:$V31,73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1}),o([68,69,70,71,72,77,78,125,146,153,177,183],[2,250],{73:$V51,74:$V61,75:$V71,178:$Vb1,179:$Vc1,180:$Vd1}),o([68,69,70,71,72,78,125,146,153,177,183],[2,251],{73:$V51,74:$V61,75:$V71,77:$V81,178:$Vb1,179:$Vc1,180:$Vd1}),o($Ve1,[2,253]),o($Ve1,[2,254]),o($Ve1,[2,255]),o($Ve1,[2,256]),o($Ve1,[2,257]),o($Ve1,[2,258]),o($Ve1,[2,259]),{123:[1,316]},{183:[1,317]},{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:318},{183:[1,319]},{188:[1,320]},{4:[2,26]},o($Vw1,[2,29]),o($Vw1,[2,41]),o($Vw1,[2,42]),{42:[1,321]},{42:[1,322]},{62:323,65:[1,324],66:[1,325],67:[1,326]},o($Vw1,[2,46]),o($Vw1,[2,38]),{23:$Vn,25:327,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{24:[1,328]},{24:[1,329],27:330,28:$Vf},{23:$Vn,25:331,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:[1,334],32:[1,333],92:332},{23:$Vn,25:335,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{2:$Vf1,22:238,23:$Vg1,32:$V9,33:$Va,34:$Vb,44:336,45:$Vh1,46:220,47:221,48:222,49:223,50:232,51:233,52:234,53:235,54:236,55:224,56:225,57:$Vi1,58:$Vj1,59:$Vk1,60:$Vl1,61:$Vm1,80:$Vn1,87:$Vo1,88:$Vp1,89:$Vq1,91:$Vr1},{23:[1,337]},{2:$Vx1,23:$Vy1,89:$Vz1,114:$VA1,121:306,126:338,129:291,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{2:$Vx1,23:$Vy1,89:$Vz1,114:$VA1,121:306,126:339,129:291,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{114:[1,340]},{2:$Vx1,23:$Vy1,89:$Vz1,114:[2,164],121:306,130:341,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},o($VM1,[2,115]),o($VM1,[2,116]),o($VM1,[2,117]),o($VM1,[2,118]),o($VM1,[2,119]),o($VM1,[2,120]),o($VM1,[2,121]),o($VM1,[2,122]),{122:[1,342]},{122:[1,343]},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:344,163:$VU1,181:$VV1,182:$VW1},o($VM1,[2,126]),{122:[1,355]},{123:[1,356]},{23:[1,357]},{123:[1,358]},{123:[1,359]},{112:[1,360]},{94:[1,363],95:[1,364],156:[1,361],158:[1,362]},{123:[1,365]},{123:[1,366]},{123:[1,367]},{183:[1,368]},{2:$Vu,23:$Vv,89:$Vw,143:$Vx,145:$Vy,164:$Vz,167:$VA,189:369,193:116,195:117,196:118,197:119,198:120,199:121},{125:[1,370]},o($VP,[2,224]),o($V$,[2,226],{68:$V01,69:$V11,70:$V21,71:$V31,72:$V41,73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1}),o($VP,[2,225]),{2:$Vu,23:$Vv,89:$Vw,143:$Vx,145:$Vy,164:$Vz,167:$VA,189:371,193:116,195:117,196:118,197:119,198:120,199:121},{26:[1,372]},{26:[1,373]},{63:[1,374]},{63:[2,47]},{63:[2,48]},{63:[2,49]},{26:[1,375],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{23:$Vn,25:376,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{23:$Vn,25:377,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{26:[1,378]},{42:[1,379],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{26:[1,380]},{23:[1,381]},{24:[1,382]},{42:[1,383],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{45:[1,384]},{42:[1,385]},{114:[1,386]},{114:[1,387]},o($Vg,[2,165]),o($VM1,[2,114]),o($VM1,[2,123]),o($VM1,[2,124]),{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,122:[1,388],177:$V52,178:$V62,179:$V72,180:$V82},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:403,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:404,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:405,163:$VU1,181:$VV1,182:$VW1},o($V92,[2,195],{123:[1,406]}),o($V92,[2,196]),o($V92,[2,197]),o($V92,[2,198]),o($V92,[2,199]),o($V92,[2,201]),o($V92,[2,202]),o($VM1,[2,127]),{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:407,163:$VU1,181:$VV1,182:$VW1},{122:[2,148],155:408,156:[1,409]},{23:[1,412],165:410,169:[1,411]},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:413,163:$VU1,181:$VV1,182:$VW1},{2:$Vx1,23:$Vy1,89:$Vz1,114:$VA1,121:306,126:414,129:291,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:415,157:416,159:$Va2,160:$Vb2,161:$Vc2,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:420,163:$VU1,181:$VV1,182:$VW1},{122:[1,421]},{122:[1,422]},{23:[1,423]},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:425,144:424,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:425,144:426,163:$VU1,181:$VV1,182:$VW1},o($VP,[2,229]),{190:[1,427]},{153:[1,428]},{190:[1,429]},o($Vw1,[2,43]),o($Vw1,[2,44]),{64:[1,430]},o($Vw1,[2,83]),{26:[1,431],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{26:[1,432],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},o($Vw1,[2,82]),{43:[1,433]},{23:$Vn,25:434,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{24:[1,435]},{23:$Vn,25:436,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{43:[1,437]},{88:[1,438]},{43:[1,439]},o($Vg,[2,110]),o($Vg,[2,111]),o($VM1,[2,125]),{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:440,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:441,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:442,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:443,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:444,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:445,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:446,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:447,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:448,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:449,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:450,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:451,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:452,163:$VU1,181:$VV1,182:$VW1},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:453,163:$VU1,181:$VV1,182:$VW1},o($V92,[2,184]),o($V92,[2,187]),{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,125:[1,454],177:$V52,178:$V62,179:$V72,180:$V82},{125:[1,455]},{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,125:[1,456],177:$V52,178:$V62,179:$V72,180:$V82},{122:[1,457]},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:459,157:458,159:$Va2,160:$Vb2,161:$Vc2,163:$VU1,181:$VV1,182:$VW1},{122:[1,460]},{23:[1,461]},{156:[1,462]},{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,125:[1,463],177:$V52,178:$V62,179:$V72,180:$V82},{114:[1,464]},{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,122:[1,465],177:$V52,178:$V62,179:$V72,180:$V82},{123:[1,466]},{123:[2,145]},{123:[2,146]},{123:[2,147]},{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,122:[1,467],177:$V52,178:$V62,179:$V72,180:$V82},o($VM1,[2,142]),o($VM1,[2,143]),{125:[1,468]},{125:[1,469],146:$Vd2},o($V$,[2,131],{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,177:$V52,178:$V62,179:$V72,180:$V82}),{125:[1,471],146:$Vd2},o($VP,[2,236],{205:472,206:474,90:[1,473],207:$Ve2}),{183:[1,476]},o($VP,[2,235]),{42:[1,477]},o($Vw1,[2,84]),o($Vw1,[2,81]),{2:$Vf1,22:238,23:$Vg1,32:$V9,33:$Va,34:$Vb,44:478,45:$Vh1,46:220,47:221,48:222,49:223,50:232,51:233,52:234,53:235,54:236,55:224,56:225,57:$Vi1,58:$Vj1,59:$Vk1,60:$Vl1,61:$Vm1,80:$Vn1,87:$Vo1,88:$Vp1,89:$Vq1,91:$Vr1},{26:[1,479],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{23:$Vn,25:480,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{26:[2,80],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{2:$Vf1,22:238,23:$Vg1,32:$V9,33:$Va,34:$Vb,44:481,45:$Vh1,46:220,47:221,48:222,49:223,50:232,51:233,52:234,53:235,54:236,55:224,56:225,57:$Vi1,58:$Vj1,59:$Vk1,60:$Vl1,61:$Vm1,80:$Vn1,87:$Vo1,88:$Vp1,89:$Vq1,91:$Vr1},{41:[1,482]},{81:483,83:484,84:$Vf2},o($Vg2,[2,178],{69:$VY1,70:$VZ1,71:$V_1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,177:$V52,178:$V62,179:$V72,180:$V82}),o($Vh2,[2,179],{73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,177:$V52,178:$V62,179:$V72,180:$V82}),o($Vh2,[2,180],{73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,177:$V52,178:$V62,179:$V72,180:$V82}),o([68,69,70,71,72,122,125,146,177],[2,181],{73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,178:$V62,179:$V72,180:$V82}),o($Vh2,[2,182],{73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,177:$V52,178:$V62,179:$V72,180:$V82}),o($Vg2,[2,183],{69:$VY1,70:$VZ1,71:$V_1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,177:$V52,178:$V62,179:$V72,180:$V82}),o([68,69,70,71,72,77,78,122,125,146,177],[2,185],{73:$V02,74:$V12,75:$V22,178:$V62,179:$V72,180:$V82}),o([68,69,70,71,72,78,122,125,146,177],[2,186],{73:$V02,74:$V12,75:$V22,77:$V32,178:$V62,179:$V72,180:$V82}),o($V92,[2,188]),o($V92,[2,189]),o($V92,[2,190]),o($V92,[2,191]),o($V92,[2,192]),o($V92,[2,193]),o($V92,[2,194]),o($V92,[2,200]),{112:[1,486]},o($VM1,[2,138]),{123:[1,487]},{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,122:[2,149],177:$V52,178:$V62,179:$V72,180:$V82},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:488,163:$VU1,181:$VV1,182:$VW1},{156:[1,489]},{32:[1,490]},{112:[1,491]},{167:[1,492]},o($VM1,[2,140]),{125:[1,493]},o($VM1,[2,141]),{112:[1,494]},{122:[1,495]},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:496,163:$VU1,181:$VV1,182:$VW1},{122:[1,497]},o($VP,[2,237]),{153:[1,498]},o($VP,[2,240],{90:[1,499]}),{23:$VQ,32:$VR,33:$VS,34:$VT,72:$VU,79:$VV,123:$VW,163:$VX,181:$VY,182:$VZ,201:500},{188:[1,501]},{26:[1,502]},{45:[1,503]},{36:[1,505],93:504},{26:[2,79],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{45:[1,506]},{23:$Vn,25:507,35:104,36:$Vo,37:$Vp,38:$Vq,41:$Vr,72:$Vs,79:$Vt},{45:[2,70],82:508,83:509,84:$Vf2,86:[1,510]},o($Vv1,[2,68]),{35:511,36:$Vo,37:$Vp,38:$Vq},{2:$Vx1,23:$Vy1,89:$Vz1,114:$VA1,121:306,126:512,129:291,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{125:[1,513]},{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,122:[1,514],177:$V52,178:$V62,179:$V72,180:$V82},{32:[1,515]},{122:[2,160]},{2:$Vx1,23:$Vy1,89:$Vz1,114:$VA1,121:306,126:516,129:291,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{123:[1,517]},{122:[1,518]},{148:519,150:520,151:$Vi2},o($VM1,[2,128]),o($V$,[2,130],{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,177:$V52,178:$V62,179:$V72,180:$V82}),o($VM1,[2,129]),{183:[1,522]},{153:[1,523]},{68:$V01,69:$V11,70:$V21,71:$V31,72:$V41,73:$V51,74:$V61,75:$V71,77:$V81,78:$V91,153:[1,524],177:$Va1,178:$Vb1,179:$Vc1,180:$Vd1},{2:$Vu,23:$Vv,89:$Vw,143:$Vx,145:$Vy,164:$Vz,167:$VA,189:525,193:116,195:117,196:118,197:119,198:120,199:121},o($Vw1,[2,45]),o($Vw1,[2,73],{90:[1,526]}),{42:[1,527]},{94:[1,528],95:[1,529]},o($Vw1,[2,76]),{42:[1,530],68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL},{45:[1,531]},o($Vv1,[2,67]),{85:[1,532]},{85:[1,533]},{114:[1,534]},{122:[1,535]},{23:[1,537],166:536},{122:[2,159]},{114:[1,538]},{23:$VN1,32:$VO1,33:$VP1,34:$VQ1,72:$VR1,79:$VS1,123:$VT1,141:539,163:$VU1,181:$VV1,182:$VW1},o($VM1,[2,144]),{114:[2,136],149:540,150:541,151:$Vi2,154:[1,542]},o($Vj2,[2,134]),{32:[1,546],33:[1,547],34:[1,545],152:543,163:[1,544]},{188:[1,548]},{183:[1,549]},{183:[1,550]},{190:[1,551]},{43:[1,552]},{43:[1,553]},{42:[2,77]},{42:[2,78]},{26:[1,554]},o($Vw1,[2,66]),{2:$Vf1,22:238,23:$Vg1,32:$V9,33:$Va,34:$Vb,44:555,45:$Vh1,46:220,47:221,48:222,49:223,50:232,51:233,52:234,53:235,54:236,55:224,56:225,57:$Vi1,58:$Vj1,59:$Vk1,60:$Vl1,61:$Vm1,80:$Vn1,87:$Vo1,88:$Vp1,89:$Vq1,91:$Vr1},o($Vv1,$Vh1,{46:220,47:221,48:222,49:223,55:224,56:225,50:232,51:233,52:234,53:235,54:236,22:238,44:556,2:$Vf1,23:$Vg1,32:$V9,33:$Va,34:$Vb,57:$Vi1,58:$Vj1,59:$Vk1,60:$Vl1,61:$Vm1,80:$Vn1,87:$Vo1,88:$Vp1,89:$Vq1,91:$Vr1}),o($VM1,[2,153],{90:[1,557]}),o($VM1,[2,139]),{125:[1,558]},{94:[1,559],95:[1,560]},o($VM1,[2,157]),{68:$VX1,69:$VY1,70:$VZ1,71:$V_1,72:$V$1,73:$V02,74:$V12,75:$V22,77:$V32,78:$V42,125:[1,561],177:$V52,178:$V62,179:$V72,180:$V82},{114:[1,562]},o($Vj2,[2,133]),{153:[1,563]},{153:[1,564]},{153:[2,230]},{153:[2,231]},{153:[2,232]},{153:[2,233]},{2:$Vu,23:$Vv,89:$Vw,143:$Vx,145:$Vy,164:$Vz,167:$VA,189:565,193:116,195:117,196:118,197:119,198:120,199:121},{188:[1,566]},{188:[1,567]},o($VP,[2,234]),{2:$Vf1,22:238,23:$Vg1,32:$V9,33:$Va,34:$Vb,44:568,45:$Vh1,46:220,47:221,48:222,49:223,50:232,51:233,52:234,53:235,54:236,55:224,56:225,57:$Vi1,58:$Vj1,59:$Vk1,60:$Vl1,61:$Vm1,80:$Vn1,87:$Vo1,88:$Vp1,89:$Vq1,91:$Vr1},{2:$Vf1,22:238,23:$Vg1,32:$V9,33:$Va,34:$Vb,44:569,45:$Vh1,46:220,47:221,48:222,49:223,50:232,51:233,52:234,53:235,54:236,55:224,56:225,57:$Vi1,58:$Vj1,59:$Vk1,60:$Vl1,61:$Vm1,80:$Vn1,87:$Vo1,88:$Vp1,89:$Vq1,91:$Vr1},o($Vw1,[2,72]),{45:[2,71]},o($Vv1,[2,69]),{89:$Vz1,112:[1,570],131:571},{112:[1,572]},{125:[2,161]},{125:[2,162]},{122:[1,573]},o($VM1,[2,132]),{2:$Vx1,23:$Vy1,89:$Vz1,121:306,129:574,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{2:$Vx1,23:$Vy1,89:$Vz1,121:306,129:575,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},{190:[1,576]},{2:$Vu,23:$Vv,89:$Vw,143:$Vx,145:$Vy,164:$Vz,167:$VA,189:577,193:116,195:117,196:118,197:119,198:120,199:121},{2:$Vu,23:$Vv,89:$Vw,143:$Vx,145:$Vy,164:$Vz,167:$VA,189:578,193:116,195:117,196:118,197:119,198:120,199:121},{45:[1,579]},{45:[1,580]},{2:$Vx1,23:$Vy1,89:$Vz1,114:$VA1,121:306,126:581,129:291,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},o($VM1,[2,155]),{2:$Vx1,23:$Vy1,89:$Vz1,114:$VA1,121:306,126:582,129:291,130:292,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},o($VM1,[2,158]),{2:$Vx1,23:$Vy1,89:$Vz1,114:[2,137],121:306,130:341,131:293,132:294,133:295,134:296,135:297,136:298,137:299,138:$VB1,139:$VC1,140:$VD1,142:303,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl},o($Vj2,[2,135],{131:293,132:294,133:295,134:296,135:297,136:298,137:299,142:303,121:306,130:341,2:$Vx1,23:$Vy1,89:$Vz1,138:$VB1,139:$VC1,140:$VD1,143:$VE1,145:$VF1,147:$VG1,164:$VH1,167:$VI1,168:$VJ1,169:$Vh,172:$Vi,173:$Vj,174:$Vk,175:$Vl}),o($VP,[2,238]),{190:[1,583]},{190:[1,584]},o($Vw1,[2,74]),o($Vw1,[2,75]),{114:[1,585]},{114:[1,586]},o($VP,[2,239]),o($Vk2,[2,241],{206:587,207:$Ve2}),o($VM1,[2,154]),o($VM1,[2,156]),o($Vk2,[2,242])],
defaultActions: {2:[2,1],6:[2,3],32:[2,211],50:[2,212],53:[2,10],56:[2,20],57:[2,21],58:[2,22],63:[2,177],65:[2,214],68:[2,11],69:[2,13],82:[2,2],92:[2,171],93:[2,172],94:[2,173],95:[2,174],96:[2,175],155:[2,215],156:[2,217],271:[2,26],324:[2,47],325:[2,48],326:[2,49],417:[2,145],418:[2,146],419:[2,147],490:[2,160],515:[2,159],528:[2,77],529:[2,78],544:[2,230],545:[2,231],546:[2,232],547:[2,233],555:[2,71],559:[2,161],560:[2,162]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
        agregarErrores(hash.text,"SINTACTICO","Esperaba "+hash.expected.toString(),hash.line+1,(hash.loc.first_column+1)+"-"+(hash.loc.last_column+1));
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 var indents = [0], indent = 0, indent_actual = 0, dedents = 0, val_actual = "" 
var errores = [];
var conteo_errores= 0;

function agregarErrores(valor,tipo,razon,linea,columna){
    errores.push({valor:valor,tipo:tipo,razon:razon,linea:linea,columna:columna});
    conteo_errores++;
}

function soloNumeros(dato){
    if (dato.tipo=="char"){
        dato.valor = dato.valor.charCodeAt(0);
        dato.tipo = "int";
        return dato;
    } else {
        return dato;
    }
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {  
    if (!('codigo3D' in yy)){ yy.codigo3D = "#include <stdio.h>\nvoid main(){\n"; }
    if (!('etiquetas' in yy)){ yy.etiquetas = 0; } 

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: console.log("eninicio"); 
break;
case 1: console.log("tabulacion"); 
break;
case 2: return 5; 
break;
case 3: return 6; 
break;
case 4: this.begin("PYTHON"); return 7; 
break;
case 5: /*espacios en blanco*/ 
break;
case 6: /*tabulacion*/ 
break;
case 7: indent_actual = 0; this.begin("INDENT"); return 183; 
break;
case 8: this.begin("JAVA"); return 9 
break;
case 9: return 89; 
break;
case 10: return 90; 
break;
case 11: return 207; 
break;
case 12: return 158; 
break;
case 13: return 94; 
break;
case 14: return 95; 
break;
case 15: return 68; 
break;
case 16: return 72; 
break;
case 17: return 69; 
break;
case 18: return 70; 
break;
case 19: return 177; 
break;
case 20: return 71; 
break;
case 21: return 77; 
break;
case 22: return 78; 
break;
case 23: return 79; 
break;
case 24: return 156; 
break;
case 25: return 75; 
break;
case 26: return 178; 
break;
case 27: return 73; 
break;
case 28: return 179; 
break;
case 29: return 74; 
break;
case 30: return 180; 
break;
case 31: return yy_.yytext; 
break;
case 32: return 32; 
break;
case 33: return 34; 
break;
case 34: return 163; 
break;
case 35: return 33; 
break;
case 36: return 23; 
break;
case 37: indent_actual += 1; 
break;
case 38: /* espacios en blanco */ 
break;
case 39: indent_actual = 0; 
break;
case 40: 
                                            var posible = indent - indent_actual;
                                            this.unput(yy_.yytext);
                                            if (posible==-1){
                                                indent = indent_actual;
                                                this.begin('PYTHON');
                                                return 188;
                                            } else if (posible > 0){
                                                indent = indent_actual;
                                                dedents = posible;
                                                this.begin('DEDENT');
                                            } else if (posible==0){
                                                dedents = 0;
                                                this.begin('PYTHON');
                                            } else {
                                                var cuantos = (posible*-1)-1;
                                                console.log("Sobran "+cuantos+" indents");
                                                console.log("."+yy_.yytext+".");
                                                this.begin('PYTHON');
                                                indent++;
                                                return 188;
                                            } 
                                        
break;
case 41:
                                            this.unput(yy_.yytext);
                                            if (dedents!=0){
                                                dedents--;
                                                return 190;
                                            } else {
                                                this.begin("PYTHON");
                                            }
                                        
break;
case 42: /*nada*/ 
break;
case 43: this.begin("PROGRAMA"); return 11; 
break;
case 44: return 89; 
break;
case 45: return 90; 
break;
case 46: return 158; 
break;
case 47: return 94; 
break;
case 48: return 95; 
break;
case 49: return 68; 
break;
case 50: return 72; 
break;
case 51: return 69; 
break;
case 52: return 70; 
break;
case 53: return 177; 
break;
case 54: return 71; 
break;
case 55: return 77; 
break;
case 56: return 78; 
break;
case 57: return 79; 
break;
case 58: return 156; 
break;
case 59: return 75; 
break;
case 60: return 178; 
break;
case 61: return 73; 
break;
case 62: return 179; 
break;
case 63: return 74; 
break;
case 64: return 180; 
break;
case 65: return yy_.yytext; 
break;
case 66: return 34; 
break;
case 67: return 32; 
break;
case 68: return 163; 
break;
case 69: return 33; 
break;
case 70: return 23; 
break;
case 71: /*nada*/ 
break;
case 72: return 99; 
break;
case 73: return 101; 
break;
case 74: return 102; 
break;
case 75: return 103; 
break;
case 76: return 104; 
break;
case 77: return 106; 
break;
case 78: return 105; 
break;
case 79: return 40; 
break;
case 80: return 39; 
break;
case 81: return 85; 
break;
case 82: return 41; 
break;
case 83: return 24; 
break;
case 84: return 42; 
break;
case 85: return 43; 
break;
case 86: return 45; 
break;
case 87: return 28; 
break;
case 88: return 29; 
break;
case 89: return 94; 
break;
case 90: return 68; 
break;
case 91: return 95; 
break;
case 92: return 72; 
break;
case 93: return 69; 
break;
case 94: this.begin('BLOQUE_COMENTARIO'); 
break;
case 95: this.begin("COMENTARIO"); 
break;
case 96: this.begin('PROGRAMA'); 
break;
case 97: //agregarErrores(yy_.yytext,'COMENTARIO BLOQUE','COMENTARIO',yy_.yylineno,0); 
break;
case 98: this.begin('PROGRAMA'); 
break;
case 99: //agregarErrores(yy_.yytext,'COMENTARIO','COMENTARIO',yy_.yylineno,0); 
break;
case 100: return 70; 
break;
case 101: return 71; 
break;
case 102: return 77; 
break;
case 103: return 78; 
break;
case 104: return 74; 
break;
case 105: return 73; 
break;
case 106: return 75; 
break;
case 107: return 76; 
break;
case 108: return 79; 
break;
case 109: return 31; 
break;
case 110: return 32; 
break;
case 111: return 34; 
break;
case 112: return 33; 
break;
case 113: return 89; 
break;
case 114: return 90; 
break;
case 115: return 88; 
break;
case 116: return 87; 
break;
case 117: return 91; 
break;
case 118: return 58; 
break;
case 119: return 57; 
break;
case 120: return 61; 
break;
case 121: return 84; 
break;
case 122: return 80; 
break;
case 123: return 86; 
break;
case 124: return 59; 
break;
case 125: return 60; 
break;
case 126: return 38; 
break;
case 127: return 36; 
break;
case 128: return 37; 
break;
case 129: 
    if (yy_.yytext.includes('%c')){
        return 66;
    } else if (yy_.yytext.includes('%d')){
        return 65;
    } else if (yy_.yytext.includes('%f')){
        return 67;
    } else {
        return 163;
    } 
break;
case 130: return 64; 
break;
case 131: return 23; 
break;
case 132: return 26; 
break;
case 133: return 63; 
break;
case 134: return 4; 
break;
}
},
rules: [/^(?:[\ \n\r]+)/,/^(?:[\t])/,/^(?:paquete\b)/,/^(?:(((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)(\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))?))/,/^(?:(%%PYTHON\b))/,/^(?:[\ ]+)/,/^(?:\t)/,/^(?:(\r?\n)+)/,/^(?:(%%JAVA\b))/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:((continue|finally|return|global|assert|except|import|lambda|raise|class|print|break|while|yield|from|elif|else|with|pass|exec|and|del|not|def|for|try|as|or|if|input|in|is|range|true|false\b)|(>>=|<<=|\*\*=|\/\/=|\+=|-=|\*=|\/=|%=|&=|\|=|\^=|\*\*|\/\/|<<|>>|<=|>=|==|!=|<>|\+|-|\*|\/|%|&|\||\^|~|<|>|\(|\)|\[|\]|\{|\}|@|,|:|\.|`|=|;|'|\|\|")))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:("(([^\\\n\"])|(\\.))*"))/,/^(?:('(([^\\\n\'])|(\\.))*'))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:\t)/,/^(?: )/,/^(?:(\r?\n)+)/,/^(?:.)/,/^(?:.)/,/^(?:[\ \n\t\s\r]+)/,/^(?:%%PROGRAMA\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:(public|private|class|extends|intinput|floatinput|charinput|int|String|char|float|boolean|true|false|else|while|for|do|break|continue|return|\(|\)|\{|\}|,|:|;|,|void|case|switch|default|println|print\b))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:("(([^\\\n\"])|(\\.))*"))/,/^(?:('(([^\\\n\'])|(\\.))*'))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:[\ \n\t\s\r]+)/,/^(?:#include\b)/,/^(?:"PY")/,/^(?:"PY\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)")/,/^(?:"JAVA\.\*")/,/^(?:"JAVA\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)")/,/^(?:"JAVA\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)\.\*")/,/^(?:"JAVA\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)")/,/^(?:main\b)/,/^(?:void\b)/,/^(?::)/,/^(?:\()/,/^(?:=)/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/\*)/,/^(?:\/\/)/,/^(?:[\n])/,/^(?:[^\n]+)/,/^(?:\*\/)/,/^(?:[^'*/']+)/,/^(?:\/)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:const\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:scanf\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:clrscr\b)/,/^(?:getch\b)/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:'.')/,/^(?:"([^'%d''%c''%f']*|(%d|%c|%f))+")/,/^(?:&((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:;)/,/^(?:,)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,134],"inclusive":true},"PYTHON":{"rules":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,134],"inclusive":true},"DEDENT":{"rules":[41,134],"inclusive":true},"INDENT":{"rules":[37,38,39,40,134],"inclusive":true},"JAVA":{"rules":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,134],"inclusive":true},"PROGRAMA":{"rules":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],"inclusive":true},"COMENTARIO":{"rules":[96,97,134],"inclusive":true},"BLOQUE_COMENTARIO":{"rules":[98,99,134],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}