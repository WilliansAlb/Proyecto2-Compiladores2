/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,13],$V2=[1,19],$V3=[1,18],$V4=[2,9,185],$V5=[2,11,109],$V6=[18,29,30,31,36],$V7=[1,31],$V8=[29,30,31,36],$V9=[1,39],$Va=[18,29,30,31,36,99],$Vb=[1,57],$Vc=[1,58],$Vd=[1,59],$Ve=[1,79],$Vf=[1,78],$Vg=[1,80],$Vh=[1,86],$Vi=[2,109,114,128],$Vj=[1,93],$Vk=[1,94],$Vl=[1,95],$Vm=[1,96],$Vn=[1,97],$Vo=[127,170,173,174,175,176],$Vp=[1,107],$Vq=[1,108],$Vr=[1,109],$Vs=[1,110],$Vt=[1,104],$Vu=[1,103],$Vv=[1,105],$Vw=[1,112],$Vx=[1,126],$Vy=[1,127],$Vz=[1,128],$VA=[1,130],$VB=[1,131],$VC=[1,129],$VD=[1,132],$VE=[1,135],$VF=[1,136],$VG=[1,137],$VH=[1,138],$VI=[1,139],$VJ=[1,140],$VK=[1,141],$VL=[1,142],$VM=[1,143],$VN=[1,144],$VO=[1,145],$VP=[23,28,39,69,70,71,72,73,74,75,76,77,78,79],$VQ=[23,28,39,69,70,71,72,73,74,75,76,77,78,79,86],$VR=[2,174],$VS=[2,20,90,143,145,165,168,189],$VT=[1,169],$VU=[1,170],$VV=[1,173],$VW=[1,172],$VX=[1,171],$VY=[1,166],$VZ=[1,167],$V_=[1,168],$V$=[1,174],$V01=[1,175],$V11=[21,23,27,28,39,69,70,71,72,73,74,75,76,77,78,79],$V21=[125,146],$V31=[1,202],$V41=[1,203],$V51=[1,204],$V61=[1,206],$V71=[1,207],$V81=[1,212],$V91=[1,214],$Va1=[1,210],$Vb1=[1,208],$Vc1=[1,209],$Vd1=[1,205],$Ve1=[1,211],$Vf1=[1,213],$Vg1=[1,215],$Vh1=[69,70,71,72,73,74,75,76,78,79,125,146,153,178,179,180,181,182],$Vi1=[1,238],$Vj1=[1,243],$Vk1=[2,25],$Vl1=[1,231],$Vm1=[1,232],$Vn1=[1,233],$Vo1=[1,234],$Vp1=[1,235],$Vq1=[1,245],$Vr1=[1,250],$Vs1=[1,246],$Vt1=[1,249],$Vu1=[1,247],$Vv1=[1,248],$Vw1=[23,28,39,69,73],$Vx1=[23,28,39,69,70,71,72,73],$Vy1=[1,275],$Vz1=[42,85,87],$VA1=[2,20,29,30,31,42,53,54,55,56,57,64,81,85,87,88,89,90,92],$VB1=[1,312],$VC1=[1,318],$VD1=[1,313],$VE1=[2,170],$VF1=[1,308],$VG1=[1,309],$VH1=[1,310],$VI1=[1,320],$VJ1=[1,321],$VK1=[1,319],$VL1=[1,315],$VM1=[1,316],$VN1=[1,317],$VO1=[69,73,125,146,153,182],$VP1=[69,70,71,72,73,125,146,153,182],$VQ1=[1,332],$VR1=[1,333],$VS1=[1,334],$VT1=[2,20,90,114,138,139,140,143,145,147,151,154,165,168,169,170,173,174,175,176],$VU1=[1,358],$VV1=[1,360],$VW1=[1,363],$VX1=[1,362],$VY1=[1,361],$VZ1=[1,355],$V_1=[1,356],$V$1=[1,357],$V02=[1,364],$V12=[1,365],$V22=[1,402],$V32=[1,403],$V42=[1,404],$V52=[1,406],$V62=[1,407],$V72=[1,412],$V82=[1,414],$V92=[1,410],$Va2=[1,408],$Vb2=[1,409],$Vc2=[1,405],$Vd2=[1,411],$Ve2=[1,413],$Vf2=[1,415],$Vg2=[69,70,71,72,73,74,75,76,78,79,122,125,146,178,179,180,181],$Vh2=[1,430],$Vi2=[1,431],$Vj2=[1,432],$Vk2=[1,486],$Vl2=[1,491],$Vm2=[39,59],$Vn2=[1,503],$Vo2=[69,73,122,125,146],$Vp2=[69,70,71,72,73,122,125,146],$Vq2=[1,541],$Vr2=[114,151,154],$Vs2=[2,20,90,91,143,145,165,168,189];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"EOF":4,"PAQUETE":5,"URL":6,"PYTHON":7,"codigo_python":8,"JAVA":9,"codigo_java":10,"PROGRAMA":11,"includes":12,"constantes":13,"globales":14,"main":15,"lista_constantes":16,"constante":17,"CONSTANTE":18,"tipos_datos":19,"IDENTIFICADOR":20,"IGUAL":21,"expresion_c":22,"PUNTOC":23,"dimensiones":24,"lista_globales":25,"var_global":26,"COR_A":27,"COR_C":28,"INT":29,"CHAR":30,"FLOAT":31,"dato":32,"INTV":33,"CHARV":34,"FLOATV":35,"VOID":36,"MAIN":37,"PAR_A":38,"PAR_C":39,"LLAVE_A":40,"lista_sentencias_c":41,"LLAVE_C":42,"sentencias_c":43,"sentencia_c":44,"una_linea_c":45,"bloque_c":46,"if_c":47,"for_c":48,"while_c":49,"switch_c":50,"asignacion_c":51,"declaracion_c":52,"BREAK":53,"CONTINUE":54,"CLEAR":55,"GETCH":56,"SCANF":57,"tipos_scan_c":58,"COMA":59,"IDENTIFICADORREF":60,"printf_c":61,"do_while_c":62,"ids_c":63,"PRINTF":64,"STRING":65,"SCANINT":66,"SCANCHAR":67,"SCANFLOAT":68,"SUMA":69,"POR":70,"ENTRE":71,"MOD":72,"RESTA":73,"MAYOR":74,"MENOR":75,"IGUAL_IGUAL":76,"DIFF":77,"AND":78,"OR":79,"NOT":80,"SWITCH":81,"lista_casos_c":82,"default_c":83,"caso_c":84,"CASE":85,"DOS_P":86,"DEFAULT":87,"DO":88,"WHILE":89,"IF":90,"ELSE":91,"FOR":92,"declaracion_for_c":93,"inc_dec_c":94,"MAS":95,"MENOS":96,"lista_includes":97,"include":98,"INCLUDE":99,"tipos_include":100,"TODOPY":101,"ESPY":102,"TODOJAVA":103,"JAVAARCHIVO":104,"JAVACLASE":105,"JAVACLASES":106,"clases":107,"clase":108,"public":109,"class":110,"herencia":111,"{":112,"body_classp":113,"}":114,"body_class":115,"parte_java":116,"declaracion_global_java":117,"metodo_java":118,"constructorl":119,"modificador_java":120,"tipo_java":121,";":122,"(":123,"lista_parametros_java":124,")":125,"listado_java":126,"void":127,"private":128,"sentencias_java":129,"sentencia_java":130,"if_java":131,"declaracion_java":132,"for_java":133,"while_java":134,"do_while_java":135,"asignacion_java":136,"switch_java":137,"continue":138,"break":139,"return":140,"expresion_java":141,"imprimir_java":142,"print":143,"lista_imprimir_java":144,"println":145,",":146,"switch":147,"casos_java":148,"default_java":149,"caso_java":150,"case":151,"valor":152,":":153,"default":154,"declaracion_cola_java":155,"ASIGNAR":156,"tipo_input_java":157,"MAS_ASIGNAR":158,"intinput":159,"floatinput":160,"charinput":161,"valor_java":162,"true":163,"false":164,"for":165,"declaracion_for":166,"accion_posterior_java":167,"while":168,"do":169,"int":170,"parametros_java":171,"parametro_java":172,"String":173,"float":174,"char":175,"boolean":176,"extends":177,"POT":178,"DIFERENTE":179,"MAYOR_IGUAL":180,"MENOR_IGUAL":181,"SALTO":182,"funciones_python":183,"funcion_python":184,"def":185,"lista_parametros_python":186,"INDENT":187,"sentencias_python":188,"DEDENT":189,"parametros_python":190,"parametros_pythonp":191,"sentencia_python":192,"sentencias_pythonp":193,"asignacion_python":194,"if_python":195,"for_python":196,"print_python":197,"while_python":198,"lista_imprimir_python":199,"expresion_python":200,"input":201,"in":202,"range":203,"if_python_cola":204,"elif_python":205,"ELIF":206,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",5:"PAQUETE",6:"URL",7:"PYTHON",9:"JAVA",11:"PROGRAMA",18:"CONSTANTE",20:"IDENTIFICADOR",21:"IGUAL",23:"PUNTOC",27:"COR_A",28:"COR_C",29:"INT",30:"CHAR",31:"FLOAT",33:"INTV",34:"CHARV",35:"FLOATV",36:"VOID",37:"MAIN",38:"PAR_A",39:"PAR_C",40:"LLAVE_A",42:"LLAVE_C",53:"BREAK",54:"CONTINUE",55:"CLEAR",56:"GETCH",57:"SCANF",59:"COMA",60:"IDENTIFICADORREF",64:"PRINTF",65:"STRING",66:"SCANINT",67:"SCANCHAR",68:"SCANFLOAT",69:"SUMA",70:"POR",71:"ENTRE",72:"MOD",73:"RESTA",74:"MAYOR",75:"MENOR",76:"IGUAL_IGUAL",77:"DIFF",78:"AND",79:"OR",80:"NOT",81:"SWITCH",85:"CASE",86:"DOS_P",87:"DEFAULT",88:"DO",89:"WHILE",90:"IF",91:"ELSE",92:"FOR",95:"MAS",96:"MENOS",99:"INCLUDE",101:"TODOPY",102:"ESPY",103:"TODOJAVA",104:"JAVAARCHIVO",105:"JAVACLASE",106:"JAVACLASES",109:"public",110:"class",112:"{",114:"}",122:";",123:"(",125:")",127:"void",128:"private",138:"continue",139:"break",140:"return",143:"print",145:"println",146:",",147:"switch",151:"case",153:":",154:"default",156:"ASIGNAR",158:"MAS_ASIGNAR",159:"intinput",160:"floatinput",161:"charinput",163:"true",164:"false",165:"for",168:"while",169:"do",170:"int",173:"String",174:"float",175:"char",176:"boolean",177:"extends",178:"POT",179:"DIFERENTE",180:"MAYOR_IGUAL",181:"MENOR_IGUAL",182:"SALTO",185:"def",187:"INDENT",189:"DEDENT",201:"input",202:"in",203:"range",206:"ELIF"},
productions_: [0,[3,1],[3,12],[3,2],[13,0],[13,1],[16,2],[16,1],[17,6],[17,5],[14,0],[14,1],[25,2],[25,1],[26,5],[26,4],[24,4],[24,3],[19,1],[19,1],[19,1],[32,1],[32,1],[32,1],[15,7],[41,0],[41,1],[43,2],[43,1],[44,1],[44,1],[46,1],[46,1],[46,1],[46,1],[46,2],[45,1],[45,1],[45,2],[45,2],[45,4],[45,4],[45,7],[45,1],[45,1],[45,2],[63,3],[63,1],[61,7],[61,5],[58,1],[58,1],[58,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[22,1],[22,2],[50,8],[82,2],[82,1],[84,4],[83,0],[83,3],[62,9],[47,7],[47,11],[48,11],[49,7],[94,2],[94,2],[93,4],[93,3],[52,5],[52,4],[51,4],[51,5],[12,0],[12,1],[97,2],[97,1],[98,2],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[10,0],[10,1],[107,2],[107,1],[108,7],[108,2],[113,0],[113,1],[115,2],[115,1],[116,1],[116,1],[116,1],[117,4],[118,9],[118,9],[120,1],[120,1],[129,2],[129,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,2],[130,2],[130,3],[130,1],[130,2],[142,5],[142,5],[144,3],[144,1],[137,8],[148,2],[148,1],[150,4],[149,0],[149,3],[132,4],[132,7],[136,4],[136,4],[136,3],[136,3],[136,6],[157,1],[157,1],[157,1],[155,0],[155,2],[162,1],[162,1],[162,1],[162,1],[162,1],[162,1],[131,7],[131,11],[131,9],[133,11],[134,7],[135,9],[166,4],[166,3],[167,2],[167,2],[126,0],[126,1],[119,8],[119,2],[124,0],[124,1],[171,3],[171,1],[172,2],[121,1],[121,1],[121,1],[121,1],[121,1],[111,0],[111,2],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,2],[141,3],[141,3],[141,2],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,1],[141,1],[141,3],[8,0],[8,1],[8,2],[183,2],[183,1],[184,10],[184,2],[186,0],[186,1],[190,2],[191,0],[191,2],[188,2],[193,0],[193,1],[192,1],[192,1],[192,1],[192,1],[192,1],[192,2],[197,5],[197,5],[199,3],[199,1],[194,4],[194,6],[152,1],[152,1],[152,1],[152,1],[196,11],[198,7],[195,7],[195,8],[204,6],[204,7],[204,1],[205,7],[205,8],[200,3],[200,3],[200,3],[200,3],[200,3],[200,3],[200,2],[200,3],[200,3],[200,2],[200,3],[200,3],[200,3],[200,3],[200,3],[200,3],[200,3],[200,1],[200,1],[200,1],[200,1],[200,1],[200,1],[200,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Vacio");
break;
case 2:

            var obj = new Object();
            obj.errores = errores;
            obj.codigo3D = yy.codigo3D;
            obj.conteo = conteo_errores;
            obj.simbolos = yy.simbolos;
            var C = new Object();
            C.includes = $$[$0-4];
            C.constantes = $$[$0-3];
            C.globales = $$[$0-2];
            C.cuadruplasMain = $$[$0-1];
            C.tablaSimbolos = yy.simbolos;
            obj.C = C;
            return obj;
        
break;
case 3:

            var obj = new Object();
            obj.errores = errores;
            obj.codigo3D = yy.codigo3D;
            obj.conteo = conteo_errores;
            obj.simbolos = yy.simbolos;
            return obj;
        
break;
case 4: case 10: case 25: case 74: case 89:

        this.$ = null;
    
break;
case 5: case 11: case 29: case 30: case 43: case 90: case 92: case 204:

        this.$ = $$[$0];
    
break;
case 6: case 12:

        Array.prototype.push.apply($$[$0-1],$$[$0].cuadruplas);
        this.$ = $$[$0-1];
    
break;
case 7: case 13: case 93: case 153:

        this.$ = $$[$0].cuadruplas;
    
break;
case 8:

        var objeto = new Object();
        objeto.id = $$[$0-3];
        objeto.tipo = $$[$0-4];
        objeto.constante = true;
        objeto.tamanio = 1;
        objeto.arreglo = false;
        objeto.rol = "variable";
        objeto.cuadruplas = [];
        this.$ = objeto;
        if ($$[$0-1].tipo != 'error'){
            if ($$[$0-4] == $$[$0-1].tipo){
                yy.addSimbolos(objeto,_$[$0-3].first_line,_$[$0-3].first_column);
                this.$.codigo3D = $$[$0-1].codigo3D + "const "+$$[$0-4]+" "+$$[$0-3]+" = "+$$[$0-1].etiqueta+" ;\n";
                this.$.etiqueta = "";
                objeto.cuadruplas = $$[$0-1].cuadruplas;
                objeto.cuadruplas.push(new yy.Cuadrupla("d=",$$[$0-1].etiqueta,null,$$[$0-3]));
                yy.codigo3D += this.$.codigo3D;
            } else {
                if (($$[$0-4] == 'char' && $$[$0-1].tipo=='int') || ($$[$0-4] == 'float' && ($$[$0-1].tipo=='int' || $$[$0-1].tipo=='char')) || ($$[$0-4] == 'int' && $$[$0-1].tipo=='char') ){
                    yy.addSimbolos(objeto,_$[$0-3].first_line,_$[$0-3].first_column);
                    this.$.codigo3D = $$[$0-1].codigo3D + "const "+$$[$0-4]+" "+$$[$0-3]+" = "+$$[$0-1].etiqueta+" ;\n";
                    objeto.cuadruplas = $$[$0-1].cuadruplas;
                    objeto.cuadruplas.push(new yy.Cuadrupla("d=",$$[$0-1].etiqueta,null,$$[$0-3]));
                    this.$.etiqueta = "";
                    yy.codigo3D += this.$.codigo3D;
                } else {
                    agregarErrores($$[$0-3],'SEMANTICO','Asignación de datos incompatibles '+$$[$0-4]+' no es compatible con '+$$[$0-1].tipo,_$[$0-3].first_line,_$[$0-3].first_column);
                }
            }
        }
    
break;
case 9:

        var objeto = new Object();
        objeto.id = $$[$0-3];
        objeto.tipo = $$[$0-4];
        objeto.constante = true;
        objeto.tamanio = 1;
        objeto.arreglo = true;
        objeto.rol = "variable";
        objeto.codigo3D = $$[$0-1].codigo3D+" "+$$[$0-3]+" "+$$[$0-2]+"["+$$[$0-1].etiqueta+"];\n";
        objeto.etiqueta = "";
        objeto.cuadruplas = $$[$0-1].cuadruplas;
        objeto.cuadruplas.push(new yy.Cuadrupla("d=[]",$$[$0-1].etiqueta,null,$$[$0-2]));
        yy.codigo3D += objeto.codigo3D;
        yy.addSimbolos(objeto,_$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = objeto;
    
break;
case 14:

        var objeto = new Object();
        objeto.id = $$[$0-3];
        objeto.tipo = $$[$0-4];
        objeto.constante = false;
        objeto.tamanio = 1;
        objeto.arreglo = false;
        objeto.rol = "variable";
        objeto.codigo3D = $$[$0-1].codigo3D+" "+$$[$0-4]+" "+$$[$0-3]+" = "+$$[$0-1].etiqueta+";\n";
        objeto.cuadruplas = $$[$0-1].cuadruplas;
        objeto.cuadruplas.push(new yy.Cuadrupla("d=",$$[$0-1].etiqueta,null,$$[$0-3]));
        yy.codigo3D += objeto.codigo3D;
        objeto.etiqueta = "";
        yy.addSimbolos(objeto,_$[$0-3].first_line,_$[$0-3].first_column);
        this.$ = objeto;
    
break;
case 15:

        var objeto = new Object();
        objeto.id = $$[$0-2];
        objeto.tipo = $$[$0-3];
        objeto.constante = false;
        objeto.tamanio = 1;
        objeto.arreglo = true;
        objeto.rol = "variable";
        objeto.codigo3D = $$[$0-1].codigo3D+" "+$$[$0-3]+" "+$$[$0-2]+"["+$$[$0-1].etiqueta+"];\n";
        objeto.etiqueta = "";
        objeto.cuadruplas = $$[$0-1].cuadruplas;
        objeto.cuadruplas.push(new yy.Cuadrupla("d=[]",$$[$0-1].etiqueta,null,$$[$0-2]));
        yy.codigo3D += objeto.codigo3D;
        yy.addSimbolos(objeto,_$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = objeto;
    
break;
case 16:

        var tem = new Object();
        tem.codigo3D = $$[$0-3].codigo3D + $$[$0-1].codigo3D + " int t"+yy.etiquetas+" = "+$$[$0-3].etiqueta+" * "+$$[$0-1].etiqueta+" ;\n";
        tem.etiqueta = "t"+yy.etiquetas;
        tem.cuadruplas = $$[$0-3].cuadruplas;
        tem.cuadruplas.push(new yy.Cuadrupla("*",$$[$0-3].etiqueta,$$[$0-1].etiqueta,tem.etiqueta));
        yy.etiquetas++;
        this.$ = tem;
    
break;
case 17:

        var tem = new Object();
        tem.codigo3D = $$[$0-1].codigo3D;
        tem.etiqueta = $$[$0-1].etiqueta;
        tem.cuadruplas = $$[$0-1].cuadruplas;
        this.$ = tem;
    
break;
case 18:

        this.$ = "int";
    
break;
case 19:

        this.$ = "char";
    
break;
case 20:

        this.$ = "float";
    
break;
case 21:

            var obj = new Object();
            obj.valor = parseInt($$[$0]);
            obj.respuesta = parseInt($$[$0]);
            obj.tipo = "int";
            obj.linea = _$[$0].first_line;
            obj.columna = _$[$0].first_column;
            this.$ = obj;
        
break;
case 22:

            var obj = new Object();
            obj.valor = $$[$0];
            obj.respuesta = $$[$0];
            obj.tipo = "char";
            obj.linea = _$[$0].first_line;
            obj.columna = _$[$0].first_column;
            this.$ = obj;
        
break;
case 23:

            var obj = new Object();
            obj.valor = parseFloat($$[$0]);
            obj.respuesta = parseFloat($$[$0]);
            obj.tipo = "float";
            obj.linea = _$[$0].first_line;
            obj.columna = _$[$0].first_column;
            this.$ = obj;
        
break;
case 24:

        console.log("CODIGO");
        yy.codigo3D+= "void main(){\n\t"+$$[$0-1].codigo3D+"}";
        this.$ = $$[$0-1].cuadruplas;
        console.log("FIN CODIGO");
    
break;
case 26:

        this.$ = $$[$0];
        var boo = false;
        var cod3d = "";
        var temp = [];
        temp.push(new yy.Cuadrupla("bloque","B"+yy.bloques_codes,null,null));
        for (var i = 0; i < this.$.length; i++){
            var ob = this.$[i];
            cod3d+=ob.codigo3D;
            Array.prototype.push.apply(temp,this.$[i].cuadruplas);
        }
        temp.push(new yy.Cuadrupla("bloque","B"+yy.bloques_codes,null,null));
        yy.bloques_codes++;
        this.$ = new Object();
        this.$.codigo3D = cod3d;
        this.$.cuadruplas = temp;
        this.$.etiqueta = "";
    
break;
case 27: case 71:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 28: case 72:

        this.$ = [];
        this.$.push($$[$0]);
    
break;
case 31:

        var temp = new Object();
        temp.tipo = $$[$0].tipo_if;
        temp.if = $$[$0];
        temp.codigo3D = $$[$0].codigo3D;
        temp.etiqueta = "";
        temp.cuadruplas = $$[$0].cuadruplas;
        this.$ = temp;
    
break;
case 32:

        var temp = new Object();
        temp.tipo = "for";
        temp.for = $$[$0];
        temp.codigo3D = $$[$0].codigo3D;
        temp.etiqueta = "";
        temp.cuadruplas = $$[$0].cuadruplas;
        this.$ = temp;
    
break;
case 33:

        var temp = new Object();
        temp.tipo = "while";
        temp.while = $$[$0];
        temp.codigo3D = $$[$0].codigo3D;
        temp.etiqueta = "";
        temp.cuadruplas = $$[$0].cuadruplas;
        this.$ = temp;
    
break;
case 34:

        var temp = new Object();
        temp.tipo = "switch";
        temp.switch = $$[$0];
        temp.codigo3D = $$[$0].codigo3D;
        temp.etiqueta = "";
        temp.cuadruplas = $$[$0].cuadruplas;
        this.$ = temp;
    
break;
case 36:

        var temp = new Object();
        temp.tipo = "asignacion";
        temp.asignacion = $$[$0];
        temp.codigo3D = $$[$0].codigo3D;
        temp.etiqueta = "";
        temp.cuadruplas = $$[$0].cuadruplas;
        this.$ = temp;
    
break;
case 37:

        var temp = new Object();
        temp.tipo = "declaracion";
        temp.declaracion = $$[$0];
        temp.codigo3D = $$[$0].codigo3D;
        temp.etiqueta = "";
        temp.cuadruplas = $$[$0].cuadruplas;
        this.$ = temp;
    
break;
case 38:

        var temp = new Object();
        temp.tipo = "break";
        temp.codigo3D = "";
        temp.etiqueta = "";
        temp.cuadruplas = [];
        temp.cuadruplas.push(new yy.Cuadrupla("break",null,null,null));
        this.$ = temp;
    
break;
case 39:

        var temp = new Object();
        temp.tipo = "continue";
        temp.codigo3D = "";
        temp.etiqueta = "";
        temp.cuadruplas = [];
        temp.cuadruplas.push(new yy.Cuadrupla("continue",null,null,null));
        this.$ = temp;
    
break;
case 40:

        var temp = new Object();
        temp.tipo = "clear";
        temp.codigo3D = "";
        temp.etiqueta = "";
        temp.cuadruplas = [];
        temp.cuadruplas.push(new yy.Cuadrupla("clear",null,null,null));
        this.$ = temp;
    
break;
case 41:

        var temp = new Object();
        temp.tipo = "getch";
        temp.codigo3D = "";
        temp.etiqueta = "";
        temp.cuadruplas = [];
        temp.cuadruplas.push(new yy.Cuadrupla("getch",null,null,null));
        this.$ = temp;
    
break;
case 42:

        var temp = new Object();
        temp.tipo = "scanf";
        temp.tipo_scan = $$[$0-4];
        temp.variable = $$[$0-2];
        temp.codigo3D = "";
        temp.etiqueta = "";
        temp.cuadruplas = [];
        var obj = new Object();
        obj.id = $$[$0-2].substring(1,$$[$0-2].length);
        obj.arreglo = false;
        var tipo = yy.getTipo(obj,_$[$0-2].first_line,_$[$0-2].first_column);
        if (tipo!="error"){
            if (temp.tipo_scan.scan==tipo){
                temp.cuadruplas.push(new yy.Cuadrupla("scanf",$$[$0-4].texto,obj.id,null));
                temp.codigo3D = "scanf("+temp.tipo_scan.texto+","+$$[$0-2]+");\n";
            } else {
                agregarErrores(obj.id,"SEMANTICO","Ingresaste un "+tipo+" cuando scanf esperaba un "+temp.tipo_scan.scan,_$[$0-2].first_line,_$[$0-2].first_column);
            }
        }
        this.$ = temp;
    
break;
case 44:

        var temp = new Object();
        temp.tipo = "do";
        temp.do = $$[$0];
        temp.codigo3D = $$[$0].codigo3D;
        temp.etiqueta = "";
        temp.cuadruplas = $$[$0].cuadruplas;
        this.$ = temp;
    
break;
case 46:

        var temp = new Object();
        temp.id = $$[$0];
        temp.arreglo = false;
        var tipo = yy.getTipo(temp,_$[$0-2].first_line,_$[$0-2].first_column);
        temp.tipo = tipo;
        temp.linea = _$[$0-2].first_line;
        temp.columna = _$[$0-2].first_column;
        $$[$0-2].push(temp);
        this.$ = $$[$0-2];
    
break;
case 47:

        var temp = new Object();
        temp.id = $$[$0];
        temp.arreglo = false;
        var tipo = yy.getTipo(temp,_$[$0].first_line,_$[$0].first_column);
        temp.tipo = tipo;
        temp.linea = _$[$0].first_line;
        temp.columna = _$[$0].first_column;
        this.$ = [];
        this.$.push(temp);
    
break;
case 48:

        var temp = new Object();
        temp.tipo = "printf";
        temp.tipo_scan = $$[$0-4];
        temp.variable = $$[$0-2];
        temp.codigo3D = "";
        temp.etiqueta = "";
        temp.cuadruplas = [];
        var obj = new Object();
        obj.id = $$[$0-2].length;
        var texto = $$[$0-4].texto;
        var scan = $$[$0-4].scan;
        var textotemp = "";
        var esperando = false;
        var ids = $$[$0-2];
        var conteo_ids = 0;
        for (var i = 1; i < (texto.length-1); i++){
            if (esperando){
                if (texto.charAt(i)!='c' || texto.charAt(i)!='d' || texto.charAt(i)!='f'){
                    var tip = "char";
                    tip = (texto.charAt(i)=='d')?"int":"char";
                    tip = (texto.charAt(i)=='f')?"float":tip;
                    textotemp += texto.charAt(i)+"";
                    if (ids.length > conteo_ids){
                        if (ids[conteo_ids].tipo == tip){
                            temp.cuadruplas.push(new yy.Cuadrupla("printf",textotemp,ids[conteo_ids].id,null));
                            conteo_ids++;
                        } else {
                            agregarErrores(ids[conteo_ids].id,"SEMANTICO","Los tipos no coinciden para imprimir la variable "+ids[conteo_ids].id,ids[conteo_ids].linea,ids[conteo_ids].columna);
                            conteo_ids++;
                        }
                    } else {
                        agregarErrores(texto,"SEMANTICO","No coinciden el numero de variables",_$[$0-5].last_line,_$[$0-5].last_column);
                    }
                    textotemp = "";
                } else {
                    textotemp += texto.charAt(i)+"";
                }
                esperando=false;
            } else {
                if (texto.charAt(i)!='%'){
                    textotemp += texto.charAt(i)+"";
                } else {
                    textotemp += texto.charAt(i)+"";
                    esperando = true;
                }
            }
        }
        if (textotemp!=""){
            temp.cuadruplas.push(new yy.Cuadrupla("printf",textotemp,null,null));
        } else {
            if (conteo_ids<ids.length){
                agregarErrores(texto,"SEMANTICO","No coinciden el numero de variables",_$[$0-5].last_line,_$[$0-5].last_column);
            }
        }
        this.$ = temp;
    
break;
case 49:

        var temp = new Object();
        temp.cuadruplas = [];
        temp.cuadruplas.push(new yy.Cuadrupla("printf",$$[$0-2],null,null));
        this.$ = temp;
    
break;
case 50:

        var temp = new Object();
        temp.scan = "int";
        temp.texto = $$[$0];
        this.$ = temp;
    
break;
case 51:

        var temp = new Object();
        temp.scan = "char";
        temp.texto = $$[$0];
        this.$ = temp;
    
break;
case 52:

        var temp = new Object();
        temp.scan = "float";
        temp.texto = $$[$0];
        this.$ = temp;
    
break;
case 53:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = ($$[$0-2].tipo=='float' || $$[$0].tipo =='float')?'float':'int';
                this.$ = new Object();
                this.$.tipo = res;
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" + "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("+",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 54:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = ($$[$0-2].tipo=='float' || $$[$0-1].tipo =='float')?'float':'int';
                this.$ = new Object();
                this.$.tipo = res;
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" * "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                console.log($$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("*",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 55:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = ($$[$0-2].tipo=='float' || $$[$0-1].tipo =='float')?'float':'int';
                this.$ = new Object();
                this.$.tipo = res;
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" / "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("/",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 56:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = ($$[$0-2].tipo=='float' || $$[$0-1].tipo =='float')?'float':'int';
                this.$ = new Object();
                this.$.tipo = res;
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" % "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("%",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 57:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = ($$[$0-2].tipo=='float' || $$[$0-1].tipo =='float')?'float':'int';
                this.$ = new Object();
                this.$.tipo = res;
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" - "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("-",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 58:
 
            if ($$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = $$[$0].tipo;
                this.$ = new Object();
                this.$.tipo = res;
                this.$.codigo3D = $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = -"+$$[$0].etiqueta+" ;\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("negativo",$$[$0].etiqueta,null,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 59:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = 'int';
                this.$ = new Object();
                this.$.tipo = 'int';
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" > "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla(">",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 60:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                this.$ = new Object();
                this.$.tipo = 'int';
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + this.$.tipo +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" < "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("<",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 61:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = 'int';
                this.$ = new Object();
                this.$.tipo = 'int';
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" == "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("==",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 62:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = 'int';
                this.$ = new Object();
                this.$.tipo = 'int';
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" != "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("!=",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 63:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = 'int';
                this.$ = new Object();
                this.$.tipo = 'int';
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" && "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("&&",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 64:
 
            if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = 'int';
                this.$ = new Object();
                this.$.tipo = 'int';
                this.$.codigo3D = $$[$0-2].codigo3D + $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = "+$$[$0-2].etiqueta+" || "+$$[$0].etiqueta+";\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("||",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
        
break;
case 65:
 
            if ($$[$0-1].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                this.$ = new Object();
                this.$.tipo = 'int';
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-1].cuadruplas);
                this.$.codigo3D = $$[$0-1].codigo3D;
            }
        
break;
case 66:
 
            if ($$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                this.$ = new Object();
                this.$.tipo = 'int';
                this.$.codigo3D = $$[$0].codigo3D + res +" t"+ yy.etiquetas+" = !"+$$[$0].etiqueta+" ;\n";
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("!",$$[$0].etiqueta,null,"t"+ yy.etiquetas));
                yy.etiquetas++;
            }
        
break;
case 67:
 
            this.$ = $$[$0]; 
            var obj = new Object();
            obj.etiqueta = this.$.valor; 
            obj.tipo = this.$.tipo; 
            obj.codigo3D = ""; 
            obj.cuadruplas = [];
            this.$ = obj;
        
break;
case 68:
 
            var temp = new Object();
            temp.id = $$[$0];
            temp.arreglo = false;
            var tipo1 = yy.getTipo(temp,_$[$0].first_line,_$[$0].first_column);
            var obj = new Object();
            obj.valor = $$[$0];
            obj.respuesta = $$[$0];
            obj.tipo = tipo1;
            obj.cuadruplas = [];
            obj.codigo3D = "";
            obj.etiqueta = $$[$0];
            this.$ = obj;
        
break;
case 69:
 
            var obj = new Object();
            obj.valor = $$[$0-1];
            obj.respuesta = $$[$0-1];
            //codigo para averiguar si es arreglo y su tipo
            var temp = new Object();
            temp.id = $$[$0-1];
            temp.arreglo = true;
            var tipo1 = yy.getTipo(temp,_$[$0-1].first_line,_$[$0-1].first_column);
            //fin del codigo
            obj.tipo = tipo1;
            obj.cuadruplas = [];
            Array.prototype.push.apply(obj.cuadruplas, $$[$0].cuadruplas);
            obj.codigo3D = $$[$0].codigo3D;
            obj.codigo3D += "int t"+ yy.etiquetas+" = " +$$[$0-1]+"["+ $$[$0].etiqueta+"];\n";
            obj.cuadruplas.push(new yy.Cuadrupla("e=[]",$$[$0-1],$$[$0].etiqueta,"t"+ yy.etiquetas));
            obj.etiqueta = "t"+ yy.etiquetas;
            yy.etiquetas++;
            this.$ = obj;
        
break;
case 70:

        var tem = new Object();
        tem.id = $$[$0-5];
        tem.arreglo = false;
        var tipo = yy.getTipo(tem,_$[$0-5].first_line,_$[$0-5].first_column);
        var eti = "L"+yy.bloques;
        var sentencias = "goto "+eti+";\n";
        //codigo para cuadruplas
        tem.cuadruplas = [];
        var cut1 = [];
        var cut2 = [];
        cut1.push(new yy.Cuadrupla("goto",eti,null,null));
        cut2.push(new yy.Cuadrupla("etiqueta",eti,null,null));
        //fin codigo para cuadruplas
        var condiciones = eti+":\n";
        yy.bloques++;
        for (var i = 0; i < $$[$0-2].length; i++){
            var ca = $$[$0-2][i];
            if (ca.tipo==tipo){
                var eti2 = "L"+yy.bloques;
                cut1.push(new yy.Cuadrupla("etiqueta",eti2,null,null));
                Array.prototype.push.apply(cut1,ca.sentencias.cuadruplas);
                cut2.push(new yy.Cuadrupla("==",$$[$0-5],ca.dato,"t"+yy.etiquetas));
                cut2.push(new yy.Cuadrupla("if","t"+yy.etiquetas,eti2,null));
                yy.etiquetas++;
                yy.bloques++;
                if (i==($$[$0-2].length-1) && ($$[$0-1]==null)){
                    var te2 = ca.sentencias.cuadruplas;
                    var tiene = false;
                    for (var q = 0; q < te2.length; q++){
                        if (te2[q].operacion=="break"){
                            tiene = true;
                            break;
                        }
                    }
                    if (!tiene){
                        cut1.push(new yy.Cuadrupla("break",null,null,null));
                    }
                }
            } else {
                agregarErrores(ca.dato,"SEMANTICO","Comparación invalida entre datos "+tipo+" y "+ca.tipo,ca.linea,ca.columna);
            }
        }
        if ($$[$0-1]!=null){
            var eti3 = "L"+yy.bloques;
            cut1.push(new yy.Cuadrupla("etiqueta",eti3,null,null));
            Array.prototype.push.apply(cut1,$$[$0-1].sentencias.cuadruplas);
            cut2.push(new yy.Cuadrupla("goto",eti3,null,null));
            yy.bloques++;
            var ter2 = $$[$0-1].sentencias.cuadruplas;
            var tiene2 = false;
            for (var q = 0; q < ter2.length; q++){
                if (ter2[q].operacion=="break"){
                    tiene2 = true;
                    break;
                }
            }
            if (!tiene2){
                cut1.push(new yy.Cuadrupla("break",null,null,null));
            }
        }
        var etiFinal = "L"+yy.bloques;
        cut2.push(new yy.Cuadrupla("etiqueta",etiFinal,null,null));
        for (var p = 0; p<cut1.length; p++){
            if (cut1[p].operacion=="break" && cut1[p].argumento1==null){
                cut1[p].operacion = "goto";
                cut1[p].argumento1 = etiFinal;
            }
        }
        yy.bloques++;
        Array.prototype.push.apply(cut1,cut2);
        tem.cuadruplas = cut1;
        this.$ = tem;
    
break;
case 73:

        var obj = new Object();
        obj.tipo = $$[$0-2].tipo;
        obj.dato = $$[$0-2].valor;
        obj.sentencias = $$[$0];
        obj.linea = $$[$0-2].linea;
        obj.columna = $$[$0-2].columna;
        this.$ = obj;
    
break;
case 75:

        this.$ = new Object();
        this.$.sentencias = $$[$0];
    
break;
case 76:

        var temp = new Object();
        temp.sentencias = $$[$0-6];
        temp.condicion = $$[$0-2];
        temp.codigo3D = "";
        temp.etiqueta = "";
        temp.cuadruplas = [];
        if ($$[$0-6]!=null){
            var eti = "L"+yy.bloques;
            temp.codigo3D += eti+":\n";
            temp.codigo3D += $$[$0-6].codigo3D;
            temp.codigo3D += $$[$0-2].codigo3D+"if ("+$$[$0-2].etiqueta+") goto "+eti+";\n";
            temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti,null,null));
            Array.prototype.push.apply(temp.cuadruplas,$$[$0-6].cuadruplas);
            Array.prototype.push.apply(temp.cuadruplas,$$[$0-2].cuadruplas);
            yy.bloques++;
            var eti2 = "L"+yy.bloques;
            temp.codigo3D += eti2+":\n";
            for (var a = 0; a < temp.cuadruplas.length; a++){
                if (temp.cuadruplas[a].operacion == "break"){
                    temp.cuadruplas[a].operacion = "goto";
                    temp.cuadruplas[a].argumento1 = eti2;
                } else if (temp.cuadruplas[a].operacion == "continue"){
                    temp.cuadruplas[a].operacion = "goto";
                    temp.cuadruplas[a].argumento1 = eti;
                }
            }
            temp.cuadruplas.push(new yy.Cuadrupla("if",$$[$0-2].etiqueta,eti,null));
            temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti2,null,null));
        } else {
            temp.codigo3D ="";
        }
        this.$ = temp;
    
break;
case 77:

        var temp = new Object();
        temp.tipo_if = "if";
        temp.sentencias_if = $$[$0-1];
        temp.condicion = $$[$0-4];
        temp.cuadruplas = $$[$0-4].cuadruplas;
        if ($$[$0-1]!=null){
            var eti = "L"+yy.bloques;
            temp.codigo3D = "";
            temp.codigo3D+=$$[$0-4].codigo3D+"if (!"+$$[$0-4].etiqueta+") goto "+eti+";\n";
            temp.codigo3D+=$$[$0-1].codigo3D+""+eti+":\n";
            //codigo para cuadruplas
            temp.cuadruplas.push(new yy.Cuadrupla("ifFalse",$$[$0-4].etiqueta,eti,null));
            Array.prototype.push.apply(temp.cuadruplas,$$[$0-1].cuadruplas);
            temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti,null,null));
            //fin de codigo para cuadruplas
            yy.bloques++;
        }
        this.$ = temp;
    
break;
case 78:

        var temp = new Object();
        temp.tipo_if = "if-else";
        temp.sentencias_if = $$[$0-5];
        temp.sentencias_else = $$[$0-1];
        temp.condicion = $$[$0-8];
        temp.cuadruplas = $$[$0-8].cuadruplas;
        if ($$[$0-5]!=null){
            var eti = "L"+yy.bloques;
            temp.codigo3D = "";
            temp.codigo3D+=$$[$0-8].codigo3D+"if (!"+$$[$0-8].etiqueta+") goto "+eti+";\n";
            temp.codigo3D+=$$[$0-5].codigo3D;
            //codigo para cuadruplas
            temp.cuadruplas.push(new yy.Cuadrupla("ifFalse",$$[$0-8].etiqueta,eti,null));
            Array.prototype.push.apply(temp.cuadruplas,$$[$0-5].cuadruplas);
            //fin de codigo para cuadruplas
            yy.bloques++;
            if ($$[$0-1]!=null){
                var eti2 = "L"+yy.bloques;
                yy.bloques++;
                temp.codigo3D+="goto "+eti2+";\n";
                temp.codigo3D+=eti+":\n";
                temp.codigo3D+=$$[$0-1].codigo3D;
                temp.codigo3D+=eti2+":\n";
                //codigo para cuadruplas
                temp.cuadruplas.push(new yy.Cuadrupla("goto",eti2,null,null));
                temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti,null,null));
                Array.prototype.push.apply(temp.cuadruplas,$$[$0-1].cuadruplas);
                temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti2,null,null));
                //fin de codigo para cuadruplas
            } else {
                temp.codigo3D+=eti+":\n"
                temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti,null,null));
            }
        }
        this.$ = temp;
    
break;
case 79:

        var temp = new Object();
        temp.declaracion = $$[$0-8];
        temp.sentencias = $$[$0-1];
        temp.cambio = $$[$0-4];
        temp.condicion = $$[$0-6];
        temp.cuadruplas = $$[$0-8].cuadruplas;
        if ($$[$0-1]!=null){
            temp.codigo3D = "";
            temp.codigo3D += $$[$0-8].codigo3D;
            var eti = "L"+yy.bloques;
            yy.bloques++;
            temp.codigo3D += eti+":\n";
            var eti2 = "L"+yy.bloques;
            yy.bloques++;
            temp.codigo3D += $$[$0-6].codigo3D+"if (!"+$$[$0-6].etiqueta+") goto "+eti2+" ;\n";
            
            temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti,null,null));
            Array.prototype.push.apply(temp.cuadruplas,$$[$0-6].cuadruplas);
            temp.cuadruplas.push(new yy.Cuadrupla("ifFalse",$$[$0-6].etiqueta,eti2,null));
            Array.prototype.push.apply(temp.cuadruplas,$$[$0-1].cuadruplas);
            Array.prototype.push.apply(temp.cuadruplas,$$[$0-4].cuadruplas);
            temp.cuadruplas.push(new yy.Cuadrupla("goto",eti,null,null));
            temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti2,null,null));
            for (var a = 0; a < temp.cuadruplas.length; a++){
                if (temp.cuadruplas[a].operacion == "break"){
                    temp.cuadruplas[a].operacion = "goto";
                    temp.cuadruplas[a].argumento1 = eti2;
                } else if (temp.cuadruplas[a].operacion == "continue"){
                    temp.cuadruplas[a].operacion = "goto";
                    temp.cuadruplas[a].argumento1 = eti;
                }
            }
            temp.codigo3D += $$[$0-1].codigo3D;
            temp.codigo3D += $$[$0-4].codigo3D;
            temp.codigo3D += "goto "+eti+";\n";
            temp.codigo3D += eti2+":\n";
        } else {
            temp.codigo3D = "";
        }
        this.$ = temp;
    
break;
case 80:

        var temp = new Object();
        temp.sentencias = $$[$0-1];
        temp.condicion = $$[$0-4];
        temp.cuadruplas = [];
        if ($$[$0-1]!=null){
            var eti = "L"+yy.bloques;
            yy.bloques++;
            var eti2 = "L"+yy.bloques;
            temp.codigo3D = "";
            temp.codigo3D += eti+":\n";

            temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti,null,null));
            Array.prototype.push.apply(temp.cuadruplas,$$[$0-4].cuadruplas);
            temp.cuadruplas.push(new yy.Cuadrupla("ifFalse",$$[$0-4].etiqueta,eti2,null));
            Array.prototype.push.apply(temp.cuadruplas,$$[$0-1].cuadruplas);
            temp.cuadruplas.push(new yy.Cuadrupla("goto",eti,null,null));
            temp.cuadruplas.push(new yy.Cuadrupla("etiqueta",eti2,null,null));
            for (var a = 0; a < temp.cuadruplas.length; a++){
                if (temp.cuadruplas[a].operacion == "break"){
                    temp.cuadruplas[a].operacion = "goto";
                    temp.cuadruplas[a].argumento1 = eti2;
                } else if (temp.cuadruplas[a].operacion == "continue"){
                    temp.cuadruplas[a].operacion = "goto";
                    temp.cuadruplas[a].argumento1 = eti;
                }
            }
            temp.codigo3D+=$$[$0-4].codigo3D+"if (!"+$$[$0-4].etiqueta+") goto "+eti2+";\n";
            temp.codigo3D+=$$[$0-1].codigo3D;
            temp.codigo3D+="goto "+eti+" ;\n";
            temp.codigo3D+=eti2+":\n";
        } else {
            temp.codigo3D = "";
        }
        this.$ = temp;
    
break;
case 81:

        var temp = new Object();
        temp.tipo_cambio = "incremento";
        temp.valor = $$[$0-1];
        temp.codigo3D = "";
        temp.codigo3D += $$[$0-1] + " = " + $$[$0-1] + " + 1 ;\n";
        temp.cuadruplas = [];
        temp.cuadruplas.push(new yy.Cuadrupla("+",$$[$0-1],1,$$[$0-1]));
        this.$ = temp;
    
break;
case 82:

        var temp = new Object();
        temp.tipo_cambio = "decremento";
        temp.valor = $$[$0-1];
        temp.codigo3D = "";
        temp.codigo3D += $$[$0-1] + " = " + $$[$0-1] + " - 1 ;\n";
        temp.cuadruplas = [];
        temp.cuadruplas.push(new yy.Cuadrupla("-",$$[$0-1],1,$$[$0-1]));
        this.$ = temp;
    
break;
case 83:

        var objeto = new Object();
        objeto.id = $$[$0-2];
        objeto.tipo = "int";
        objeto.constante = false;
        objeto.tamanio = 1;
        objeto.arreglo = false;
        objeto.rol = "variable";
        objeto.codigo3D = $$[$0].codigo3D+" "+$$[$0-3]+" "+$$[$0-2]+" = "+$$[$0].etiqueta+";\n";
        objeto.etiqueta = "";
        objeto.cuadruplas = $$[$0].cuadruplas;
        objeto.cuadruplas.push(new yy.Cuadrupla("d=",$$[$0].etiqueta,null,$$[$0-2]));
        yy.addSimbolos(objeto,_$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = objeto;
    
break;
case 84:

        var objeto = new Object();
        objeto.id = $$[$0-2];
        objeto.tipo = "int";
        objeto.constante = false;
        objeto.tamanio = 1;
        objeto.arreglo = false;
        objeto.rol = "variable";
        objeto.cuadruplas = $$[$0].cuadruplas;
        objeto.cuadruplas.push(new yy.Cuadrupla("=",$$[$0].etiqueta,null,$$[$0-2]));
        objeto.codigo3D = $$[$0].codigo3D+" "+$$[$0-2]+" = "+$$[$0].etiqueta+";\n";
        objeto.etiqueta = "";
        this.$ = objeto;
    
break;
case 85:

        var objeto = new Object();
        objeto.id = $$[$0-3];
        objeto.tipo = $$[$0-4];
        objeto.constante = false;
        objeto.tamanio = 1;
        objeto.arreglo = false;
        objeto.rol = "variable";
        objeto.codigo3D = $$[$0-1].codigo3D+$$[$0-4]+" "+$$[$0-3]+" = "+$$[$0-1].etiqueta+";\n";
        objeto.etiqueta = "";
        objeto.cuadruplas = $$[$0-1].cuadruplas;
        objeto.cuadruplas.push(new yy.Cuadrupla("d=",$$[$0-1].etiqueta,null,$$[$0-3]));
        yy.addSimbolos(objeto,_$[$0-3].first_line,_$[$0-3].first_column);
        this.$ = objeto;
    
break;
case 86:

        var objeto = new Object();
        objeto.id = $$[$0-2];
        objeto.tipo = $$[$0-3];
        objeto.constante = false;
        objeto.tamanio = 1;
        objeto.arreglo = true;
        objeto.rol = "variable";
        objeto.codigo3D = $$[$0-1].codigo3D+$$[$0-3]+" "+$$[$0-2]+"["+$$[$0-1].etiqueta+"];\n";
        objeto.etiqueta = "";
        objeto.cuadruplas = $$[$0-1].cuadruplas;
        objeto.cuadruplas.push(new yy.Cuadrupla("d=[]",$$[$0-2],$$[$0-1].etiqueta,null));
        yy.addSimbolos(objeto,_$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = objeto;
    
break;
case 87:

        var temp = new Object();
        temp.codigo3D = $$[$0-1].codigo3D + $$[$0-3] + " = "+$$[$0-1].etiqueta+" ;\n";
        temp.etiqueta = "";
        temp.cuadruplas = $$[$0-1].cuadruplas;
        temp.cuadruplas.push(new yy.Cuadrupla("=",$$[$0-1].etiqueta,null,$$[$0-3]));
        console.log(temp.cuadruplas);
        this.$ = temp;
    
break;
case 88:

        var temp = new Object();
        temp.codigo3D = $$[$0-3].codigo3D+$$[$0-1].codigo3D + $$[$0-4] + "["+$$[$0-3].etiqueta+"] = "+$$[$0-1].etiqueta+" ;\n";
        temp.etiqueta = "";
        temp.cuadruplas = [];
        Array.prototype.push.apply($$[$0-3].cuadruplas, $$[$0-1].cuadruplas);
        Array.prototype.push.apply(temp.cuadruplas, $$[$0-1].cuadruplas);
        temp.cuadruplas.push(new yy.Cuadrupla("=[]",$$[$0-3].etiqueta,$$[$0-1].etiqueta,$$[$0-4]));
        console.log(temp.cuadruplas);
        this.$ = temp;
    
break;
case 91:

        Array.prototype.push.apply($$[$0-1],$$[$0]);
        this.$ = $$[$0-1];
    
break;
case 94:

        var temp = new Object();
        temp.cuadruplas = [];
        temp.cuadruplas.push(new yy.Cuadrupla("PY","TODO",null,null));
        this.$ = temp;
    
break;
case 95:

        var temp = new Object();
        temp.cuadruplas = [];
        var strs = $$[$0].split(".");
        temp.cuadruplas.push(new yy.Cuadrupla("PY","FUNCION",strs[1],strs[2]));
        this.$ = temp;
    
break;
case 96:

        var temp = new Object();
        temp.cuadruplas = [];
        temp.cuadruplas.push(new yy.Cuadrupla("JAVA","TODO",null,null));
        this.$ = temp;
    
break;
case 97:

        var temp = new Object();
        temp.cuadruplas = [];
        var strs = $$[$0].split(".");
        temp.cuadruplas.push(new yy.Cuadrupla("JAVA","ARCHIVO",strs[1],strs[2]));
        this.$ = temp;
    
break;
case 98:

        var temp = new Object();
        temp.cuadruplas = [];
        var strs = $$[$0].split(".");
        temp.cuadruplas.push(new yy.Cuadrupla("JAVA","CLASE",strs[1],null));
        this.$ = temp;
    
break;
case 99:

        var temp = new Object();
        temp.cuadruplas = [];
        var strs = $$[$0].split(".");
        temp.cuadruplas.push(new yy.Cuadrupla("JAVA","CLASES",strs[1],strs[2]));
        this.$ = temp;
    
break;
case 100: case 101:

        yy.simbolos = [];
    
break;
case 127: case 129:

        var temp = new Object();
        temp.cuadruplas = [];
        temp.cuadruplas.push("continue",null,null,null);
        this.$ = temp;
    
break;
case 128:

        var temp = new Object();
        temp.cuadruplas = [];
        temp.cuadruplas.push("break",null,null,null);
        this.$ = temp;
    
break;
case 130:
console.log("Imprime");
break;
case 149:

        var temp = new Object();
        temp.tipo = "int";
        this.$ = temp;
    
break;
case 150:

        var temp = new Object();
        temp.tipo = "float";
        this.$ = temp;
    
break;
case 151:

        var temp = new Object();
        temp.tipo = "char";
        this.$ = temp;
    
break;
case 152:

        this.$ = [];
    
break;
case 154:

        var temp = new Object();
        temp.tipo = "int";
        temp.valor = parseInt($$[$0]);
        temp.columna = _$[$0].first_column;
        temp.linea = _$[$0].first_line;
    
break;
case 155:

        var temp = new Object();
        temp.tipo = "string";
        temp.valor = $$[$0];
        temp.columna = _$[$0].first_column;
        temp.linea = _$[$0].first_line;
    
break;
case 156:

        var temp = new Object();
        temp.tipo = "float";
        temp.valor = parseInt($$[$0]);
        temp.columna = _$[$0].first_column;
        temp.linea = _$[$0].first_line;
    
break;
case 157:

        var temp = new Object();
        temp.tipo = "char";
        temp.valor = $$[$0].charAt(1);
        temp.columna = _$[$0].first_column;
        temp.linea = _$[$0].first_line;
    
break;
case 158:

        var temp = new Object();
        temp.tipo = "boolean";
        temp.valor = true;
        temp.columna = _$[$0].first_column;
        temp.linea = _$[$0].first_line;
    
break;
case 159:

        var temp = new Object();
        temp.tipo = "boolean";
        temp.valor = false;
        temp.columna = _$[$0].first_column;
        temp.linea = _$[$0].first_line;
    
break;
case 166:

        var temp = new Object();
        temp.cuadruplas = [];
    
break;
case 186:

        if ($$[$0-2].tipo == 'error' || $$[$0].tipo == 'error'){
                this.$.tipo = 'error';
            } else {
                var res = ($$[$0-2].tipo=='float' || $$[$0].tipo =='float')?'float':'int';
                this.$ = new Object();
                this.$.tipo = res;
                this.$.etiqueta = "t"+yy.etiquetas;
                this.$.cuadruplas = [];
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0-2].cuadruplas);
                Array.prototype.push.apply(this.$.cuadruplas,$$[$0].cuadruplas);
                this.$.cuadruplas.push(new yy.Cuadrupla("+",$$[$0-2].etiqueta,$$[$0].etiqueta,this.$.etiqueta));
                yy.etiquetas++;
            }
    
break;
case 187:
 this.$ = new yy.expresion_java("*",$$[$0-2],$$[$0],null,0,0);
break;
case 188:
 this.$ = new yy.expresion_java("/",$$[$0-2],$$[$0],null,0,0);
break;
case 189:
 this.$ = new yy.expresion_java("^",$$[$0-2],$$[$0],null,0,0);
break;
case 190:
 this.$ = new yy.expresion_java("%",$$[$0-2],$$[$0],null,0,0);
break;
case 191:
 this.$ = new yy.expresion_java("-",$$[$0-2],$$[$0],null,0,0);
break;
case 202:
 this.$ = $$[$0-1]; 
break;
case 203:
 this.$ = new yy.expresion_java("val",null,null,new yy.valor_java($$[$0],"identificador",0,0),0,0);
break;
case 239: case 240:

        
    
break;
}
},
table: [{2:[1,4],3:1,4:[1,2],5:[1,3]},{1:[3]},{1:[2,1]},{6:[1,5]},{4:[1,6]},{7:[1,7]},{1:[2,3]},{8:8,9:[2,206],182:[1,9]},{9:[1,10]},{2:$V0,9:[2,207],183:11,184:12,185:$V1},{2:$V2,10:15,11:[2,100],107:16,108:17,109:$V3},{2:$V0,9:[2,208],184:20,185:$V1},o($V4,[2,210]),{20:[1,21]},{189:[1,22]},{11:[1,23]},{2:$V2,11:[2,101],108:24,109:$V3},o($V5,[2,103]),{110:[1,25]},{114:[1,26]},o($V4,[2,209]),{123:[1,27]},o($V4,[2,212]),o($V6,[2,89],{12:28,97:29,98:30,99:$V7}),o($V5,[2,102]),{20:[1,32]},o($V5,[2,105]),{20:[1,35],125:[2,213],186:33,190:34},o($V8,[2,4],{13:36,16:37,17:38,18:$V9}),o($V6,[2,90],{98:40,99:$V7}),o($Va,[2,92]),{100:41,101:[1,42],102:[1,43],103:[1,44],104:[1,45],105:[1,46],106:[1,47]},{111:48,112:[2,184],177:[1,49]},{125:[1,50]},{125:[2,214]},{125:[2,216],146:[1,52],191:51},{14:53,19:56,25:54,26:55,29:$Vb,30:$Vc,31:$Vd,36:[2,10]},o($V8,[2,5],{17:60,18:$V9}),o($V6,[2,7]),{19:61,29:$Vb,30:$Vc,31:$Vd},o($Va,[2,91]),o($Va,[2,93]),o($Va,[2,94]),o($Va,[2,95]),o($Va,[2,96]),o($Va,[2,97]),o($Va,[2,98]),o($Va,[2,99]),{112:[1,62]},{20:[1,63]},{153:[1,64]},{125:[2,215]},{20:[1,65]},{15:66,36:[1,67]},{19:56,26:68,29:$Vb,30:$Vc,31:$Vd,36:[2,11]},o($V8,[2,13]),{20:[1,69]},{20:[2,18]},{20:[2,19]},{20:[2,20]},o($V6,[2,6]),{20:[1,70]},{2:$Ve,109:$Vf,113:71,114:[2,106],115:72,116:73,117:74,118:75,119:76,120:77,128:$Vg},{112:[2,185]},{182:[1,81]},{125:[2,217]},{4:[1,82]},{37:[1,83]},o($V8,[2,12]),{21:[1,84],24:85,27:$Vh},{21:[1,87],24:88,27:$Vh},{114:[1,89]},{2:$Ve,109:$Vf,114:[2,107],116:90,117:74,118:75,119:76,120:77,128:$Vg},o($Vi,[2,109]),o($Vi,[2,110]),o($Vi,[2,111]),o($Vi,[2,112]),{121:91,127:[1,92],170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},o($Vo,[2,116],{20:[1,98]}),{114:[1,99]},o($Vo,[2,117]),{187:[1,100]},{1:[2,2]},{38:[1,101]},{20:$Vp,22:102,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{23:[1,111],27:$Vw},{20:$Vp,22:113,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:114,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{23:[1,115],27:$Vw},o($V5,[2,104]),o($Vi,[2,108]),{20:[1,116]},{20:[1,117]},{20:[2,179]},{20:[2,180]},{20:[2,181]},{20:[2,182]},{20:[2,183]},{123:[1,118]},o($Vi,[2,173]),{2:$Vx,20:$Vy,90:$Vz,143:$VA,145:$VB,165:$VC,168:$VD,188:119,192:120,194:121,195:122,196:123,197:124,198:125},{39:[1,133]},{23:[1,134],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},{20:$Vp,22:146,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:147,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:148,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},o($VP,[2,67]),o($VP,[2,68],{24:149,27:$Vh}),o($VQ,[2,21]),o($VQ,[2,22]),o($VQ,[2,23]),o($V8,[2,15]),{20:$Vp,22:150,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{28:[1,151],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},{23:[1,152],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},o($V6,[2,9]),{122:[1,153],123:[1,154]},{123:[1,155]},{121:159,124:156,125:$VR,170:$Vj,171:157,172:158,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{189:[1,160]},{2:$Vx,20:$Vy,90:$Vz,143:$VA,145:$VB,165:$VC,168:$VD,188:162,189:[2,219],192:120,193:161,194:121,195:122,196:123,197:124,198:125},o($VS,[2,221]),o($VS,[2,222]),o($VS,[2,223]),o($VS,[2,224]),o($VS,[2,225]),{182:[1,163]},{156:[1,164]},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:165},{20:[1,176]},{123:[1,177]},{123:[1,178]},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:179},{40:[1,180]},o($V8,[2,14]),{20:$Vp,22:181,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:182,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:183,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:184,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:185,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:186,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:187,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:188,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:189,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:190,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:191,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},o($VP,[2,58]),{39:[1,192],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},o($VP,[2,66]),o($VP,[2,69],{27:$Vw}),{28:[1,193],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},o($V11,[2,17]),o($V6,[2,8]),o($Vi,[2,113]),{121:159,124:194,125:$VR,170:$Vj,171:157,172:158,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{121:159,124:195,125:$VR,170:$Vj,171:157,172:158,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{125:[1,196]},{125:[2,175],146:[1,197]},o($V21,[2,177]),{20:[1,198]},o($V4,[2,211]),{189:[2,218]},{189:[2,220]},o($VS,[2,226]),{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:199,201:[1,200]},{69:$V31,70:$V41,71:$V51,72:$V61,73:$V71,74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,153:[1,201],178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:216},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:217},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:218},o($Vh1,[2,263]),o($Vh1,[2,264]),o($Vh1,[2,265]),o($Vh1,[2,266]),o($Vh1,[2,267]),o($Vh1,[2,268]),o($Vh1,[2,269]),{202:[1,219]},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,199:220,200:221},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,199:222,200:221},{69:$V31,70:$V41,71:$V51,72:$V61,73:$V71,74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,153:[1,223],178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1},{2:$Vi1,19:244,20:$Vj1,29:$Vb,30:$Vc,31:$Vd,41:224,42:$Vk1,43:225,44:226,45:227,46:228,47:239,48:240,49:241,50:242,51:229,52:230,53:$Vl1,54:$Vm1,55:$Vn1,56:$Vo1,57:$Vp1,61:236,62:237,64:$Vq1,81:$Vr1,88:$Vs1,89:$Vt1,90:$Vu1,92:$Vv1},o($Vw1,[2,53],{70:$VF,71:$VG,72:$VH,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($Vx1,[2,54],{74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($Vx1,[2,55],{74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($Vx1,[2,56],{74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($Vw1,[2,57],{70:$VF,71:$VG,72:$VH,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($VP,[2,59]),o($VP,[2,60]),o($VP,[2,61]),o($VP,[2,62]),o([23,28,39,69,70,71,72,73,78,79],[2,63],{74:$VJ,75:$VK,76:$VL,77:$VM}),o([23,28,39,69,70,71,72,73,79],[2,64],{74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN}),o($VP,[2,65]),o($V11,[2,16]),{125:[1,251]},{125:[1,252]},{112:[1,253]},{121:159,170:$Vj,172:254,173:$Vk,174:$Vl,175:$Vm,176:$Vn},o($V21,[2,178]),{69:$V31,70:$V41,71:$V51,72:$V61,73:$V71,74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1,182:[1,255]},{123:[1,256]},{182:[1,257]},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:258},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:259},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:260},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:261},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:262},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:263},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:264},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:265},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:266},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:267},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:268},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:269},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:270},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:271},o($Vh1,[2,252]),o($Vh1,[2,255]),{69:$V31,70:$V41,71:$V51,72:$V61,73:$V71,74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,125:[1,272],178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1},{203:[1,273]},{125:[1,274],146:$Vy1},o($V21,[2,230],{69:$V31,70:$V41,71:$V51,72:$V61,73:$V71,74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1}),{125:[1,276],146:$Vy1},{182:[1,277]},{42:[1,278]},o($Vz1,[2,26],{45:227,46:228,51:229,52:230,61:236,62:237,47:239,48:240,49:241,50:242,19:244,44:279,2:$Vi1,20:$Vj1,29:$Vb,30:$Vc,31:$Vd,53:$Vl1,54:$Vm1,55:$Vn1,56:$Vo1,57:$Vp1,64:$Vq1,81:$Vr1,88:$Vs1,89:$Vt1,90:$Vu1,92:$Vv1}),o($VA1,[2,28]),o($VA1,[2,29]),o($VA1,[2,30]),o($VA1,[2,36]),o($VA1,[2,37]),{23:[1,280]},{23:[1,281]},{38:[1,282]},{38:[1,283]},{38:[1,284]},o($VA1,[2,43]),o($VA1,[2,44]),{23:[1,285],42:[1,286]},o($VA1,[2,31]),o($VA1,[2,32]),o($VA1,[2,33]),o($VA1,[2,34]),{21:[1,287],24:288,27:$Vh},{20:[1,289]},{38:[1,290]},{40:[1,291]},{38:[1,292]},{38:[1,293]},{38:[1,294]},{38:[1,295]},{112:[1,296]},{112:[1,297]},{2:$VB1,20:$VC1,90:$VD1,114:$VE1,121:314,126:298,129:299,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},o($V21,[2,176]),o($VS,[2,231]),{125:[1,322]},{187:[1,323]},o($VO1,[2,246],{70:$V41,71:$V51,72:$V61,74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1}),o($VP1,[2,247],{74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1}),o($VP1,[2,248],{74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1}),o([69,70,71,72,73,125,146,153,178,182],[2,249],{74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,179:$Ve1,180:$Vf1,181:$Vg1}),o($VP1,[2,250],{74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1}),o($VO1,[2,251],{70:$V41,71:$V51,72:$V61,74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1}),o([69,70,71,72,73,78,79,125,146,153,178,182],[2,253],{74:$V81,75:$V91,76:$Va1,179:$Ve1,180:$Vf1,181:$Vg1}),o([69,70,71,72,73,79,125,146,153,178,182],[2,254],{74:$V81,75:$V91,76:$Va1,78:$Vb1,179:$Ve1,180:$Vf1,181:$Vg1}),o($Vh1,[2,256]),o($Vh1,[2,257]),o($Vh1,[2,258]),o($Vh1,[2,259]),o($Vh1,[2,260]),o($Vh1,[2,261]),o($Vh1,[2,262]),{123:[1,324]},{182:[1,325]},{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:326},{182:[1,327]},{187:[1,328]},{4:[2,24]},o($VA1,[2,27]),o($VA1,[2,38]),o($VA1,[2,39]),{39:[1,329]},{39:[1,330]},{58:331,66:$VQ1,67:$VR1,68:$VS1},o($VA1,[2,45]),o($VA1,[2,35]),{20:$Vp,22:335,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{21:[1,336],27:$Vw},{21:[1,337],24:338,27:$Vh},{58:339,65:[1,340],66:$VQ1,67:$VR1,68:$VS1},{2:$Vi1,19:244,20:$Vj1,29:$Vb,30:$Vc,31:$Vd,41:341,42:$Vk1,43:225,44:226,45:227,46:228,47:239,48:240,49:241,50:242,51:229,52:230,53:$Vl1,54:$Vm1,55:$Vn1,56:$Vo1,57:$Vp1,61:236,62:237,64:$Vq1,81:$Vr1,88:$Vs1,89:$Vt1,90:$Vu1,92:$Vv1},{20:$Vp,22:342,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:[1,345],29:[1,344],93:343},{20:$Vp,22:346,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:[1,347]},{2:$VB1,20:$VC1,90:$VD1,114:$VE1,121:314,126:348,129:299,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{2:$VB1,20:$VC1,90:$VD1,114:$VE1,121:314,126:349,129:299,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{114:[1,350]},{2:$VB1,20:$VC1,90:$VD1,114:[2,171],121:314,130:351,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},o($VT1,[2,119]),o($VT1,[2,120]),o($VT1,[2,121]),o($VT1,[2,122]),o($VT1,[2,123]),o($VT1,[2,124]),o($VT1,[2,125]),o($VT1,[2,126]),{122:[1,352]},{122:[1,353]},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:354,162:359,163:$V02,164:$V12},o($VT1,[2,130]),{122:[1,366]},{123:[1,367]},{20:[1,368]},{123:[1,369]},{123:[1,370]},{112:[1,371]},{95:[1,374],96:[1,375],156:[1,372],158:[1,373]},{123:[1,376]},{123:[1,377]},{123:[1,378]},{182:[1,379]},{2:$Vx,20:$Vy,90:$Vz,143:$VA,145:$VB,165:$VC,168:$VD,188:380,192:120,194:121,195:122,196:123,197:124,198:125},{125:[1,381]},o($VS,[2,227]),o($V21,[2,229],{69:$V31,70:$V41,71:$V51,72:$V61,73:$V71,74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1}),o($VS,[2,228]),{2:$Vx,20:$Vy,90:$Vz,143:$VA,145:$VB,165:$VC,168:$VD,188:382,192:120,194:121,195:122,196:123,197:124,198:125},{23:[1,383]},{23:[1,384]},{59:[1,385]},{59:[2,50]},{59:[2,51]},{59:[2,52]},{23:[1,386],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},{20:$Vp,22:387,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{20:$Vp,22:388,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{23:[1,389],27:$Vw},{59:[1,390]},{39:[1,391]},{42:[1,392]},{39:[1,393],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},{23:[1,394]},{20:[1,395]},{21:[1,396]},{39:[1,397],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},{39:[1,398]},{114:[1,399]},{114:[1,400]},o($Vi,[2,172]),o($VT1,[2,118]),o($VT1,[2,127]),o($VT1,[2,128]),{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,122:[1,401],178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:416,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:417,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:418,162:359,163:$V02,164:$V12},o($Vg2,[2,203],{123:[1,419]}),o($Vg2,[2,204]),o($Vg2,[2,154]),o($Vg2,[2,155]),o($Vg2,[2,156]),o($Vg2,[2,157]),o($Vg2,[2,158]),o($Vg2,[2,159]),o($VT1,[2,131]),{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:420,162:359,163:$V02,164:$V12},{122:[2,152],155:421,156:[1,422]},{20:[1,425],166:423,170:[1,424]},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:426,162:359,163:$V02,164:$V12},{2:$VB1,20:$VC1,90:$VD1,114:$VE1,121:314,126:427,129:299,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:428,157:429,159:$Vh2,160:$Vi2,161:$Vj2,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:433,162:359,163:$V02,164:$V12},{122:[1,434]},{122:[1,435]},{20:[1,436]},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:438,144:437,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:438,144:439,162:359,163:$V02,164:$V12},o($VS,[2,232]),{189:[1,440]},{153:[1,441]},{189:[1,442]},o($VA1,[2,40]),o($VA1,[2,41]),{60:[1,443]},o($VA1,[2,87]),{23:[1,444],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},{23:[1,445],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},o($VA1,[2,86]),{20:[1,447],63:446},{23:[1,448]},{89:[1,449]},{40:[1,450]},{20:$Vp,22:451,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{21:[1,452]},{20:$Vp,22:453,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{40:[1,454]},{40:[1,455]},o($Vi,[2,114]),o($Vi,[2,115]),o($VT1,[2,129]),{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:456,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:457,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:458,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:459,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:460,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:461,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:462,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:463,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:464,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:465,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:466,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:467,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:468,162:359,163:$V02,164:$V12},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:469,162:359,163:$V02,164:$V12},o($Vg2,[2,192]),o($Vg2,[2,195]),{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,125:[1,470],178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2},{125:[1,471]},{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,125:[1,472],178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2},{122:[1,473]},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:475,157:474,159:$Vh2,160:$Vi2,161:$Vj2,162:359,163:$V02,164:$V12},{122:[1,476]},{20:[1,477]},{156:[1,478]},{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,125:[1,479],178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2},{114:[1,480]},{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,122:[1,481],178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2},{123:[1,482]},{123:[2,149]},{123:[2,150]},{123:[2,151]},{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,122:[1,483],178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2},o($VT1,[2,146]),o($VT1,[2,147]),{125:[1,484]},{125:[1,485],146:$Vk2},o($V21,[2,135],{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2}),{125:[1,487],146:$Vk2},o($VS,[2,239],{204:488,205:490,91:[1,489],206:$Vl2}),{182:[1,492]},o($VS,[2,238]),{39:[1,493]},o($VA1,[2,88]),o($VA1,[2,85]),{39:[1,494],59:[1,495]},o($Vm2,[2,47]),o($VA1,[2,49]),{38:[1,496]},{2:$Vi1,19:244,20:$Vj1,29:$Vb,30:$Vc,31:$Vd,41:497,42:$Vk1,43:225,44:226,45:227,46:228,47:239,48:240,49:241,50:242,51:229,52:230,53:$Vl1,54:$Vm1,55:$Vn1,56:$Vo1,57:$Vp1,61:236,62:237,64:$Vq1,81:$Vr1,88:$Vs1,89:$Vt1,90:$Vu1,92:$Vv1},{23:[1,498],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},{20:$Vp,22:499,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{23:[2,84],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},{2:$Vi1,19:244,20:$Vj1,29:$Vb,30:$Vc,31:$Vd,41:500,42:$Vk1,43:225,44:226,45:227,46:228,47:239,48:240,49:241,50:242,51:229,52:230,53:$Vl1,54:$Vm1,55:$Vn1,56:$Vo1,57:$Vp1,61:236,62:237,64:$Vq1,81:$Vr1,88:$Vs1,89:$Vt1,90:$Vu1,92:$Vv1},{82:501,84:502,85:$Vn2},o($Vo2,[2,186],{70:$V32,71:$V42,72:$V52,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2}),o($Vp2,[2,187],{74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2}),o($Vp2,[2,188],{74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2}),o([69,70,71,72,73,122,125,146,178],[2,189],{74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,179:$Vd2,180:$Ve2,181:$Vf2}),o($Vp2,[2,190],{74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2}),o($Vo2,[2,191],{70:$V32,71:$V42,72:$V52,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2}),o([69,70,71,72,73,78,79,122,125,146,178],[2,193],{74:$V72,75:$V82,76:$V92,179:$Vd2,180:$Ve2,181:$Vf2}),o([69,70,71,72,73,79,122,125,146,178],[2,194],{74:$V72,75:$V82,76:$V92,78:$Va2,179:$Vd2,180:$Ve2,181:$Vf2}),o($Vg2,[2,196]),o($Vg2,[2,197]),o($Vg2,[2,198]),o($Vg2,[2,199]),o($Vg2,[2,200]),o($Vg2,[2,201]),o($Vg2,[2,202]),o($Vg2,[2,205]),{112:[1,504]},o($VT1,[2,142]),{123:[1,505]},{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,122:[2,153],178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:506,162:359,163:$V02,164:$V12},{156:[1,507]},{29:[1,508]},{112:[1,509]},{168:[1,510]},o($VT1,[2,144]),{125:[1,511]},o($VT1,[2,145]),{112:[1,512]},{122:[1,513]},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:514,162:359,163:$V02,164:$V12},{122:[1,515]},o($VS,[2,240]),{153:[1,516]},o($VS,[2,243],{91:[1,517]}),{20:$VT,29:$VU,30:$VV,31:$VW,65:$VX,73:$VY,80:$VZ,123:$V_,163:$V$,164:$V01,200:518},{187:[1,519]},{23:[1,520]},{23:[1,521]},{20:[1,522]},{20:$Vp,22:523,32:106,33:$Vq,34:$Vr,35:$Vs,38:$Vt,73:$Vu,80:$Vv},{42:[1,524]},{20:[1,526],94:525},{23:[2,83],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},{42:[1,527]},{42:[2,74],83:528,84:529,85:$Vn2,87:[1,530]},o($Vz1,[2,72]),{32:531,33:$Vq,34:$Vr,35:$Vs},{2:$VB1,20:$VC1,90:$VD1,114:$VE1,121:314,126:532,129:299,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{125:[1,533]},{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,122:[1,534],178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2},{29:[1,535]},{122:[2,167]},{2:$VB1,20:$VC1,90:$VD1,114:$VE1,121:314,126:536,129:299,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{123:[1,537]},{122:[1,538]},{148:539,150:540,151:$Vq2},o($VT1,[2,132]),o($V21,[2,134],{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2}),o($VT1,[2,133]),{182:[1,542]},{153:[1,543]},{69:$V31,70:$V41,71:$V51,72:$V61,73:$V71,74:$V81,75:$V91,76:$Va1,78:$Vb1,79:$Vc1,153:[1,544],178:$Vd1,179:$Ve1,180:$Vf1,181:$Vg1},{2:$Vx,20:$Vy,90:$Vz,143:$VA,145:$VB,165:$VC,168:$VD,188:545,192:120,194:121,195:122,196:123,197:124,198:125},o($VA1,[2,42]),o($VA1,[2,48]),o($Vm2,[2,46]),{39:[1,546],69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},o($VA1,[2,77],{91:[1,547]}),{39:[1,548]},{95:[1,549],96:[1,550]},o($VA1,[2,80]),{42:[1,551]},o($Vz1,[2,71]),{86:[1,552]},{86:[1,553]},{114:[1,554]},{122:[1,555]},{20:[1,557],167:556},{122:[2,166]},{114:[1,558]},{20:$VU1,29:$VV1,30:$VW1,31:$VX1,65:$VY1,73:$VZ1,80:$V_1,123:$V$1,141:559,162:359,163:$V02,164:$V12},o($VT1,[2,148]),{114:[2,140],149:560,150:561,151:$Vq2,154:[1,562]},o($Vr2,[2,138]),{29:[1,566],30:[1,567],31:[1,565],65:[1,564],152:563},{187:[1,568]},{182:[1,569]},{182:[1,570]},{189:[1,571]},{23:[1,572]},{40:[1,573]},{40:[1,574]},{39:[2,81]},{39:[2,82]},o($VA1,[2,70]),{2:$Vi1,19:244,20:$Vj1,29:$Vb,30:$Vc,31:$Vd,41:575,42:$Vk1,43:225,44:226,45:227,46:228,47:239,48:240,49:241,50:242,51:229,52:230,53:$Vl1,54:$Vm1,55:$Vn1,56:$Vo1,57:$Vp1,61:236,62:237,64:$Vq1,81:$Vr1,88:$Vs1,89:$Vt1,90:$Vu1,92:$Vv1},o($Vz1,$Vk1,{43:225,44:226,45:227,46:228,51:229,52:230,61:236,62:237,47:239,48:240,49:241,50:242,19:244,41:576,2:$Vi1,20:$Vj1,29:$Vb,30:$Vc,31:$Vd,53:$Vl1,54:$Vm1,55:$Vn1,56:$Vo1,57:$Vp1,64:$Vq1,81:$Vr1,88:$Vs1,89:$Vt1,90:$Vu1,92:$Vv1}),o($VT1,[2,160],{91:[1,577]}),o($VT1,[2,143]),{125:[1,578]},{95:[1,579],96:[1,580]},o($VT1,[2,164]),{69:$V22,70:$V32,71:$V42,72:$V52,73:$V62,74:$V72,75:$V82,76:$V92,78:$Va2,79:$Vb2,125:[1,581],178:$Vc2,179:$Vd2,180:$Ve2,181:$Vf2},{114:[1,582]},o($Vr2,[2,137]),{153:[1,583]},{153:[1,584]},{153:[2,233]},{153:[2,234]},{153:[2,235]},{153:[2,236]},{2:$Vx,20:$Vy,90:$Vz,143:$VA,145:$VB,165:$VC,168:$VD,188:585,192:120,194:121,195:122,196:123,197:124,198:125},{187:[1,586]},{187:[1,587]},o($VS,[2,237]),o($VA1,[2,76]),{2:$Vi1,19:244,20:$Vj1,29:$Vb,30:$Vc,31:$Vd,41:588,42:$Vk1,43:225,44:226,45:227,46:228,47:239,48:240,49:241,50:242,51:229,52:230,53:$Vl1,54:$Vm1,55:$Vn1,56:$Vo1,57:$Vp1,61:236,62:237,64:$Vq1,81:$Vr1,88:$Vs1,89:$Vt1,90:$Vu1,92:$Vv1},{2:$Vi1,19:244,20:$Vj1,29:$Vb,30:$Vc,31:$Vd,41:589,42:$Vk1,43:225,44:226,45:227,46:228,47:239,48:240,49:241,50:242,51:229,52:230,53:$Vl1,54:$Vm1,55:$Vn1,56:$Vo1,57:$Vp1,61:236,62:237,64:$Vq1,81:$Vr1,88:$Vs1,89:$Vt1,90:$Vu1,92:$Vv1},{42:[2,75]},o($Vz1,[2,73]),{90:$VD1,112:[1,590],131:591},{112:[1,592]},{125:[2,168]},{125:[2,169]},{122:[1,593]},o($VT1,[2,136]),{2:$VB1,20:$VC1,90:$VD1,121:314,129:594,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{2:$VB1,20:$VC1,90:$VD1,121:314,129:595,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},{189:[1,596]},{2:$Vx,20:$Vy,90:$Vz,143:$VA,145:$VB,165:$VC,168:$VD,188:597,192:120,194:121,195:122,196:123,197:124,198:125},{2:$Vx,20:$Vy,90:$Vz,143:$VA,145:$VB,165:$VC,168:$VD,188:598,192:120,194:121,195:122,196:123,197:124,198:125},{42:[1,599]},{42:[1,600]},{2:$VB1,20:$VC1,90:$VD1,114:$VE1,121:314,126:601,129:299,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},o($VT1,[2,162]),{2:$VB1,20:$VC1,90:$VD1,114:$VE1,121:314,126:602,129:299,130:300,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},o($VT1,[2,165]),{2:$VB1,20:$VC1,90:$VD1,114:[2,141],121:314,130:351,131:301,132:302,133:303,134:304,135:305,136:306,137:307,138:$VF1,139:$VG1,140:$VH1,142:311,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn},o($Vr2,[2,139],{131:301,132:302,133:303,134:304,135:305,136:306,137:307,142:311,121:314,130:351,2:$VB1,20:$VC1,90:$VD1,138:$VF1,139:$VG1,140:$VH1,143:$VI1,145:$VJ1,147:$VK1,165:$VL1,168:$VM1,169:$VN1,170:$Vj,173:$Vk,174:$Vl,175:$Vm,176:$Vn}),o($VS,[2,241]),{189:[1,603]},{189:[1,604]},o($VA1,[2,78]),o($VA1,[2,79]),{114:[1,605]},{114:[1,606]},o($VS,[2,242]),o($Vs2,[2,244],{205:607,206:$Vl2}),o($VT1,[2,161]),o($VT1,[2,163]),o($Vs2,[2,245])],
defaultActions: {2:[2,1],6:[2,3],34:[2,214],51:[2,215],57:[2,18],58:[2,19],59:[2,20],63:[2,185],65:[2,217],82:[2,2],93:[2,179],94:[2,180],95:[2,181],96:[2,182],97:[2,183],161:[2,218],162:[2,220],278:[2,24],332:[2,50],333:[2,51],334:[2,52],430:[2,149],431:[2,150],432:[2,151],508:[2,167],535:[2,166],549:[2,81],550:[2,82],564:[2,233],565:[2,234],566:[2,235],567:[2,236],575:[2,75],579:[2,168],580:[2,169]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
        agregarErrores(hash.text,"SINTACTICO","Esperaba "+hash.expected.toString(),hash.line+1,(hash.loc.first_column+1)+"-"+(hash.loc.last_column+1));
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 var indents = [0], indent = 0, indent_actual = 0, dedents = 0, val_actual = "" 
var errores = [];
var conteo_errores= 0;

function agregarErrores(valor,tipo,razon,linea,columna){
    errores.push({valor:valor,tipo:tipo,razon:razon,linea:linea,columna:columna});
    conteo_errores++;
}

function soloNumeros(dato){
    if (dato.tipo=="char"){
        dato.valor = dato.valor.charCodeAt(0);
        dato.tipo = "int";
        return dato;
    } else {
        return dato;
    }
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {  
    if (!('codigo3D' in yy)){ yy.codigo3D = "#include <stdio.h>\nstruct dato {\n\tint tipo;\n\tint intv;\n\tchar charv;\n\tfloat floatv;\n};\nstruct dato stack[100];\n\t"; }
    if (!('etiquetas' in yy)){ yy.etiquetas = 0; } 
    if (!('bloques' in yy)){ yy.bloques = 0; } 
    if (!('bloques_codes' in yy)){ yy.bloques_codes = 0; } 
    if (!('simbolos' in yy)){ yy.simbolos = []; } 
    if (!('idsSimbolos' in yy)){ yy.idsSimbolos = []; } 
    if (!('addSimbolos' in yy)){ yy.addSimbolos = function(simbolo,linea,columna){
        if (yy.idsSimbolos.includes(simbolo.id)){
            agregarErrores(simbolo.id,"SEMANTICO","Ya has declarado la variable",linea,columna);
        } else {
            yy.simbolos.push(simbolo);
            yy.idsSimbolos.push(simbolo.id);
        }
    }} 
    if (!('getTipo' in yy)){ yy.getTipo = function(simbolo,linea,columna){
        if (yy.idsSimbolos.includes(simbolo.id)){
            for (var i = 0; i < yy.simbolos.length; i++){
                if (yy.simbolos[i].id == simbolo.id){
                    if (yy.simbolos[i].arreglo == simbolo.arreglo){
                        return yy.simbolos[i].tipo;
                    } else {
                        var es = (simbolo.arreglo)?"El arreglo que solicitas es una variable normal":"La variable que solicitas es un arreglo";
                        agregarErrores(simbolo.id,"SEMANTICO",es,linea,columna);
                        return 'error';
                    }
                }
            }
        } else {
            agregarErrores(simbolo.id,"SEMANTICO","No has declarado la variable",linea,columna);
            return 'error';
        }
    }} 

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: console.log("eninicio"); 
break;
case 1: console.log("tabulacion"); 
break;
case 2: return 5; 
break;
case 3: return 6; 
break;
case 4: this.begin("PYTHON"); return 7; 
break;
case 5: /*espacios en blanco*/ 
break;
case 6: /*tabulacion*/ 
break;
case 7: indent_actual = 0; this.begin("INDENT"); return 182; 
break;
case 8: this.begin("JAVA"); return 9 
break;
case 9: return 90; 
break;
case 10: return 91; 
break;
case 11: return 206; 
break;
case 12: return 158; 
break;
case 13: return 95; 
break;
case 14: return 96; 
break;
case 15: return 69; 
break;
case 16: return 73; 
break;
case 17: return 70; 
break;
case 18: return 71; 
break;
case 19: return 178; 
break;
case 20: return 72; 
break;
case 21: return 78; 
break;
case 22: return 79; 
break;
case 23: return 80; 
break;
case 24: return 156; 
break;
case 25: return 76; 
break;
case 26: return 179; 
break;
case 27: return 74; 
break;
case 28: return 180; 
break;
case 29: return 75; 
break;
case 30: return 181; 
break;
case 31: return yy_.yytext; 
break;
case 32: return 29; 
break;
case 33: return 31; 
break;
case 34: return 65; 
break;
case 35: return 30; 
break;
case 36: return 20; 
break;
case 37: indent_actual += 1; 
break;
case 38: /* espacios en blanco */ 
break;
case 39: indent_actual = 0; 
break;
case 40: 
                                            var posible = indent - indent_actual;
                                            this.unput(yy_.yytext);
                                            if (posible==-1){
                                                indent = indent_actual;
                                                this.begin('PYTHON');
                                                return 187;
                                            } else if (posible > 0){
                                                indent = indent_actual;
                                                dedents = posible;
                                                this.begin('DEDENT');
                                            } else if (posible==0){
                                                dedents = 0;
                                                this.begin('PYTHON');
                                            } else {
                                                var cuantos = (posible*-1)-1;
                                                console.log("Sobran "+cuantos+" indents");
                                                console.log("."+yy_.yytext+".");
                                                this.begin('PYTHON');
                                                indent++;
                                                return 187;
                                            } 
                                        
break;
case 41:
                                            this.unput(yy_.yytext);
                                            if (dedents!=0){
                                                dedents--;
                                                return 189;
                                            } else {
                                                this.begin("PYTHON");
                                            }
                                        
break;
case 42: /*nada*/ 
break;
case 43: this.begin("PROGRAMA"); return 11; 
break;
case 44: return 90; 
break;
case 45: return 91; 
break;
case 46: return 158; 
break;
case 47: return 95; 
break;
case 48: return 96; 
break;
case 49: return 69; 
break;
case 50: return 73; 
break;
case 51: return 70; 
break;
case 52: return 71; 
break;
case 53: return 178; 
break;
case 54: return 72; 
break;
case 55: return 78; 
break;
case 56: return 79; 
break;
case 57: return 80; 
break;
case 58: return 156; 
break;
case 59: return 76; 
break;
case 60: return 179; 
break;
case 61: return 74; 
break;
case 62: return 180; 
break;
case 63: return 75; 
break;
case 64: return 181; 
break;
case 65: return yy_.yytext; 
break;
case 66: return 31; 
break;
case 67: return 29; 
break;
case 68: return 65; 
break;
case 69: return 30; 
break;
case 70: return 20; 
break;
case 71: /*nada*/ 
break;
case 72: return 99; 
break;
case 73: return 101; 
break;
case 74: 
    var prueba = yy_.yytext.substring(1,yy_.yytext.length-1);
    yy_.yytext = prueba;
    return 102; 
    
break;
case 75: 
    var prueba = yy_.yytext.substring(1,yy_.yytext.length-1);
    yy_.yytext = prueba;
     return 103; 
break;
case 76:  
    var prueba = yy_.yytext.substring(1,yy_.yytext.length-1);
    yy_.yytext = prueba;
    return 104; 
break;
case 77:  
    var prueba = yy_.yytext.substring(1,yy_.yytext.length-1);
    yy_.yytext = prueba;
    return 106; 
break;
case 78:  
    var prueba = yy_.yytext.substring(1,yy_.yytext.length-1);
    yy_.yytext = prueba;
    return 105; 
break;
case 79: return 37; 
break;
case 80: return 36; 
break;
case 81: return 86; 
break;
case 82: return 38; 
break;
case 83: return 21; 
break;
case 84: return 39; 
break;
case 85: return 40; 
break;
case 86: return 42; 
break;
case 87: return 27; 
break;
case 88: return 28; 
break;
case 89: return 95; 
break;
case 90: return 69; 
break;
case 91: return 96; 
break;
case 92: return 73; 
break;
case 93: return 70; 
break;
case 94: this.begin('BLOQUE_COMENTARIO'); 
break;
case 95: this.begin("COMENTARIO"); 
break;
case 96: this.begin('PROGRAMA'); 
break;
case 97: /*agregarErrores(yy_.yytext,'COMENTARIO BLOQUE','COMENTARIO',yy_.yylineno,0);*/ 
break;
case 98: this.begin('PROGRAMA'); 
break;
case 99: /*agregarErrores(yy_.yytext,'COMENTARIO','COMENTARIO',yy_.yylineno,0);*/ 
break;
case 100: return 71; 
break;
case 101: return 72; 
break;
case 102: return 78; 
break;
case 103: return 79; 
break;
case 104: return 75; 
break;
case 105: return 74; 
break;
case 106: return 76; 
break;
case 107: return 77; 
break;
case 108: return 80; 
break;
case 109: return 18; 
break;
case 110: return 29; 
break;
case 111: return 31; 
break;
case 112: return 30; 
break;
case 113: return 90; 
break;
case 114: return 91; 
break;
case 115: return 89; 
break;
case 116: return 88; 
break;
case 117: return 92; 
break;
case 118: return 54; 
break;
case 119: return 53; 
break;
case 120: return 57; 
break;
case 121: return 64; 
break;
case 122: return 85; 
break;
case 123: return 81; 
break;
case 124: return 87; 
break;
case 125: return 55; 
break;
case 126: return 56; 
break;
case 127: return 35; 
break;
case 128: return 33; 
break;
case 129: return 34; 
break;
case 130: 
    var prueba = yy_.yytext.substring(1,yy_.yytext.length-1);
    yy_.yytext = prueba;
    if (yy_.yytext.includes('%c')){
        return 67;
    } else if (yy_.yytext.includes('%d')){
        return 66;
    } else if (yy_.yytext.includes('%f')){
        return 68;
    } else {
        return 65;
    } 
break;
case 131: return 60; 
break;
case 132: return 20; 
break;
case 133: return 23; 
break;
case 134: return 59; 
break;
case 135: return 4; 
break;
}
},
rules: [/^(?:[\ \n\r]+)/,/^(?:[\t])/,/^(?:paquete\b)/,/^(?:(((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)(\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))?))/,/^(?:(%%PYTHON\b))/,/^(?:[\ ]+)/,/^(?:\t)/,/^(?:(\r?\n)+)/,/^(?:(%%JAVA\b))/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:((continue|finally|return|global|assert|except|import|lambda|raise|class|print|break|while|yield|from|elif|else|with|pass|exec|and|del|not|def|for|try|as|or|if|input|in|is|range|true|false\b)|(>>=|<<=|\*\*=|\/\/=|\+=|-=|\*=|\/=|%=|&=|\|=|\^=|\*\*|\/\/|<<|>>|<=|>=|==|!=|<>|\+|-|\*|\/|%|&|\||\^|~|<|>|\(|\)|\[|\]|\{|\}|@|,|:|\.|`|=|;|'|\|\|")))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:("(([^\\\n\"])|(\\.))*"))/,/^(?:('(([^\\\n\'])|(\\.))*'))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:\t)/,/^(?: )/,/^(?:(\r?\n)+)/,/^(?:.)/,/^(?:.)/,/^(?:[\ \n\t\s\r]+)/,/^(?:%%PROGRAMA\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:(public|private|class|extends|intinput|floatinput|charinput|int|String|char|float|boolean|true|false|else|while|for|do|break|continue|return|\(|\)|\{|\}|,|:|;|,|void|case|switch|default|println|print\b))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:("(([^\\\n\"])|(\\.))*"))/,/^(?:'.')/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:[\ \n\t\s\r]+)/,/^(?:#include\b)/,/^(?:"PY")/,/^(?:"PY\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)")/,/^(?:"JAVA\.\*")/,/^(?:"JAVA\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)")/,/^(?:"JAVA\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)\.\*")/,/^(?:"JAVA\.((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*)")/,/^(?:main\b)/,/^(?:void\b)/,/^(?::)/,/^(?:\()/,/^(?:=)/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/\*)/,/^(?:\/\/)/,/^(?:[\n])/,/^(?:[^\n]+)/,/^(?:\*\/)/,/^(?:[^'*/']+)/,/^(?:\/)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:const\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:scanf\b)/,/^(?:printf\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:clrscr\b)/,/^(?:getch\b)/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:'.')/,/^(?:("(([^\\\n\"])|(\\.))*"))/,/^(?:&((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:;)/,/^(?:,)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,135],"inclusive":true},"PYTHON":{"rules":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,135],"inclusive":true},"DEDENT":{"rules":[41,135],"inclusive":true},"INDENT":{"rules":[37,38,39,40,135],"inclusive":true},"JAVA":{"rules":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,135],"inclusive":true},"PROGRAMA":{"rules":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"inclusive":true},"COMENTARIO":{"rules":[96,97,135],"inclusive":true},"BLOQUE_COMENTARIO":{"rules":[98,99,135],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}