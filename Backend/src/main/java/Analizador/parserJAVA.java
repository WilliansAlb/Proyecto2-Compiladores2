
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import Interpretes.InterpreteJAVA.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserJAVA extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symJAVA.class;
}

  /** Default constructor. */
  @Deprecated
  public parserJAVA() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserJAVA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserJAVA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\003\000\002\054" +
    "\004\000\002\054\003\000\002\055\011\000\002\055\003" +
    "\000\002\035\002\000\002\035\004\000\002\034\005\000" +
    "\002\034\003\000\002\004\004\000\002\004\003\000\002" +
    "\003\003\000\002\003\003\000\002\016\013\000\002\016" +
    "\012\000\002\053\002\000\002\053\003\000\002\052\006" +
    "\000\002\052\004\000\002\031\004\000\002\031\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\004\000\002\022\003" +
    "\000\002\022\003\000\002\060\015\000\002\047\004\000" +
    "\002\047\004\000\002\047\005\000\002\064\006\000\002" +
    "\064\005\000\002\032\004\000\002\032\003\000\002\061" +
    "\006\000\002\045\002\000\002\045\003\000\002\044\005" +
    "\000\002\044\003\000\002\023\003\000\002\023\004\000" +
    "\002\023\004\000\002\014\006\000\002\015\007\000\002" +
    "\040\003\000\002\040\003\000\002\020\002\000\002\020" +
    "\004\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\004\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\017\005\000\002\017\003\000\002\017\004" +
    "\000\002\017\003\000\002\043\011\000\002\043\015\000" +
    "\002\043\013\000\002\063\006\000\002\057\013\000\002" +
    "\056\011\000\002\062\011\000\002\062\012\000\002\062" +
    "\011\000\002\041\004\000\002\041\003\000\002\042\006" +
    "\000\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\006\003\004\077\005\001\002\000\010\002" +
    "\ufffc\003\ufffc\077\ufffc\001\002\000\004\013\013\001\002" +
    "\000\010\002\ufffe\003\ufffe\077\ufffe\001\002\000\010\002" +
    "\000\003\004\077\005\001\002\000\004\002\011\001\002" +
    "\000\004\002\001\001\002\000\010\002\uffff\003\uffff\077" +
    "\uffff\001\002\000\004\064\014\001\002\000\006\004\015" +
    "\062\ufffb\001\002\000\004\064\301\001\002\000\004\062" +
    "\017\001\002\000\006\077\024\100\025\001\002\000\010" +
    "\063\ufff6\077\ufff6\100\ufff6\001\002\000\010\063\ufff5\077" +
    "\ufff5\100\ufff5\001\002\000\010\063\ufff4\077\ufff4\100\ufff4" +
    "\001\002\000\010\063\322\077\024\100\025\001\002\000" +
    "\016\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\064\uffce" +
    "\001\002\000\016\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\064\uffcd\001\002\000\016\005\035\006\033\007\032" +
    "\010\034\011\030\064\027\001\002\000\004\067\313\001" +
    "\002\000\004\064\uffc8\001\002\000\004\064\036\001\002" +
    "\000\004\064\uffc7\001\002\000\004\064\uffc9\001\002\000" +
    "\004\064\uffc6\001\002\000\004\064\uffca\001\002\000\012" +
    "\061\ufff8\067\130\073\ufff8\076\ufff8\001\002\000\010\061" +
    "\040\073\042\076\uffcc\001\002\000\004\064\127\001\002" +
    "\000\004\076\126\001\002\000\024\007\050\044\054\046" +
    "\055\064\053\065\045\066\047\067\044\071\056\072\046" +
    "\001\002\000\110\003\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\015\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\037\uffad\041\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\061" +
    "\uffad\063\uffad\064\uffad\070\uffad\076\uffad\001\002\000\024" +
    "\007\050\044\054\046\055\064\053\065\045\066\047\067" +
    "\044\071\056\072\046\001\002\000\112\003\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\015\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\037\uffc4\041\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\060\uffc4\061\uffc4\063\uffc4\064\uffc4\070" +
    "\uffc4\076\uffc4\001\002\000\112\003\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\015\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\037" +
    "\uffc1\041\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\060\uffc1\061\uffc1\063\uffc1\064\uffc1\070\uffc1\076" +
    "\uffc1\001\002\000\112\003\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\041" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\060\uffc3\061\uffc3\063\uffc3\064\uffc3\070\uffc3\076\uffc3\001" +
    "\002\000\112\003\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\041\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\060\uffc2" +
    "\061\uffc2\063\uffc2\064\uffc2\070\uffc2\076\uffc2\001\002\000" +
    "\040\030\071\031\072\032\070\033\062\034\074\035\061" +
    "\037\060\041\075\045\063\046\073\047\066\050\067\051" +
    "\065\052\064\076\uffcb\001\002\000\110\003\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\011\uffb1\015\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\037\uffb1\041\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\061\uffb1\063\uffb1\064\uffb1\070\uffb1\076" +
    "\uffb1\001\002\000\112\003\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\015\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf\041" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\061\uffaf\063\uffaf\064\uffaf\067\115\070\uffaf\076\uffaf\001" +
    "\002\000\024\007\050\044\054\046\055\064\053\065\045" +
    "\066\047\067\044\071\056\072\046\001\002\000\024\007" +
    "\050\044\054\046\055\064\053\065\045\066\047\067\044" +
    "\071\056\072\046\001\002\000\112\003\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\015\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\037\uffc5\041\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5\070\uffc5" +
    "\076\uffc5\001\002\000\110\003\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\011\uffba\015\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\071\031\072\032\070\033\062\034\074\035\061\037\060" +
    "\041\075\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\061\uffba\063\uffba\064\uffba\070\uffba\076\uffba\001\002" +
    "\000\024\007\050\044\054\046\055\064\053\065\045\066" +
    "\047\067\044\071\056\072\046\001\002\000\024\007\050" +
    "\044\054\046\055\064\053\065\045\066\047\067\044\071" +
    "\056\072\046\001\002\000\024\007\050\044\054\046\055" +
    "\064\053\065\045\066\047\067\044\071\056\072\046\001" +
    "\002\000\024\007\050\044\054\046\055\064\053\065\045" +
    "\066\047\067\044\071\056\072\046\001\002\000\024\007" +
    "\050\044\054\046\055\064\053\065\045\066\047\067\044" +
    "\071\056\072\046\001\002\000\024\007\050\044\054\046" +
    "\055\064\053\065\045\066\047\067\044\071\056\072\046" +
    "\001\002\000\024\007\050\044\054\046\055\064\053\065" +
    "\045\066\047\067\044\071\056\072\046\001\002\000\024" +
    "\007\050\044\054\046\055\064\053\065\045\066\047\067" +
    "\044\071\056\072\046\001\002\000\024\007\050\044\054" +
    "\046\055\064\053\065\045\066\047\067\044\071\056\072" +
    "\046\001\002\000\024\007\050\044\054\046\055\064\053" +
    "\065\045\066\047\067\044\071\056\072\046\001\002\000" +
    "\024\007\050\044\054\046\055\064\053\065\045\066\047" +
    "\067\044\071\056\072\046\001\002\000\024\007\050\044" +
    "\054\046\055\064\053\065\045\066\047\067\044\071\056" +
    "\072\046\001\002\000\024\007\050\044\054\046\055\064" +
    "\053\065\045\066\047\067\044\071\056\072\046\001\002" +
    "\000\024\007\050\044\054\046\055\064\053\065\045\066" +
    "\047\067\044\071\056\072\046\001\002\000\110\003\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\015\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\071\031\072\032\070\033\062\034" +
    "\074\035\061\037\060\041\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\061\uffb2\063\uffb2\064\uffb2\070" +
    "\uffb2\076\uffb2\001\002\000\110\003\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\015\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\037" +
    "\uffb6\041\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\061\uffb6\063\uffb6\064\uffb6\070\uffb6\076\uffb6\001" +
    "\002\000\110\003\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\071\031\072" +
    "\032\070\033\062\034\074\035\061\037\060\041\075\045" +
    "\uffbf\046\uffbf\047\066\050\067\051\065\052\064\061\uffbf" +
    "\063\uffbf\064\uffbf\070\uffbf\076\uffbf\001\002\000\110\003" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\015\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\037\uffb4\041\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\061\uffb4\063\uffb4\064\uffb4" +
    "\070\uffb4\076\uffb4\001\002\000\110\003\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\015\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\037\uffb5\041\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\061\uffb5\063\uffb5\064\uffb5\070\uffb5\076\uffb5" +
    "\001\002\000\110\003\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\041\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\061" +
    "\uffb9\063\uffb9\064\uffb9\070\uffb9\076\uffb9\001\002\000\110" +
    "\003\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\071\031\072\032\070\033" +
    "\062\034\074\035\061\037\060\041\075\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\064\061\uffbd\063\uffbd\064" +
    "\uffbd\070\uffbd\076\uffbd\001\002\000\110\003\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\015\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\071\031\072\032\070\033\062\034\074\035" +
    "\061\037\060\041\075\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\064\061\uffbe\063\uffbe\064\uffbe\070\uffbe\076" +
    "\uffbe\001\002\000\110\003\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\071" +
    "\031\072\032\070\033\062\034\074\035\061\037\060\041" +
    "\075\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\064" +
    "\061\uffbb\063\uffbb\064\uffbb\070\uffbb\076\uffbb\001\002\000" +
    "\110\003\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\071\031\072\032\070" +
    "\033\062\034\074\035\061\037\060\041\075\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\061\uffbc\063\uffbc" +
    "\064\uffbc\070\uffbc\076\uffbc\001\002\000\110\003\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\015\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\071\031\072\032\070\033\062\034\074" +
    "\035\061\037\060\041\075\045\uffc0\046\uffc0\047\066\050" +
    "\067\051\065\052\064\061\uffc0\063\uffc0\064\uffc0\070\uffc0" +
    "\076\uffc0\001\002\000\110\003\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8" +
    "\041\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\061\uffb8\063\uffb8\064\uffb8\070\uffb8\076\uffb8\001\002" +
    "\000\110\003\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011" +
    "\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7\041\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\061\uffb7\063" +
    "\uffb7\064\uffb7\070\uffb7\076\uffb7\001\002\000\110\003\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\015\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\071\031\072\032\070\033\062\034" +
    "\074\035\061\037\uffb3\041\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\061\uffb3\063\uffb3\064\uffb3\070" +
    "\uffb3\076\uffb3\001\002\000\110\003\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\015\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\071\031\072\032\070\033\062\034\074\035\061\037" +
    "\uffae\041\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\061\uffae\063\uffae\064\uffae\070\uffae\076\uffae\001" +
    "\002\000\026\007\050\044\054\046\055\064\053\065\045" +
    "\066\047\067\044\070\uffd7\071\056\072\046\001\002\000" +
    "\004\070\123\001\002\000\006\061\121\070\uffd6\001\002" +
    "\000\042\030\071\031\072\032\070\033\062\034\074\035" +
    "\061\037\060\041\075\045\063\046\073\047\066\050\067" +
    "\051\065\052\064\061\uffd4\070\uffd4\001\002\000\024\007" +
    "\050\044\054\046\055\064\053\065\045\066\047\067\044" +
    "\071\056\072\046\001\002\000\042\030\071\031\072\032" +
    "\070\033\062\034\074\035\061\037\060\041\075\045\063" +
    "\046\073\047\066\050\067\051\065\052\064\061\uffd5\070" +
    "\uffd5\001\002\000\110\003\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\041" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\061\uffd8\063\uffd8\064\uffd8\070\uffd8\076\uffd8\001\002\000" +
    "\040\030\071\031\072\032\070\033\062\034\074\035\061" +
    "\037\060\041\075\045\063\046\073\047\066\050\067\051" +
    "\065\052\064\070\125\001\002\000\110\003\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\015\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\037\uffb0\041\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\061\uffb0\063\uffb0\064\uffb0\070\uffb0\076" +
    "\uffb0\001\002\000\010\063\uffcf\077\uffcf\100\uffcf\001\002" +
    "\000\012\061\ufff9\062\ufff9\073\ufff9\076\ufff9\001\002\000" +
    "\016\005\035\006\033\007\032\010\034\011\030\070\ufff1" +
    "\001\002\000\006\061\310\070\ufff0\001\002\000\004\064" +
    "\307\001\002\000\004\070\134\001\002\000\004\062\135" +
    "\001\002\000\034\003\156\005\035\006\033\007\032\010" +
    "\034\011\030\015\150\017\146\024\160\025\142\026\153" +
    "\027\144\064\151\001\002\000\036\003\156\005\035\006" +
    "\033\007\032\010\034\011\030\015\150\017\146\024\160" +
    "\025\142\026\153\027\144\063\306\064\151\001\002\000" +
    "\046\003\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\063\uffe9\064\uffe9\001\002" +
    "\000\004\064\301\001\002\000\046\003\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\015\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\063\uffea\064\uffea\001\002\000\004\067\273\001\002" +
    "\000\046\003\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\063\uffe4\064\uffe4\001" +
    "\002\000\024\007\050\044\054\046\055\064\053\065\045" +
    "\066\047\067\044\071\056\072\046\001\002\000\036\003" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\015\uffec" +
    "\017\uffec\024\uffec\025\uffec\026\uffec\027\uffec\063\uffec\064" +
    "\uffec\001\002\000\004\067\246\001\002\000\046\003\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\015\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\063\uffe5\064\uffe5\001\002\000\004\067" +
    "\233\001\002\000\014\053\213\054\212\055\211\067\115" +
    "\073\230\001\002\000\046\003\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\063" +
    "\uffe8\064\uffe8\001\002\000\004\062\220\001\002\000\004" +
    "\076\217\001\002\000\046\003\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\063" +
    "\uffeb\064\uffeb\001\002\000\046\003\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\015\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\063\uffe1\064\uffe1\001\002\000\046\003\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\015\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\063\uffe2\064\uffe2\001\002\000\004\067\162\001\002" +
    "\000\046\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\063\uffe6\064\uffe6\001" +
    "\002\000\006\005\165\064\163\001\002\000\004\073\215" +
    "\001\002\000\004\076\171\001\002\000\004\064\166\001" +
    "\002\000\004\073\167\001\002\000\024\007\050\044\054" +
    "\046\055\064\053\065\045\066\047\067\044\071\056\072" +
    "\046\001\002\000\040\030\071\031\072\032\070\033\062" +
    "\034\074\035\061\037\060\041\075\045\063\046\073\047" +
    "\066\050\067\051\065\052\064\076\uffdc\001\002\000\024" +
    "\007\050\044\054\046\055\064\053\065\045\066\047\067" +
    "\044\071\056\072\046\001\002\000\040\030\071\031\072" +
    "\032\070\033\062\034\074\035\061\037\060\041\075\045" +
    "\063\046\073\047\066\050\067\051\065\052\064\076\173" +
    "\001\002\000\004\064\174\001\002\000\010\053\213\054" +
    "\212\055\211\001\002\000\004\070\176\001\002\000\004" +
    "\062\177\001\002\000\040\003\156\005\035\006\033\007" +
    "\032\010\034\011\030\015\150\017\146\021\204\022\200" +
    "\024\160\025\142\026\153\027\144\064\151\001\002\000" +
    "\004\076\210\001\002\000\042\003\156\005\035\006\033" +
    "\007\032\010\034\011\030\015\150\017\146\021\204\022" +
    "\200\024\160\025\142\026\153\027\144\063\207\064\151" +
    "\001\002\000\046\003\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\063\uffd9\064" +
    "\uffd9\001\002\000\046\003\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\063\uffd3" +
    "\064\uffd3\001\002\000\004\076\205\001\002\000\046\003" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\015\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\063\uffd2\064\uffd2\001\002\000\046" +
    "\003\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\015" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\063\uffda\064\uffda\001\002\000" +
    "\046\003\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\063\uffe0\064\uffe0\001\002" +
    "\000\046\003\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\063\uffd1\064\uffd1\001" +
    "\002\000\024\007\050\044\054\046\055\064\053\065\045" +
    "\066\047\067\044\071\056\072\046\001\002\000\050\003" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\063\uffdf\064\uffdf\070\uffdf\001\002" +
    "\000\050\003\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\063\uffde\064\uffde\070" +
    "\uffde\001\002\000\104\003\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\071" +
    "\031\072\032\070\033\062\034\074\035\061\037\060\041" +
    "\075\045\063\046\073\047\066\050\067\051\065\052\064" +
    "\063\uffdd\064\uffdd\070\uffdd\001\002\000\024\007\050\044" +
    "\054\046\055\064\053\065\045\066\047\067\044\071\056" +
    "\072\046\001\002\000\040\030\071\031\072\032\070\033" +
    "\062\034\074\035\061\037\060\041\075\045\063\046\073" +
    "\047\066\050\067\051\065\052\064\076\uffdb\001\002\000" +
    "\046\003\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\015\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\063\uffe3\064\uffe3\001\002" +
    "\000\040\003\156\005\035\006\033\007\032\010\034\011" +
    "\030\015\150\017\146\021\204\022\200\024\160\025\142" +
    "\026\153\027\144\064\151\001\002\000\042\003\156\005" +
    "\035\006\033\007\032\010\034\011\030\015\150\017\146" +
    "\021\204\022\200\024\160\025\142\026\153\027\144\063" +
    "\222\064\151\001\002\000\004\025\223\001\002\000\004" +
    "\067\224\001\002\000\024\007\050\044\054\046\055\064" +
    "\053\065\045\066\047\067\044\071\056\072\046\001\002" +
    "\000\040\030\071\031\072\032\070\033\062\034\074\035" +
    "\061\037\060\041\075\045\063\046\073\047\066\050\067" +
    "\051\065\052\064\070\226\001\002\000\004\076\227\001" +
    "\002\000\046\003\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\011\uffa8\015\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\063\uffa8\064\uffa8" +
    "\001\002\000\024\007\050\044\054\046\055\064\053\065" +
    "\045\066\047\067\044\071\056\072\046\001\002\000\040" +
    "\030\071\031\072\032\070\033\062\034\074\035\061\037" +
    "\060\041\075\045\063\046\073\047\066\050\067\051\065" +
    "\052\064\076\232\001\002\000\046\003\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\015\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\063\uffa9\064\uffa9\001\002\000\024\007\050\044\054" +
    "\046\055\064\053\065\045\066\047\067\044\071\056\072" +
    "\046\001\002\000\040\030\071\031\072\032\070\033\062" +
    "\034\074\035\061\037\060\041\075\045\063\046\073\047" +
    "\066\050\067\051\065\052\064\070\235\001\002\000\004" +
    "\062\236\001\002\000\040\003\156\005\035\006\033\007" +
    "\032\010\034\011\030\015\150\017\146\021\204\022\200" +
    "\024\160\025\142\026\153\027\144\064\151\001\002\000" +
    "\042\003\156\005\035\006\033\007\032\010\034\011\030" +
    "\015\150\017\146\021\204\022\200\024\160\025\142\026" +
    "\153\027\144\063\240\064\151\001\002\000\050\003\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\015\uffac\016" +
    "\241\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\063\uffac\064\uffac\001\002\000" +
    "\006\015\150\062\243\001\002\000\046\003\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\015\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\063\uffaa\064\uffaa\001\002\000\040\003\156\005" +
    "\035\006\033\007\032\010\034\011\030\015\150\017\146" +
    "\021\204\022\200\024\160\025\142\026\153\027\144\064" +
    "\151\001\002\000\042\003\156\005\035\006\033\007\032" +
    "\010\034\011\030\015\150\017\146\021\204\022\200\024" +
    "\160\025\142\026\153\027\144\063\245\064\151\001\002" +
    "\000\046\003\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\015\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\063\uffab\064\uffab\001" +
    "\002\000\004\064\247\001\002\000\004\070\250\001\002" +
    "\000\004\062\251\001\002\000\006\020\256\023\252\001" +
    "\002\000\004\060\267\001\002\000\004\063\266\001\002" +
    "\000\010\020\256\023\252\063\264\001\002\000\010\020" +
    "\uffa2\023\uffa2\063\uffa2\001\002\000\014\007\050\065\045" +
    "\066\047\071\056\072\046\001\002\000\004\060\260\001" +
    "\002\000\040\003\156\005\035\006\033\007\032\010\034" +
    "\011\030\015\150\017\146\021\204\022\200\024\160\025" +
    "\142\026\153\027\144\064\151\001\002\000\046\003\156" +
    "\005\035\006\033\007\032\010\034\011\030\015\150\017" +
    "\146\020\uffa1\021\204\022\200\023\uffa1\024\160\025\142" +
    "\026\153\027\144\063\uffa1\064\151\001\002\000\004\063" +
    "\265\001\002\000\010\020\uffa3\023\uffa3\063\uffa3\001\002" +
    "\000\046\003\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\015\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\063\uffa6\064\uffa6\001" +
    "\002\000\046\003\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\015\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\063\uffa5\064\uffa5" +
    "\001\002\000\046\003\uffa4\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\063\uffa4\064" +
    "\uffa4\001\002\000\040\003\156\005\035\006\033\007\032" +
    "\010\034\011\030\015\150\017\146\021\204\022\200\024" +
    "\160\025\142\026\153\027\144\064\151\001\002\000\042" +
    "\003\156\005\035\006\033\007\032\010\034\011\030\015" +
    "\150\017\146\021\204\022\200\024\160\025\142\026\153" +
    "\027\144\063\uffa0\064\151\001\002\000\040\030\071\031" +
    "\072\032\070\033\062\034\074\035\061\037\060\041\075" +
    "\045\063\046\073\047\066\050\067\051\065\052\064\076" +
    "\272\001\002\000\046\003\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\063\uffe7" +
    "\064\uffe7\001\002\000\024\007\050\044\054\046\055\064" +
    "\053\065\045\066\047\067\044\071\056\072\046\001\002" +
    "\000\040\030\071\031\072\032\070\033\062\034\074\035" +
    "\061\037\060\041\075\045\063\046\073\047\066\050\067" +
    "\051\065\052\064\070\275\001\002\000\004\062\276\001" +
    "\002\000\040\003\156\005\035\006\033\007\032\010\034" +
    "\011\030\015\150\017\146\021\204\022\200\024\160\025" +
    "\142\026\153\027\144\064\151\001\002\000\042\003\156" +
    "\005\035\006\033\007\032\010\034\011\030\015\150\017" +
    "\146\021\204\022\200\024\160\025\142\026\153\027\144" +
    "\063\300\064\151\001\002\000\046\003\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\015\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\063\uffa7\064\uffa7\001\002\000\012\061\ufff8\062\ufff8" +
    "\073\ufff8\076\ufff8\001\002\000\010\061\040\073\042\076" +
    "\uffcc\001\002\000\004\076\304\001\002\000\046\003\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\015\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\063\uffd0\064\uffd0\001\002\000\036\003" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\015\uffed" +
    "\017\uffed\024\uffed\025\uffed\026\uffed\027\uffed\063\uffed\064" +
    "\uffed\001\002\000\010\063\ufff3\077\ufff3\100\ufff3\001\002" +
    "\000\006\061\uffee\070\uffee\001\002\000\014\005\035\006" +
    "\033\007\032\010\034\011\030\001\002\000\004\064\312" +
    "\001\002\000\006\061\uffef\070\uffef\001\002\000\016\005" +
    "\035\006\033\007\032\010\034\011\030\070\ufff1\001\002" +
    "\000\004\070\315\001\002\000\004\062\316\001\002\000" +
    "\034\003\156\005\035\006\033\007\032\010\034\011\030" +
    "\015\150\017\146\024\160\025\142\026\153\027\144\064" +
    "\151\001\002\000\036\003\156\005\035\006\033\007\032" +
    "\010\034\011\030\015\150\017\146\024\160\025\142\026" +
    "\153\027\144\063\320\064\151\001\002\000\010\063\ufff2" +
    "\077\ufff2\100\ufff2\001\002\000\010\063\ufff7\077\ufff7\100" +
    "\ufff7\001\002\000\010\002\ufffd\003\ufffd\077\ufffd\001\002" +
    "\000\006\061\040\062\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\010\002\007\054\006\055\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\015\001\001" +
    "\000\004\034\322\001\001\000\002\001\001\000\014\003" +
    "\017\004\022\015\020\016\021\040\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\320\015\020\016\021\040\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\050\033\051\061" +
    "\042\001\001\000\002\001\001\000\010\017\123\033\051" +
    "\061\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\113\033\051\061" +
    "\042\001\001\000\010\017\056\033\051\061\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\112\033" +
    "\051\061\042\001\001\000\010\017\111\033\051\061\042" +
    "\001\001\000\010\017\110\033\051\061\042\001\001\000" +
    "\010\017\107\033\051\061\042\001\001\000\010\017\106" +
    "\033\051\061\042\001\001\000\010\017\105\033\051\061" +
    "\042\001\001\000\010\017\104\033\051\061\042\001\001" +
    "\000\010\017\103\033\051\061\042\001\001\000\010\017" +
    "\102\033\051\061\042\001\001\000\010\017\101\033\051" +
    "\061\042\001\001\000\010\017\100\033\051\061\042\001" +
    "\001\000\010\017\077\033\051\061\042\001\001\000\010" +
    "\017\076\033\051\061\042\001\001\000\010\017\075\033" +
    "\051\061\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\117\033\051\044\116\045\115\061\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\121\033\051\061\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\131\052" +
    "\130\053\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\014\154\022" +
    "\144\031\135\036\137\043\160\047\140\056\142\057\146" +
    "\060\136\061\153\062\156\063\151\001\001\000\030\014" +
    "\154\022\304\036\137\043\160\047\140\056\142\057\146" +
    "\060\136\061\153\062\156\063\151\001\001\000\002\001" +
    "\001\000\004\034\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\270\033\051\061" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\167\033\051\061\042\001\001\000\002\001\001" +
    "\000\010\017\171\033\051\061\042\001\001\000\002\001" +
    "\001\000\004\047\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\014\154\022\202\023" +
    "\201\032\200\036\137\043\160\047\140\056\142\057\146" +
    "\060\136\061\153\062\156\063\151\001\001\000\002\001" +
    "\001\000\032\014\154\022\202\023\205\036\137\043\160" +
    "\047\140\056\142\057\146\060\136\061\153\062\156\063" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\213\033\051\061\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\215\033\051\061\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\014\154\022\202\023" +
    "\201\032\220\036\137\043\160\047\140\056\142\057\146" +
    "\060\136\061\153\062\156\063\151\001\001\000\032\014" +
    "\154\022\202\023\205\036\137\043\160\047\140\056\142" +
    "\057\146\060\136\061\153\062\156\063\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\224\033\051" +
    "\061\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\230\033\051\061\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\233\033" +
    "\051\061\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\014\154\022\202\023\201\032\236\036\137\043" +
    "\160\047\140\056\142\057\146\060\136\061\153\062\156" +
    "\063\151\001\001\000\032\014\154\022\202\023\205\036" +
    "\137\043\160\047\140\056\142\057\146\060\136\061\153" +
    "\062\156\063\151\001\001\000\002\001\001\000\004\043" +
    "\241\001\001\000\002\001\001\000\034\014\154\022\202" +
    "\023\201\032\243\036\137\043\160\047\140\056\142\057" +
    "\146\060\136\061\153\062\156\063\151\001\001\000\032" +
    "\014\154\022\202\023\205\036\137\043\160\047\140\056" +
    "\142\057\146\060\136\061\153\062\156\063\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\252\041\253\042\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\261\042" +
    "\262\001\001\000\002\001\001\000\004\033\256\001\001" +
    "\000\002\001\001\000\034\014\154\022\202\023\201\032" +
    "\260\036\137\043\160\047\140\056\142\057\146\060\136" +
    "\061\153\062\156\063\151\001\001\000\032\014\154\022" +
    "\202\023\205\036\137\043\160\047\140\056\142\057\146" +
    "\060\136\061\153\062\156\063\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\014\154\022\202\023\201\032" +
    "\267\036\137\043\160\047\140\056\142\057\146\060\136" +
    "\061\153\062\156\063\151\001\001\000\032\014\154\022" +
    "\202\023\205\036\137\043\160\047\140\056\142\057\146" +
    "\060\136\061\153\062\156\063\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\273\033\051\061\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\014" +
    "\154\022\202\023\201\032\276\036\137\043\160\047\140" +
    "\056\142\057\146\060\136\061\153\062\156\063\151\001" +
    "\001\000\032\014\154\022\202\023\205\036\137\043\160" +
    "\047\140\056\142\057\146\060\136\061\153\062\156\063" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\131\052\130\053\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\014\154\022\144\031\316\036" +
    "\137\043\160\047\140\056\142\057\146\060\136\061\153" +
    "\062\156\063\151\001\001\000\030\014\154\022\304\036" +
    "\137\043\160\047\140\056\142\057\146\060\136\061\153" +
    "\062\156\063\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserJAVA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserJAVA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserJAVA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public List<Expresion> lista_expresiones;
    public Clases programa = new Clases();
    public List<Metodo> lista_metodos = new LinkedList<>();
    public List<Declaracion> lista_declaraciones = new LinkedList<>();

    public void syntax_error(Symbol cur_token) {
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        imp(esperados);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserJAVA$actions {
  private final parserJAVA parser;

  /** Constructor */
  CUP$parserJAVA$actions(parserJAVA parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserJAVA$do_action_part00000000(
    int                        CUP$parserJAVA$act_num,
    java_cup.runtime.lr_parser CUP$parserJAVA$parser,
    java.util.Stack            CUP$parserJAVA$stack,
    int                        CUP$parserJAVA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserJAVA$result;

      /* select the action based on the action number */
      switch (CUP$parserJAVA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		RESULT = start_val;
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserJAVA$parser.done_parsing();
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= pistas 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		List<Clase> e1 = (List<Clase>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            programa = new Clases(e1);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pistas ::= pistas pista 
            {
              List<Clase> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Clase> e1 = (List<Clase>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Clase e2 = (Clase)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("pistas",42, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pistas ::= pista 
            {
              List<Clase> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Clase e1 = (Clase)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("pistas",42, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pista ::= PUBLIC CLASE ID extiende LLAVE_A lista_declaracion LLAVE_C 
            {
              Clase RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).right;
		List<String> e3 = (List<String>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).value;
		
            RESULT = new Clase(lista_metodos,lista_declaraciones,e3,e2.toString());
            lista_metodos = new LinkedList<>();
            lista_declaraciones = new LinkedList<>();
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("pista",43, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pista ::= error 
            {
              Clase RESULT =null;

              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("pista",43, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extiende ::= 
            {
              List<String> RESULT =null;
		
            RESULT = null;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("extiende",27, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // extiende ::= EXTENDS ids 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("extiende",27, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ids ::= ids COMA ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            e1.add(e2.toString()); 
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("ids",26, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ids ::= ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new LinkedList<>();
            RESULT.add(e1.toString()); 
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("ids",26, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_declaracion ::= lista_declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_declaracion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= declaracion_global 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            lista_declaraciones.add(e1);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaraciones ::= metodo 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Metodo e1 = (Metodo)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            lista_metodos.add(e1);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodo ::= tipo_uso tipo ID PAR_A param PAR_C LLAVE_A instrucciones LLAVE_C 
            {
              Metodo RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),e2.toString(),e3,e4,true,e5.toString());
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("metodo",12, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodo ::= tipo_uso ID PAR_A param PAR_C LLAVE_A instrucciones LLAVE_C 
            {
              Metodo RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Metodo("constructor",e2.toString(),e3,e4,true,e5.toString());
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("metodo",12, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= 
            {
              List<Parametro> RESULT =null;
		
            RESULT = null;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("param",41, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= parametros 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("param",41, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros ::= parametros COMA tipo ID 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(new Parametro(e2.toString(),e3));
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("parametros",40, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= tipo ID 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(new Parametro(e2.toString(),e1));
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("parametros",40, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrucciones ::= instrucciones instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= paso 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Paso e1 = (Paso)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= para 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		For e1 = (For)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= asignacion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Asignacion e1 = (Asignacion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= RETURN expresion PUNTOC 
            {
              Instruccion RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Return(e1);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= si 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		If e1 = (If)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= hacer 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Do e1 = (Do)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= mientras 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		While e1 = (While)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= llamada PUNTOC 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Llamada e1 = (Llamada)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= switch 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Switch e1 = (Switch)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		
            RESULT = null;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // para ::= FOR PAR_A asigna PUNTOC expresion PUNTOC paso PAR_C LLAVE_A inst LLAVE_C 
            {
              For RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-10)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-10)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).right;
		Asigna e1 = (Asigna)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).right;
		Paso e3 = (Paso)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new For(e1, e2, e3, e4);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("para",46, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paso ::= ID INC 
            {
              Paso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Paso(e1.toString(),null,Paso.TIPO.INCREMENTO);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("paso",37, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paso ::= ID DEC 
            {
              Paso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Paso(e1.toString(),null,Paso.TIPO.DECREMENTO);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("paso",37, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paso ::= ID SUMA_S expresion 
            {
              Paso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new Paso(e1.toString(),e2,Paso.TIPO.SIMPLIFICADA);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("paso",37, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asigna ::= INT ID ASIGNAR expresion 
            {
              Asigna RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new Asigna(e1.toString(), e2);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("asigna",50, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asigna ::= ID ASIGNAR expresion 
            {
              Asigna RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new Asigna(e1.toString(), e2);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("asigna",50, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inst ::= inst instruc 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
        RESULT = e1;
        RESULT.add(e2);
    
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("inst",24, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inst ::= instruc 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(e1);
    
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("inst",24, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamada ::= ID PAR_A param_enviar PAR_C 
            {
              Llamada RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Expresion> e2 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Llamada(e1.toString(),e2);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("llamada",47, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // param_enviar ::= 
            {
              List<Expresion> RESULT =null;
		
        RESULT = null;
    
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("param_enviar",35, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // param_enviar ::= parametros_enviar 
            {
              List<Expresion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		List<Expresion> e1 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
        RESULT = e1;
    
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("param_enviar",35, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_enviar ::= parametros_enviar COMA expresion 
            {
              List<Expresion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		List<Expresion> e1 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("parametros_enviar",34, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_enviar ::= expresion 
            {
              List<Expresion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("parametros_enviar",34, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruc ::= instruccion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
        RESULT = e1;
    
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruc",17, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruc ::= BREAK PUNTOC 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
        RESULT = new CB(false);
    
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruc",17, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruc ::= CONTINUE PUNTOC 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
        RESULT = new CB(true);
    
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("instruc",17, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= tipo ids asignar PUNTOC 
            {
              Declaracion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Declaracion(e2, e1, e3, null);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_global ::= tipo_uso tipo ids asignar PUNTOC 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Declaracion(e2, e1, e3, e4);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("declaracion_global",11, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_uso ::= PUBLIC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("tipo_uso",30, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_uso ::= PRIVATE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("tipo_uso",30, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignar ::= 
            {
              Expresion RESULT =null;
		
            RESULT = null;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("asignar",14, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignar ::= ASIGNAR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = e1; 
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("asignar",14, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= INT 
            {
              String RESULT =null;
		
            RESULT = "int";
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= FLOAT 
            {
              String RESULT =null;
		
            RESULT = "float";
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo ::= STRING 
            {
              String RESULT =null;
		
            RESULT = "string";
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		
            RESULT = "boolean";
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo ::= CHAR 
            {
              String RESULT =null;
		
            RESULT = "char";
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valor_puntual ::= INTV 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new Primitivo("int",e1right,e1left,Integer.parseInt(e1.toString())); 
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("valor_puntual",25, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valor_puntual ::= STRINGV 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Primitivo("string",e1right,e1left,e1.toString()); 
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("valor_puntual",25, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor_puntual ::= CHARV 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Primitivo("char",e1right,e1left,e1.toString().charAt(0)); 
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("valor_puntual",25, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor_puntual ::= BOOLEAN 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Primitivo("boolean",e1right,e1left,true);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("valor_puntual",25, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor_puntual ::= FLOATV 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Primitivo("float",e1right,e1left,Double.parseDouble(e1.toString())); 
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("valor_puntual",25, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion SUMA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"+");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new Expresion(e1,e2,"-");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"*");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion ENTRE expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"/");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"^");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion MOD expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"%");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,"menos");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,">");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"<");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion MENOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"<=");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion MAYOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,">=");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"==");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion DIFF expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"!=");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"&&");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,"||");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= valor_puntual 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Primitivo e1 = (Primitivo)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,"valor");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= PAR_A expresion PAR_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		 
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(new Identificador(e1.toString()),"id");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(e1,"!");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= llamada 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Llamada e1 = (Llamada)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		 
            RESULT = new Expresion(new Retorno(e1),"llamada");
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // si ::= IF PAR_A expresion PAR_C LLAVE_A inst LLAVE_C 
            {
              If RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new If(e1, e2, null, null);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("si",33, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // si ::= IF PAR_A expresion PAR_C LLAVE_A inst LLAVE_C ELSE LLAVE_A inst LLAVE_C 
            {
              If RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-10)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-10)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-5)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new If(e1, e2, e3, null);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("si",33, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // si ::= IF PAR_A expresion PAR_C LLAVE_A inst LLAVE_C ELSE si 
            {
              If RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		If e3 = (If)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new If(e1, e2, null, e3);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("si",33, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignacion ::= ID ASIGNAR expresion PUNTOC 
            {
              Asignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		 
            RESULT = new Asignacion(e1.toString(),e2);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("asignacion",49, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // hacer ::= DO LLAVE_A inst LLAVE_C WHILE PAR_A expresion PAR_C PUNTOC 
            {
              Do RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		
            RESULT = new Do(e2, e3);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("hacer",45, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // mientras ::= WHILE PAR_A expresion PAR_C LLAVE_A inst LLAVE_C 
            {
              While RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new While(e2, e3);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("mientras",44, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // switch ::= SWITCH PAR_A ID PAR_C LLAVE_A casos LLAVE_C 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Case> e3 = (List<Case>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e3, null);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("switch",48, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // switch ::= SWITCH PAR_A ID PAR_C LLAVE_A casos default LLAVE_C 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		List<Case> e4 = (List<Case>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e4, e3);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("switch",48, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // switch ::= SWITCH PAR_A ID PAR_C LLAVE_A default LLAVE_C 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		
            RESULT = new Switch(e2.toString(), null, e3);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("switch",48, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // casos ::= casos caso 
            {
              List<Case> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).right;
		List<Case> e1 = (List<Case>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Case e2 = (Case)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("casos",31, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // casos ::= caso 
            {
              List<Case> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		Case e1 = (Case)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("casos",31, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // caso ::= CASE valor_puntual DOS_P inst 
            {
              Case RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).right;
		Primitivo e3 = (Primitivo)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = new Case(e3, e2);
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("caso",32, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // default ::= DEFAULT DOS_P inst 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parserJAVA$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parserJAVA$result = parser.getSymbolFactory().newSymbol("default",22, ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.elementAt(CUP$parserJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$parserJAVA$stack.peek()), RESULT);
            }
          return CUP$parserJAVA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserJAVA$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserJAVA$do_action(
    int                        CUP$parserJAVA$act_num,
    java_cup.runtime.lr_parser CUP$parserJAVA$parser,
    java.util.Stack            CUP$parserJAVA$stack,
    int                        CUP$parserJAVA$top)
    throws java.lang.Exception
    {
              return CUP$parserJAVA$do_action_part00000000(
                               CUP$parserJAVA$act_num,
                               CUP$parserJAVA$parser,
                               CUP$parserJAVA$stack,
                               CUP$parserJAVA$top);
    }
}

}
